{"version":3,"sources":["../external \"crypto\"","view/page/patient/section/consultations/consultation.svg","../external \"events\"","../external \"buffer\"","date-util/date-util.ts","state/state.ts","app/splash.ts","translate/translate.ts","service/mkdirp.ts","service/file-system.ts","settings/settings.ts","view/patient-short-desc/patient-short-desc.tsx","guid.ts","manager/patient.ts","service/patient.ts","manager/structure/structure.ts","view/field/text/text.tsx","view/consultation-form/consultation-form.tsx","view/page/consultation/consultation.tsx","view/page/patient/section/consultations/consultations.tsx","view/page/patient/section/prescriptions/prescriptions.tsx","view/page/patient/section/vaccins/vaccin-form/vaccin-form.tsx","view/page/patient/section/vaccins/vaccins.tsx","view/patient-form/patient-form.tsx","view/page/patient/patient.tsx","view/patient-summary-button/patient-summary-button.tsx","view/page/patients/patients-filter.ts","view/console/console-view.tsx","view/console/console-view.container.tsx","view/page/patients/patients.tsx","service/patient-import.ts","view/page/import-patient/import-patient.tsx","app/app.tsx","app/app.container.tsx","service/synchro.ts","manager/structure/parser.ts","service/structure/parser.ts","service/structure/structure.ts","serviceWorker.ts","index.tsx","../external \"util\"","../external \"path\"","../external \"fs\"","../external \"stream\""],"names":["module","exports","require","createUndefinedDate","Date","date2seconds","date","Math","floor","getTime","formatDate","dateFormatter","format","isDefinedDate","seconds2date","seconds","Intl","DateTimeFormat","weekday","year","month","day","INITIAL_STATE","consultationId","page","patient","id","lastname","firstname","secondname","gender","size","country","birth","DateUtil","patients","logs","store","createStore","state","action","type","log","splice","clearPatient","dispatch","addLog","message","setConsultationId","uuid","setPage","setPatient","setPatients","param","console","trace","splash","document","getElementById","classList","add","window","setTimeout","body","removeChild","_","Tfw","make","genderValue","trim","toUpperCase","path","fs","_0777","parseInt","mkdirP","p","opts","f","made","mode","xfs","undefined","process","umask","cb","resolve","mkdir","er","code","dirname","stat","er2","isDirectory","sync","mkdirSync","err0","statSync","err1","FS","Path","deleteFolder","foldername","Promise","reject","a","fullPath","ROOT","removeDirectory","exists","filename","existsSync","readText","readFile","err","data","writeText","content","mkdirp","writeFile","cwd","readdir","withFileTypes","entries","entry","name","isFile","removeFile","rmdir","unlink","DATA","remoteServer","secretCode","organizationId","structureId","save","Async","Debouncer","FileSystem","JSON","stringify","this","parse","Error","structure","error","REACT_APP_WEBSOINS","v","PatientShortDesc","classes","Converter","StringArray","props","className","Settings","age","getFullYear","join","title","length","toLowerCase","hasSecondName","React","Component","UuidV4","createPatientFromSummary","summary","Guid","now","admissions","created","attachments","edited","exams","picture","vaccins","getAllConsultationsBefore","timeInSeconds","consultations","admission","visits","consultation","enter","push","sort","c1","c2","getConsultationFromUuid","warn","getSummary","getSummaryFromRecord","removeConsultation","filter","setSummary","patientSummary","updateConsultation","newConsultation","version","max","record","Integer","Transform","normalizeName","Enum","upperCase","deletePatient","getAllPatients","getPatient","getPatientFolder","PatientManager","patientFilename","PATIENTS_FILENAME","PATIENTS","Map","loadPatientsFile","patientsFile","listToSort","Object","keys","records","map","key","sortedList","b","A","B","item","info","has","cachedPatient","get","patientContent","sanitizePatient","set","addUniqueIdIfMissing","addPatientToPatientsFile","savePatientsFile","delete","patientId","removePatientFromPatientsFile","patientsFileContent","file","count","createPatientsFieldsFromStructure","getCurrentStructure","patientsFields","patientFields","forEach","patientField","createPatientsFieldsCaptionsFromStructure","patientsFieldsCaptions","toText","caption","getFieldCaption","fieldKey","charAt","formFields","getValueCaption","typeKey","valueKey","types","values","children","subType","Input","View","Text","handleChange","value","onChange","getTypeKey","suggestions","typeName","t","getSuggestionsForType","label","wide","width","StructureManager","normalizedValue","Expand","Checkbox","InputDate","ConsultationForm","renderPrevConsultation","field","getFieldValue","updateField","sanitizedValue","updateBooleanField","overrideConsultation","fields","renderField","hasChildren","renderFields","prevConsultations","tags","Array","isArray","isBool","getFieldValueAsBoolean","bind","indexOf","getFieldValueAsDate","form","forms","Button","Consultations","oldPatientSummary","oldConsultationId","refresh","PatientService","setState","copy","componentDidMount","componentDidUpdate","handleOK","onBack","handleCancel","handleDataChange","time","consultationDate","Translate","ok","icon","color","onClick","cancel","warningConsultationDate","obj","Touchable","renderAdmission","renderConsultation","dat","onConsultationClick","src","ConsultationImage","clickToEdit","onNewConsultationClick","sortByDateDesc","Storage","PrefixedLocalStorage","MONTHES","Prescriptions","prescripteur","service","selection","update","newState","handlePrint","pages","groupSelectionByPage","arch","JSZip","buildContent","folder","loadFile","getMonth","getDate","stream","generateNodeStream","streamFiles","compression","compressionOptions","level","mimeType","metadata","currentFile","percent","pipe","createWriteStream","on","Factory","Dialog","nw","Shell","openItem","ex","itemKey","selected","selectionWithoutItem","sectionKey","renderSection","section","subSectionElements","subSectionKey","subSection","renderCheckbox","isSelected","setItemSelection","out","pageTitle","sections","today","tag","sectionTitle","exam","renderSections","sortedSelection","split","pageName","sectionName","examName","getPageElement","getSectionElement","newPage","newSection","args","attribs","arg","val","Util","loadTextFromURL","VaccinForm","handleLotChange","lot","onLotChange","handleDateChange","onDateChange","vaccinDate","vaccinLot","Vaccins","renderVaccin","vaccin","currentVaccin","yy","mm","dd","warning","bad","handleVaccinClick","getVaccinCaption","confirm","onUpdateVaccin","vaccinIds","style","gridTemplate","ceil","InputInteger","PatientForm","newPatientSummary","fireChange","handleLastnameChange","handleFirstnameChange","handleSecondnameChange","handleCountryChange","handleGenderChange","handleSizeChange","handleBirthChange","birthTime","lastName","transform","focus","firstName","secondName","birthday","TabStrip","Layout","Patient","oldPatientId","handleConsultationClick","State","handleNewConsultationClick","handleUpdateVaccin","handleBack","handleEditPatient","dialog","show","editPatient","handleDeletePatient","footer","flat","hide","confirmDeletePatient","back","headers","prescriptions","PatientSummaryButton","handleClick","PatientsExport","patientSummaries","_filteredList","footPrints","slice","simplifyName","simpleLastName","simpleFirstName","idx","match","p1","p2","test","LETTERS_TO_CHANGE","letter","replacement","findReplacement","candidates","ConsoleView","classNames","index","connect","List","Patients","oldPatient","oldPatients","patientsFilter","filteredPatients","refreshPatientsFilter","filteredList","handlePatientChange","onPatientChange","renderPatientSummaryButton","handlePatientSummaryClick","onPatientClick","handleAddNewPatient","wait","addPatient","newPatient","newPatients","PatientsFilter","App","quit","Package","importPatients","enabled","canAddNewPatient","itemHeight","items","mapper","PatientImport","_patientsCount","_records","patientsFilePath","substr","InputFile","Progress","Flex","ImportPatient","progress","addedPatientsCount","rejectedPatientsCount","handleFilesClick","files","PatientImportService","create","importer","patientsCount","patientIndex","patientBio","getPatientBio","sleep","isWorking","accept","height","Stack","handlePatientClick","handleEndOfConsultationEdition","onEndOfConsultationEdition","Splash","fullscreen","scrollable","AppView","synchro","SLEEP_BETWEEN_RETRIES","getStatus","status","uploadMissingPatients","updateConsultations","patientsToUpload","remoteConsultations","exec","cmd","result","lines","line","patientKey","serviceName","params","WebService","RX_LINE","levels","lineNumber","computeLevel","pop","m","parseLine","parseLazy","flattenFormsFields","list","recursiveFlattenFormsFields","child","captionA","captionB","parseExams","examsDef","raw","Parser","examsSection","subSectionName","examsSubSection","parseFormFields","fringe","shift","toIntl","parsePatient","stringifiedPatientDef","parseVaccins","stringifiedVaccins","def","structures","find","parsedStructure","sources","Boolean","location","hostname","Font","loadJosefin","addEventListener","evt","preventDefault","Window","toggleFullscreen","initialize","StructureService","ReactDOM","render","StrictMode","SynchroService","Theme","register","colorW","colorB","colorE","color0","color1","color2","color3","colorP","colorPL","colorPD","colorS","colorSD","colorSL","apply","start","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"2HAAAA,EAAOC,QAAUC,QAAQ,W,oBCAzBF,EAAOC,QAAU,IAA0B,0C,yjGCA3CD,EAAOC,QAAUC,QAAQ,W,kBCAzBF,EAAOC,QAAUC,QAAQ,W,y0BCAV,GACXC,oBAiBJ,WACI,OAAO,IAAIC,MAXa,gBANxBC,aA0BJ,SAAsBC,GAElB,OAAOC,KAAKC,MADO,KACDF,EAAKG,YA3BvBC,WAqCJ,SAAoBJ,GAChB,OAAOK,EAAcC,OAAON,IArC5BO,cAMJ,SAAuBP,GACnB,GAAIA,aAAgBF,KAChB,OAAOE,EAAKG,WAJQ,cAMxB,OAAO,GATPK,aAkBJ,SAAsBC,GAClB,OAAO,IAAIX,KAAe,IAAVW,KASpB,IAAMJ,EAAgB,IAAIK,KAAKC,eAAe,CAAC,SAAU,CACrDC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,YC9BT,IAAMC,EAA2B,CAC7BC,eAAgB,GAChBC,KAAM,WACNC,QAAS,CACLC,GAAI,GACJC,SAAU,GACVC,UAAW,GACXC,WAAY,GACZC,OAAQ,IACRC,KAAM,EACNC,QAAS,GACTC,MAAOC,EAAS/B,uBAEpBgC,SAAU,GACVC,KAAM,IAmCJC,EAAQC,aAEd,WAGc,IAFVC,EAES,uDAFsBjB,EAC/BkB,EACS,uCACT,OAAQA,EAAOC,MACX,IAAK,UACD,OAAO,2BACAF,GADP,IAEIH,KAAM,CAACI,EAAOE,KAAR,mBAAgBH,EAAMH,OAAMO,OAAO,EAAG,QAEpD,IAAK,sBACD,OAAO,2BAAKJ,GAAZ,IAAmBhB,eAAgBiB,EAAOjB,iBAC9C,IAAK,WACD,OAAO,2BAAKgB,GAAZ,IAAmBf,KAAMgB,EAAOhB,OACpC,IAAK,cACD,OAAO,2BAAKe,GAAZ,IAAmBd,QAASe,EAAOf,UACvC,IAAK,eACD,OAAO,2BAAKc,GAAZ,IAAmBJ,SAAUK,EAAOL,WACxC,QACI,OAAOI,MAIJ,OACXF,QACAO,aAFW,WAQPC,EAAS,CAAEJ,KAAM,cAAehB,QALC,CAC7BC,GAAI,GAAIE,UAAW,GAAIC,WAAY,GAAIF,SAAU,GACjDM,MAAO,IAAI7B,KACX4B,QAAS,GAAIF,OAAQ,GAAIC,KAAM,MAIvCe,OAVW,SAUJC,GACHF,EAAS,CAAEJ,KAAM,UAAWC,IAAKK,KAErCC,kBAbW,SAaOC,GACdJ,EAAS,CAAEJ,KAAM,sBAAuBlB,eAAgB0B,KAE5DC,QAhBW,SAgBH1B,GACJqB,EAAS,CAAEJ,KAAM,WAAYjB,UAEjC2B,WAnBW,SAmBA1B,GACPoB,EAAS,CAAEJ,KAAM,cAAehB,aAEpC2B,YAtBW,SAsBCjB,GACRU,EAAS,CAAEJ,KAAM,eAAgBN,eAIzC,SAASU,EAASQ,GACdC,QAAQC,MAAM,WAAYF,GAC1BhB,EAAMQ,SAASQ,G,iCC5GJ,G,OAAA,WAEP,IAAMG,EAASC,SAASC,eAAe,iBACvC,GAAKF,EAAL,CACAA,EAAOG,UAAUC,IAAI,UAErBC,OAAOC,YACH,kBAAML,SAASM,KAAKC,YAAYR,KAFZ,QCL1BS,EAAIC,IAAIlD,KAAKmD,KAAKjE,EAAQ,MAEjB,GACX,iBAAmB,OAAO+D,EAAE,gBAC5B,WAAa,OAAOA,EAAE,SACtB,eAAiB,OAAOA,EAAE,aAC1B,aAAe,OAAOA,EAAE,WACxB,kBAAoB,OAAOA,EAAE,kBAC7B,YAAc,OAAOA,EAAE,UACvB,WAAa,OAAOA,EAAE,SACtB,2BAA6B,OAAOA,EAAE,2BACtC,uBAAyB,OAAOA,EAAE,sBAClC,mBAAqB,OAAOA,EAAE,iBAC9B,oBAAsB,OAAOA,EAAE,kBAC/B,yBAA2B,OAAOA,EAAE,wBACpC,cAAgB,OAAOA,EAAE,YACzB,cAAgB,OAAOA,EAAE,aACzB,cAAgB,OAAOA,EAAE,aACzB,oBAAsB,OAAOA,EAAE,mBAC/B,kBAAoB,OAAOA,EAAE,iBAC7B,mBAAqB,OAAOA,EAAE,kBAC9B,kBAAoB,OAAOA,EAAE,gBAC7B,aAAe,OAAOA,EAAE,WACxB,gBAAkB,OAAOA,EAAE,cAC3B,aAAe,OAAOA,EAAE,WACxBG,YAvBW,SAuBC3B,GACR,OAAQA,EAAK4B,OAAOC,eAChB,IAAK,IAAK,OAAOL,EAAE,eACnB,IAAK,IAAK,OAAOA,EAAE,iBACnB,QAAS,OAAOA,EAAE,sBAG1B,iBAAmB,OAAOA,EAAE,eAC5B,qBAAuB,OAAOA,EAAE,oBAChC,eAAiB,OAAOA,EAAE,aAC1B,cAAgB,OAAOA,EAAE,YACzB,aAAe,OAAOA,EAAE,WACxB,sBAAwB,OAAOA,EAAE,qBACjC,SAAW,OAAOA,EAAE,OACpB,eAAiB,OAAOA,EAAE,aAC1B,oBAAsB,OAAOA,EAAE,mBAC/B,oBAAsB,OAAOA,EAAE,kBAC/B,iBAAmB,OAAOA,EAAE,eAC5B,WAAa,OAAOA,EAAE,SACtB,aAAe,OAAOA,EAAE,WACxB,iBAAmB,OAAOA,EAAE,gBAC5B,gBAAkB,OAAOA,EAAE,eAC3B,cAAgB,OAAOA,EAAE,YACzB,8BAAgC,OAAOA,EAAE,+B,OClDvCM,EAAOrE,EAAQ,IACfsE,EAAKtE,EAAQ,IACbuE,EAAQC,SAAS,OAAQ,GAEhB,SAASC,EAAOC,EAAWC,EAAWC,EAASC,GACtC,oBAATF,GACPC,EAAID,EACJA,EAAO,IAEDA,GAAwB,kBAATA,IACrBA,EAAO,CAAEG,KAAMH,IAGnB,IAAIG,EAAOH,EAAKG,KACZC,EAAMJ,EAAKL,IAAMA,OAERU,IAATF,IACAA,EAAOP,GAAUU,QAAQC,SAExBL,IAAMA,EAAO,MAElB,IAAIM,EAAKP,GAAK,aACdF,EAAIL,EAAKe,QAAQV,GAEjBK,EAAIM,MAAMX,EAAGI,GAAM,SAASQ,GACxB,IAAKA,EAED,OAAOH,EAAG,KADVN,EAAOA,GAAQH,GAGnB,OAAQY,EAAGC,MACP,IAAK,SACDd,EAAOJ,EAAKmB,QAAQd,GAAIC,GAAM,SAASW,EAAST,GACxCS,EAAIH,EAAGG,EAAIT,GACVJ,EAAOC,EAAGC,EAAMQ,EAAIN,MAE7B,MAKJ,QACIE,EAAIU,KAAKf,GAAG,SAASgB,EAAUD,GAGvBC,IAAQD,EAAKE,cAAeR,EAAGG,EAAIT,GAClCM,EAAG,KAAMN,UAOlCJ,EAAOmB,KAAO,SAASA,EAAKlB,EAAQC,EAAWE,GACtCF,GAAwB,kBAATA,IAChBA,EAAO,CAAEG,KAAMH,IAGnB,IAAIG,EAAOH,EAAKG,KACZC,EAAMJ,EAAKL,IAAMA,OAERU,IAATF,IACAA,EAAOP,GAAUU,QAAQC,SAExBL,IAAMA,EAAO,MAElBH,EAAIL,EAAKe,QAAQV,GAEjB,IACIK,EAAIc,UAAUnB,EAAGI,GACjBD,EAAOA,GAAQH,EAEnB,MAAOoB,GACH,OAAQA,EAAKP,MACT,IAAK,SACDV,EAAOe,EAAKvB,EAAKmB,QAAQd,GAAIC,EAAME,GACnCe,EAAKlB,EAAGC,EAAME,GACd,MAKJ,QACI,IAAIY,EACJ,IACIA,EAAOV,EAAIgB,SAASrB,GAExB,MAAOsB,GACH,MAAMF,EAEV,IAAKL,EAAKE,cAAe,MAAMG,GAK3C,OAAOjB,GC5FX,IAAMoB,EAAKtC,OAAO3D,QAAQ,MACpBkG,EAAOvC,OAAO3D,QAAQ,QAEb,GAAEmG,aAkDjB,SAAsBC,GAClB,OAAO,IAAIC,QAAJ,uCAAY,WAAOjB,EAASkB,GAAhB,eAAAC,EAAA,6DACTC,EAAWN,EAAKd,QAAQqB,EAAML,GADrB,SAETM,EAAgBF,GAFP,2CAAZ,0DAnDoBG,OAU/B,SAAgBC,GACZ,IAAMJ,EAAWN,EAAKd,QAAQqB,EAAMG,GACpC,OAAOX,EAAGY,WAAWL,IAZcM,SAkBvC,SAAkBF,GACd,OAAO,IAAIP,SAAQ,SAACjB,EAASkB,GACzB,IAAME,EAAWN,EAAKd,QAAQqB,EAAMG,GACpCX,EAAGc,SAASP,EAAU,SAAS,SAACQ,EAAUC,GAClCD,EACAV,EAAOU,GAEP5B,EAAQ6B,UAzByBC,UAmCjD,SAAmBN,EAAkBO,GACjC,OAAO,IAAId,SAAQ,SAACjB,EAASkB,GACzB,IAAME,EAAWN,EAAKd,QAAQqB,EAAMG,GAEpCQ,EADgBlB,EAAKV,QAAQgB,IACb,SAACQ,GACTA,EAAKV,EAAOU,GACXf,EAAGoB,UAAUb,EAAUW,EAAS,SAAS,SAACH,EAAUC,GACjDD,EAAKV,EAAOU,GACX5B,EAAQ6B,cAzCvBR,EAAOP,EAAKd,QAAQH,QAAQqC,MAAO,QAwDzC,SAASZ,EAAgBrC,GACrB,OAAO,IAAIgC,SAAQ,SAACjB,EAASkB,GACzBL,EAAGsB,QACClD,EAAM,CACFmD,eAAe,GAFvB,uCAII,WAAOR,EAAUS,GAAjB,qBAAAlB,EAAA,0DACQS,EADR,yCAEeV,EAAOU,IAFtB,qBAIwBS,GAJxB,4DAIeC,EAJf,QAKcd,EAAWV,EAAKd,QAAQf,EAAMqD,EAAMC,OACtCD,EAAME,SANlB,2CAQsBC,EAAWjB,GARjC,iEAWgBN,EAAO,EAAD,IAXtB,mDAgBYI,EAAgBE,GAhB5B,+IAmBIX,EAAG6B,MAAMzD,GAAM,SAAC2C,GACRA,GAAKV,EAAOU,MAEpB5B,IAtBJ,uEAJJ,4DAiCR,SAASyC,EAAWxD,GAChB,OAAO,IAAIgC,SAAQ,SAACjB,EAASkB,GACzBL,EAAG8B,OAAO1D,GAAM,SAAC2C,GACTA,EAAKV,EAAOU,GACX5B,UClGjB,IAUM4C,EAAkB,CACpBC,aAAc,wBACdC,WAAY,aACZC,eAAgB,EAChBC,YAAa,GAwEF,M,WAnEX,aAAe,IAAD,gCADGnB,UACH,OA8DdoB,KAAOrE,IAAIsE,MAAMC,WAAU,WACvBC,EAAWtB,UAAU,gBAAiBuB,KAAKC,UAAU,EAAKzB,SAlFpC,KAoBtB0B,KAAK1B,KAAOe,E,oMAKcQ,EAAW1B,SAAS,iB,UAApCK,E,OAG2B,kBAF3BF,EAAOwB,KAAKG,MAAMzB,IAERc,a,sBACNY,MAAM,4C,UACe,kBAApB5B,EAAKiB,W,sBACNW,MAAM,0C,UACmB,kBAAxB5B,EAAKkB,e,uBACNU,MAAM,8C,WACgB,kBAArB5B,EAAKmB,Y,uBACNS,MAAM,2C,eAEhBb,EAAKC,aAAehB,EAAKgB,aACzBD,EAAKE,WAAajB,EAAKiB,WACvBF,EAAKG,eAAiBlB,EAAKkB,eAC3BH,EAAKI,YAAcnB,EAAKmB,YACxBJ,EAAKc,UAAY7B,EAAK6B,U,mBAEf,G,yCAEP1F,QAAQ2F,MAAM,iCACd3F,QAAQ2F,MAAR,M,mBACO,G,mJAKX,MAA0C,QAAnC9D,mHAAY+D,mBACb,mCACAL,KAAK1B,KAAKgB,c,aAEHgB,GACbN,KAAK1B,KAAKgB,aAAegB,EACzBN,KAAKN,S,iCAEkB,OAAOM,KAAK1B,KAAKiB,Y,aAC7Be,GACXN,KAAK1B,KAAKiB,WAAae,EACvBN,KAAKN,S,qCAEsB,OAAOM,KAAK1B,KAAKkB,gB,aAC7Bc,GACfN,KAAK1B,KAAKkB,eAAiBc,EAC3BN,KAAKN,S,kCAEmB,OAAOM,KAAK1B,KAAKmB,a,aAC7Ba,GACZN,KAAK1B,KAAKmB,YAAca,EACxBN,KAAKN,S,gCAEiC,OAAOM,KAAK1B,KAAK6B,W,aAC7CG,GACVN,KAAK1B,KAAK6B,UAAYG,EACtBN,KAAKN,W,MCnEQa,G,mNACjB7G,MAAQ,G,uDAGJ,IAAM8G,EAAO,CACT,yBADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAE/ChI,EAAYoH,KAAKW,MAAjB/H,QACR,IAAKA,EAAS,OAAO,KAErB,IADkBiI,EAASV,UACX,OAAO,KACvB,IACMW,EAAM,GADE,IAAIvJ,MACIwJ,cAAgBnI,EAAQQ,MAAM2H,cAEpD,OACI,yBACIH,UAAWJ,EAAQQ,KAAK,KACxBC,MAAOrI,EAAQC,IAEf,0BAAM+H,UAAU,YAAYhI,EAAQE,SAAS2C,eAC7C,0BAAMmF,UAAU,aAAahI,EAAQG,WAmBrD,SAAuBH,GAAoC,IAC/CI,EAAeJ,EAAfI,WACR,MAA0B,kBAAfA,IACsB,IAA7BA,EAAWwC,OAAO0F,QACkB,cAApClI,EAAWwC,OAAO2F,eArBNC,CAAcxI,IACd,0BAAMgI,UAAU,cAAchI,EAAQI,YAGtCK,EAASrB,cAAcY,EAAQQ,QAC/B,0BAAMwH,UAAU,OAAOE,EAAvB,IAA4B,oCAG5BlI,EAAQM,KAAO,GACf,0BAAM0H,UAAU,QAAQhI,EAAQM,KAAhC,IAAsC,wC,GAhCZmI,IAAMC,Y,aCbrC,aAEP,OAAOC,eCCA,GACXC,yBAuEJ,SAAkCC,GAC9B,IAAM5I,EAAK6I,IACLC,EAAMtI,EAAS7B,aAAa,IAAID,MACtC,MAAO,CACHsB,KACA+I,WAAY,GACZC,QAASF,EACTG,YAAa,GACbxD,KAAM,CACFzF,KACA,oBAAqB4I,EAAQ3I,SAC7B,qBAAsB2I,EAAQ1I,UAC9B,sBAAuB0I,EAAQzI,WAC/B,iBAAkBK,EAAS7B,aAAaiK,EAAQrI,OAChD,kBAAmBqI,EAAQxI,OAC3B,mBAAoBwI,EAAQtI,QAC5B,gBAAiBsI,EAAQvI,MAE7B6I,OAAQJ,EACRK,MAAO,GACPC,QAAS,KACTC,QAAS,KA3FbC,0BAuHJ,SAAmCvJ,EAAmBwJ,GAClD,IAD0F,EACpFC,EAAiC,GADmD,cAElEzJ,EAAQgJ,YAF0D,IAE1F,2BAA4C,CAAC,IAAD,EAAjCU,EAAiC,sBACbA,EAAUC,QADG,IACxC,2BAA6C,CAAC,IAAnCC,EAAkC,QACrCA,EAAaC,MAAQL,GACrBC,EAAcK,KAAKF,IAHa,gCAF8C,8BAe1F,OAJAH,EAAcM,MACV,SAACC,EAAmBC,GAApB,OAA0CA,EAAGJ,MAAQG,EAAGH,SAGrDJ,GArIPS,wBAQJ,SAAiClK,EAAmBF,GAA+C,IAAD,gBACtEE,EAAQgJ,YAD8D,IAC9F,2BAA4C,CAAC,IAAD,EAAjCU,EAAiC,sBACbA,EAAUC,QADG,IACxC,2BAA6C,CAAC,IAAnCC,EAAkC,QACzC,GAAIA,EAAapI,OAAS1B,EACtB,OAAO8J,GAHyB,gCADkD,8BAS9F,OADA/H,QAAQsI,KAAR,4CAAkDnK,EAAQC,GAA1D,oBAAwEH,EAAxE,MACO,MAhBPsK,WAoBJ,SAAoBpK,GAEhB,OADAA,EAAQ0F,KAAKzF,GAAKD,EAAQC,GACnBoK,EAAqBrK,EAAQ0F,OArBpC2E,uBACAC,mBA0GJ,SAA4BtK,EAAmBF,GAAmC,IAAD,gBACrDE,EAAQgJ,YAD6C,IAC7E,2BAA4C,CAAC,IAAlCU,EAAiC,QACxCA,EAAUC,OAASD,EAAUC,OAAOY,QAChC,SAAAX,GAAY,OAAIA,EAAapI,OAAS1B,MAH+B,8BAM7E,OAAOE,GA/GPwK,WAyBJ,SAAoBxK,EAAmByK,GACnCzK,EAAQ0F,KAAK,kBAAoBjF,EAAS7B,aAAa6L,EAAejK,OACtER,EAAQ0F,KAAK,oBAAsB+E,EAAelK,QAClDP,EAAQ0F,KAAK,sBAAwB+E,EAAetK,UACpDH,EAAQ0F,KAAK,uBAAyB+E,EAAerK,WACrDJ,EAAQ0F,KAAK,qBAAuB+E,EAAevK,SACnDF,EAAQ0F,KAAK,mBAAqB+E,EAAepK,OACjDL,EAAQ0F,KAAK,iBAAmB+E,EAAenK,MA/B/CoK,mBAyFJ,SAA4B1K,EAAmB2K,GAA2C,IAAD,gBAC7D3K,EAAQgJ,YADqD,IACrF,2BAA4C,CAAC,IAAD,EAAjCU,EAAiC,sBACbA,EAAUC,QADG,IACxC,2BAA6C,CAAC,IAAnCC,EAAkC,QACzC,GAAIA,EAAapI,OAASmJ,EAAgBnJ,KAK1C,OAJAoI,EAAagB,QAAU,EAAI9L,KAAK+L,IAC5BjB,EAAagB,QAASD,EAAgBC,SAC1ChB,EAAaC,MAAQc,EAAgBd,MACrCD,EAAalE,KAAb,eAAyBiF,EAAgBjF,MAClC1F,GAP6B,gCADyC,8BAYrF,OAAOA,IAnEX,SAASqK,EAAqBS,GA2B1B,MA1BiC,CAC7B7K,GAAI6K,EAAO7K,GACXO,MAAOC,EAASpB,aACZoD,IAAIoF,UAAUkD,QACVD,EAAO,oBAGfvK,QAAQ,GAAD,OAAKuK,EAAO,qBACnB3K,UAAWsC,IAAIuI,UAAUC,cAAd,UACJH,EAAO,wBAEdzK,OAAQoC,IAAIoF,UAAUqD,KAClBJ,EAAO,mBACP,CAAC,KAAM,KAAM,MACb,MAEJ5K,SAAUuC,IAAIuI,UAAUG,UAAd,UACHL,EAAO,uBAEd1K,WAAYqC,IAAIuI,UAAUC,cAAd,UACLH,EAAO,yBAEdxK,KAAMmC,IAAIoF,UAAUkD,QAChBD,EAAO,mB,YCxDJ,GACXM,c,6CACAC,e,2CAAgBC,W,4CAAYC,iBA+GhC,SAA0BtL,GAAiC,IAArB6C,EAAoB,uDAAb,IACzC,MAAM,GAAN,OAAUA,EAAV,iBAAuB7C,EAAvB,MAhH8CmK,WAoIlD,SAAoBpK,GAChB,OAAOwL,EAAepB,WAAWpK,IApIjCoF,OAmDJ,SAAgBnF,GACZ,IAAMwL,EAAe,UA5CF,IA4CE,YAAwBxL,EAAxB,iBACrB,OAAOgH,EAAW7B,OAAOqG,IArDjB/J,W,6CASNgK,EAAiB,UADA,IACA,kBAEjBC,EAAW,IAAIC,I,4CAKrB,gCAAA5G,EAAA,+EAEmC6G,KAFnC,cAEcC,EAFd,OAGcC,EACFC,OAAOC,KAAKH,EAAaI,SACpBC,KAAI,SAAAC,GAAG,OAAIN,EAAaI,QAAQE,MAChCD,KAAI,SAACrB,GASF,MAAO,CARQA,EAAP7K,GACG,UACP6K,EAAO,qBADA,aAGPA,EAAO,sBAHA,aAKPA,EAAO,wBAEQA,MAEzBuB,EAAaN,EAAWhC,MAAK,SAAC/E,EAAUsH,GAAc,IACjDC,EADgD,YAC3CvH,EAD2C,MAEhDwH,EAFgD,YAE3CF,EAF2C,MAGvD,OAAIC,EAAIC,GAAW,EACfD,EAAIC,EAAU,EACX,KAtBnB,kBAwBeH,EACFF,KAAI,SAAAM,GAAI,OAAIA,EAAK,MACjBN,IAAIX,EAAenB,uBA1BhC,uCA6BQxI,QAAQ2F,MAAR,0BAAiCkE,EAAjC,YA7BR,kBA8Be,IA9Bf,0D,kEAwCA,WAA0BzL,GAA1B,iCAAA+E,EAAA,yDAAsClC,EAAtC,+BAA6C,IAA7C,SAEQjB,QAAQ6K,KAAK,mBAAoBzM,IAC7B0L,EAASgB,IAAI1M,GAHzB,uBAIkB2M,EAAgBjB,EAASkB,IAAI5M,GACnC4B,QAAQZ,IAAR,yBAA8BhB,EAA9B,cAA8C2M,GAL1D,kBAMmBA,GANnB,uBAQqC3F,EAAW1B,SAAX,UACtBzC,EADsB,YACd7C,EADc,kBARrC,cAQc6M,EARd,OAWQC,GADM/M,EAAUkH,KAAKG,MAAMyF,IAE3BnB,EAASqB,IAAI/M,EAAID,GACjB6B,QAAQZ,IAAI,mBAAoBjB,GAbxC,kBAceA,GAdf,wCAiBQ6B,QAAQ2F,MAAR,kCAAyCvH,EAAzC,WAjBR,gE,kEA2BA,WAA0BD,GAA1B,mBAAAgF,EAAA,sEAEc8H,EAAiB5F,KAAKC,UAAU4F,GAAgB/M,IACtDiN,GAAqBjN,GAH7B,SAIciH,EAAWtB,UAAX,YAA0B3F,EAAQC,GAAlC,iBAAqD6M,GAJnE,uBAKmCjB,KALnC,cAKcC,EALd,OAMQoB,GAAyBlN,EAAS8L,GAN1C,UAOcqB,GAAiBrB,GAP/B,eASc7L,EAAKD,EAAQC,GACf0L,EAASgB,IAAI1M,IACb0L,EAASyB,OAAOnN,GAEpB0L,EAASqB,IAAI/M,EAAID,GAbzB,kBAeeA,GAff,wCAkBQ6B,QAAQ2F,MAAR,kCAAyCxH,EAAQC,GAAjD,WAlBR,gE,oEA+BA,WAA6BoN,GAA7B,eAAArI,EAAA,+EAEmC6G,KAFnC,cAEcC,EAFd,OAGQwB,GAA8BD,EAAWvB,GAHjD,SAIcqB,GAAiBrB,GAJ/B,uBAKc7E,EAAWrC,aAAX,YAA6ByI,IAL3C,OAMY1B,EAASgB,IAAIU,IACb1B,EAASyB,OAAOC,GAP5B,wDAWQxL,QAAQ2F,MAAR,oCAA2C6F,EAA3C,WAXR,gE,sBAyBA,SAASJ,GAAqBjN,GACA,kBAAfA,EAAQC,IAAmBD,EAAQC,GAAGqI,OAAS,IAC1DtI,EAAQC,GAAK6I,K,SAIF+C,K,8EAAf,8BAAA7G,EAAA,+EAE0CiC,EAAW1B,SAASmG,GAF9D,cAEc6B,EAFd,yBAGerG,KAAKG,MAAMkG,IAH1B,uCAKcC,EAAsB,CACxBC,MAAO,EACPvB,QAAS,IAPrB,kBASesB,GATf,0D,+BAceL,G,iFAAf,WAAgCrB,GAAhC,SAAA9G,EAAA,sEACUiC,EAAWtB,UAAU+F,EAAmBxE,KAAKC,UAAU2E,IADjE,4C,sBAKA,SAASoB,GAAyBlN,EAAmB8L,GACjDA,EAAaI,QAAQlM,EAAQC,IAA7B,2BACOD,EAAQ0F,MADf,IAEIzF,GAAID,EAAQC,KAKpB,SAASqN,GAA8BD,EAAmBvB,UAC/CA,EAAaI,QAAQmB,GAIhC,SAASN,GAAgB/M,GAA8B,IAAD,gBAC1BA,EAAQgJ,YADkB,IAClD,2BAA4C,CAAC,IAAD,EAAjCU,EAAiC,sBACbA,EAAUC,QADG,IACxC,2BAA6C,CAAC,IAAnCC,EAAkC,QAER,kBAAtBA,EAAapI,MACY,IAA7BoI,EAAapI,KAAK8G,SAErBsB,EAAapI,KAAOsH,KAEY,kBAAzBc,EAAagB,UACpBhB,EAAagB,QAAU,IATS,gCADM,8BAclD,OAAO5K,EC7MX,IAAMT,GAAOkD,IAAIlD,KAEF,IACXmO,kCAaJ,WACI,IAAMnG,EAAYoG,KACZC,EAA6C,GAInD,OAHArG,EAAUsG,cAAcC,SAAQ,SAACC,GAC7BH,EAAeG,EAAa9N,KAAM,KAE/B2N,GAlBPI,0CAqBJ,WACI,IAAMzG,EAAYoG,KACZM,EAAoD,GAI1D,OAHA1G,EAAUsG,cAAcC,SAAQ,SAACC,GAC7BE,EAAuBF,EAAa9N,IAAMV,GAAK2O,OAAOH,EAAaI,YAEhEF,GA1BPN,uBACAS,gBA+BJ,SAAyBC,GACrB,IAAM9G,EAAYoG,KAClB,GAA2B,MAAvBU,EAASC,OAAO,GAAY,OAAOD,EACvC,IAAM5B,EACFlF,EAAUgH,WAAWF,GACzB,OAAK5B,EACElN,GAAK2O,OAAOzB,EAAK0B,SADNE,GAnClBG,gBAuCJ,SAAyBC,EAA6BC,GAClD,IAAKD,EAED,OAAOC,EAEX,IAEM1N,EAFY2M,KACMgB,MACLF,GACnB,IAAKzN,EAAM,OAAO0N,EAElB,cAAsB1C,OAAO4C,OAAO5N,EAAK6N,UAAzC,eAAoD,CAA/C,IAAMC,EAAO,KAEd,GADgBA,EAAQX,SAEpBW,EAAQ7O,KAAOyO,EACf,OAAOI,EAAQX,SAAWO,EAGlC,OAAOA,IArDX,SAASf,KACL,IAAMpG,EAAYU,EAASV,UAC3B,IAAKA,EAAW,MAAMD,MAAM,2CAC5B,OAAOC,E,WCRLwH,GAAQtM,IAAIuM,KAAKD,MAaFE,G,4MACjBnO,MAAQ,G,EAEAoO,aAAe,SAACC,GACpB,IAAM5H,EAAYU,EAASV,UAC3B,IAAKA,EAAW,OAAO,KACvB,EAAKQ,MAAMqH,SAASC,GAAW9H,EAAW,EAAKQ,MAAM/G,KAAMmO,K,uDAI3D,IAAMvH,EAAO,CACT,mBADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAEjDT,EAAYU,EAASV,UAC3B,IAAKA,EAAW,OAAO,KAEvB,IAAMvG,EAAOoG,KAAKW,MAAM/G,KAClBmO,EAAQ/H,KAAKW,MAAMoH,MACnBG,EAed,SAA+B/H,EAAuBgI,GAClD,IACMvO,EADQuG,EAAUoH,MACLY,GACnB,OAAKvO,EACYgL,OAAO4C,OAAO5N,EAAK6N,UAE/B1C,KAAI,SAAAqD,GAAC,OAAIA,EAAErB,WACX5D,QAAO,SAAAiF,GAAC,MAAiB,kBAANA,KAJN,GAlBMC,CAAsBlI,EAAWvG,GAErD,OADRa,QAAQZ,IAAI,mBACG,kBAAC8N,GAAD,CACH/G,UAAWJ,EAAQQ,KAAK,KACxBsH,MAAOtI,KAAKW,MAAM2H,MAClBC,KAAMvI,KAAKW,MAAM4H,KACjBC,MAAOxI,KAAKW,MAAM6H,MAClBT,MAAOU,GAAiBrB,gBAAgBxN,EAAMmO,GAC9CG,YAAaA,EACbF,SAAUhI,KAAK8H,mB,GA5BOzG,IAAMC,WA6CxC,SAAS2G,GACL9H,EACAgI,EACAJ,GAEA,IACMnO,EADQuG,EAAUoH,MACLY,GACnB,IAAKvO,EAAM,OAAOmO,EAElB,IADA,IAAMW,EAAkBX,EAAMvM,OAAO2F,cACrC,MAAsByD,OAAO4C,OAAO5N,EAAK6N,UAAzC,eAAoD,CAA/C,IAAMC,EAAO,KACRX,EAAUW,EAAQX,QACxB,GAAKA,GACDA,EAAQ5F,gBAAkBuH,EAC1B,OAAOhB,EAAQ7O,GAGvB,OAAOkP,E,WCvELY,GAAStN,IAAIuM,KAAKe,OAClBC,GAAWvN,IAAIuM,KAAKgB,SACpBC,GAAYxN,IAAIuM,KAAKiB,UAYNC,G,4MACjBpP,MAAQ,G,EAmHAqP,uBAAyB,SAACC,EAAmBxG,GACjD,GAA2C,qBAAhCA,EAAalE,KAAK0K,EAAMnQ,IAE/B,OAAO,KAEX,IAAMkP,EAAQ,EAAKkB,cAAcD,EAAOxG,GACxC,OAAO,yBAAK5B,UAAU,aAAaoE,IAAG,aAAQxC,EAAaC,QACvD,yBAAK7B,UAAU,QACXvH,EAASxB,WACLwB,EAASpB,aAAauK,EAAaC,SAG3C,yBAAK7B,UAAU,SAASmH,K,EAIxBmB,YAAc,SAACF,EAAmBjB,GACtC,IAAMoB,GAAkBpB,GAAS,IAAIvM,OAC7BgH,EAAiB,EAAK7B,MAAtB6B,oBACDA,EAAalE,KAAK0K,EAAMnQ,IAC3BsQ,EAAejI,OAAS,IACxBsB,EAAalE,KAAK0K,EAAMnQ,IAAMsQ,EAC9B1O,QAAQ6K,KAAK,gBAAiB9C,K,EAI9B4G,mBAAqB,SAACJ,EAAmBjB,GAAoB,IACzDvF,EAAiB,EAAK7B,MAAtB6B,oBACDA,EAAalE,KAAK0K,EAAMnQ,IAC3BkP,IACAvF,EAAalE,KAAK0K,EAAMnQ,IAAM,S,4DA/IhBmQ,GAA+E,IAA5DK,EAA2D,uDAAd,KAC5E7G,EAAe6G,GAAwBrJ,KAAKW,MAAM6B,aACxD,IAAKA,EAAc,MAAO,GAFsE,IAGxFlE,EAASkE,EAATlE,KACR,OAAKA,GACAA,EAAK0K,EAAMnQ,IACT4P,GAAiBrB,gBAAgB4B,EAAMpP,KAAM0E,EAAK0K,EAAMnQ,KAF7C,K,6CAKSmQ,GAC3B,IAAMjB,EAAQ/H,KAAKiJ,cAAcD,GACjC,MAIM,WAJC3N,IAAIoF,UAAUqD,KACjBiE,EACA,CAAC,OAAQ,SACT,Y,0CAOoBiB,GACxB,IAAMjB,EAAQ/H,KAAKiJ,cAAcD,GACjC,OAsKU,IAtKE3N,IAAIoF,UAAUkD,QAAQoE,K,mCAGjBuB,GAAsB,IAAD,OACtC,OAAO1E,OAAOC,KAAKyE,GAAQvE,KACvB,SAAA/F,GACI,IAAMgK,EAAQM,EAAOtK,GACrB,OAAKgK,EACE,EAAKO,YAAYP,GADL,U,kCAMXA,GAAoB,IAAD,OACnC,GAkIR,SAAqBA,GACjB,QAAKA,EAAMvB,UACG7C,OAAOC,KAAKmE,EAAMvB,UACnBvG,OAAS,EArIdsI,CAAYR,GACZ,OAAO,kBAACL,GAAD,CACH3D,IAAKgE,EAAMnQ,GACXyP,MAAOU,EAAMjC,QACbgB,OAAO,EACPnH,UAAU,kBAETZ,KAAKyJ,aAAaT,EAAMvB,WAIjC,GAAiB,uBAAbuB,EAAMnQ,GAEN,OADA4B,QAAQsI,KAAK,mDAAoDiG,GAC1D,KAdwB,IAiB3BxG,EAAiBxC,KAAKW,MAAtB6B,aACFkH,EAAoBtF,EAAejC,0BACrCnC,KAAKW,MAAM/H,QACX4J,EAAaC,OAGjB,OAmHR,SAAgBuG,GAA6B,IACjCW,EAASX,EAATW,KACR,IAAKC,MAAMC,QAAQF,GAAO,OAAO,EAFO,oBAGtBA,GAHsB,IAGxC,2BAAwB,CACpB,GAAiC,SADb,QACZnO,OAAOC,cAA0B,OAAO,GAJZ,8BAMxC,OAAO,EAzHCqO,CAAOd,GACA,yBACHhE,IAAKgE,EAAMnQ,GACX+H,UAAU,QACVK,MAAO+H,EAAMnQ,IAEb,kBAAC+P,GAAD,CACIL,MAAM,EACND,MAAOU,EAAMjC,QACbgB,MAAO/H,KAAK+J,uBAAuBf,GACnChB,SAAU,SAACD,GAAD,OAAoB,EAAKqB,mBAAmBJ,EAAOjB,MAEhE2B,EAAkB3E,IAAI/E,KAAK+I,uBAAuBiB,KAAKhK,KAAMgJ,KAIlEA,EAAMW,KAAKM,QAAQ,SAAW,EACvB,yBACHjF,IAAKgE,EAAMnQ,GACX+H,UAAU,QACVK,MAAO+H,EAAMnQ,IAEb,kBAACgQ,GAAD,CACIP,MAAOU,EAAMjC,QACbgB,MAAO/H,KAAKkK,oBAAoBlB,GAChCT,MAAM,EACNP,SACI,SAACD,GAAD,OAAmB,EAAKmB,YAAYF,EAAjB,UAkGzB,KAlGyDjB,OAG1D2B,EAAkB3E,IAAI/E,KAAK+I,uBAAuBiB,KAAKhK,KAAMgJ,KAI/D,yBACHhE,IAAKgE,EAAMnQ,GACX+H,UAAU,QACVK,MAAO+H,EAAMnQ,IAEb,kBAAC,GAAD,CACIyP,MAAOU,EAAMjC,QACbgB,MAAO/H,KAAKiJ,cAAcD,GAC1BpP,KAAMoP,EAAMpP,MAAQ,GACpB4O,MAAM,QACND,MAAM,EACNP,SAAU,SAACD,GAAD,OAAmB,EAAKmB,YAAYF,EAAOjB,MAExD2B,EAAkB3E,IAAI/E,KAAK+I,uBAAuBiB,KAAKhK,KAAMgJ,O,+BA2ClE,IAAMxI,EAAO,CACT,yBADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAEjDT,EAAYU,EAASV,UAC3B,IAAKA,EAAW,OAAO,KACvB,IAAMgK,EAAOhK,EAAUiK,MAEvB,OAAQ,yBAAKxJ,UAAWJ,EAAQQ,KAAK,MAChChB,KAAKyJ,aAAaU,Q,GAjKe9I,IAAMC,W,WCb9C+I,GAAShP,IAAIuM,KAAKyC,OAClBxB,GAAYxN,IAAIuM,KAAKiB,UAcNyB,G,4MACTC,uB,IACAC,uB,IACR9Q,MAA6B,CACzBd,aAASyD,EACTmG,aAAc,M,EAGViI,Q,sBAAU,oCAAA7M,EAAA,0DACNyF,EAAmB,EAAK1C,MAAxB0C,kBACe,EAAKkH,kBAFd,uBAGV,EAAKA,kBAAoBlH,EAHf,SAIYqH,EAAexG,WAAWb,EAAexK,IAJrD,OAIJD,EAJI,OAKV,EAAK+R,SAAS,CAAE/R,YALN,OAONF,EAAmB,EAAKiI,MAAxBjI,gBACAE,EAAY,EAAKc,MAAjBd,UACOF,IAAmB,EAAK8R,oBACnC,EAAKA,kBAAoB9R,EACnB8J,EAAqCoI,GACvCxG,EAAetB,wBACXlK,EACAF,IAGR,EAAKiS,SAAS,CAAEnI,kBAjBN,4C,EAqBlBqI,kBAAoB,EAAKJ,Q,EACzBK,mBAAqB,EAAKL,Q,EAElBM,SAAW,WACf,EAAKpK,MAAMqK,OAAO,EAAKtR,MAAM8I,aAAc,EAAK9I,MAAMd,U,EAGlDqS,aAAe,WACnB,EAAKtK,MAAMqK,OAAO,O,EAGdE,iBAAmB,SAACC,GAAkB,IAClC3I,EAAiB,EAAK9I,MAAtB8I,aACJA,IACAA,EAAaC,MAAQ/K,KAAKC,MAAMwT,EAAO,O,uDAK3C,IAAM3K,EAAO,CACT,0BADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAHlD,EAK6BZ,KAAKtG,MAA/Bd,EALH,EAKGA,QAAS4J,EALZ,EAKYA,aACjB,IAAK5J,EAAS,OAAO,KACrB,IAAK4J,EAAc,OAAO,KAC1B,IAAMa,EAAiBe,EAAepB,WAAWpK,GAC3CwS,EAAmB/R,EAASpB,aAC9BuK,EAAaC,OAGjB,OAAQ,yBAAK7B,UAAWJ,EAAQQ,KAAK,MACjC,4BAAQJ,UAAU,wBACd,6BACI,kBAACyJ,GAAD,CACI/B,MAAO+C,EAAUC,GACjBC,KAAK,KACLC,MAAM,IACNC,QAASzL,KAAK+K,WAElB,kBAACV,GAAD,CACI/B,MAAO+C,EAAUK,OACjBlD,MAAM,OACN+C,KAAK,SACLE,QAASzL,KAAKiL,gBAGtB,yBAAKrK,UAAU,QACXvH,EAASxB,WAAWuT,IAExB,kBAAC,EAAD,CAAkBxS,QAASyK,KAE/B,iCACI,yBAAKzC,UAAU,qBACX,kBAAC,GAAD,CACI0H,MAAO+C,EAAUD,iBACjBrD,MAA4B,IAArBvF,EAAaC,MACpBuF,SAAUhI,KAAKkL,mBAEnB,uBAAGtK,UAAU,YACTyK,EAAUM,0BAGlB,6BACA,kBAAC,GAAD,CACI/S,QAASA,EACT4J,aAAcA,U,GA/FSnB,IAAMC,WAuGjD,SAASsJ,GAAKgB,GACV,OAAKA,EACE9L,KAAKG,MAAMH,KAAKC,UAAU6L,IADhBA,E,yBC3HfvB,I,OAAShP,IAAIuM,KAAKyC,QAClBwB,GAAYxQ,IAAIuM,KAAKiE,UASNvB,G,4MACTwB,gBAAkB,SAACxJ,GACvB,OAAO,yBAAK1B,UAAU,YAAYoE,IAAK1C,EAAUG,OAC5CH,EAAUC,OAAOwC,IAAI,EAAKgH,sB,EAI3BA,mBAAqB,SAACvJ,GAC1B,IAAMwJ,EAAM3S,EAASpB,aAAauK,EAAaC,OAC/C,OAAO,kBAACoJ,GAAD,CACHJ,QAAS,kBAAM,EAAK9K,MAAMsL,oBAAoBzJ,EAAapI,OAC3D4K,IAAKxC,EAAaC,MAClB7B,UAAU,wCAEV,yBAAKsL,IAAKC,OACV,6BACI,yBAAKvL,UAAU,SACXyK,EAAUhJ,eAEd,yBAAKzB,UAAU,QACVvH,EAASxB,WAAWmU,IAEzB,yBAAKpL,UAAU,QACXyK,EAAUe,gB,uDAMhB,IAAD,OACGxT,EAAYoH,KAAKW,MAAjB/H,QACR,IAAKA,EAAS,OAAO,KAErB,IAAM4H,EAAO,CACT,2CADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAGvD,OAAQ,yBAAKA,UAAWJ,EAAQQ,KAAK,MACjC,kBAAC,GAAD,CACIuK,KAAK,MACL/C,MAAM,OACNF,MAAO+C,EAAU9H,gBACjBkI,QAAS,kBAAM,EAAK9K,MAAM0L,4BAE9B,6BAEkC,IAA9BzT,EAAQgJ,WAAWV,QACnB,+EAGAtI,EAAQgJ,WACHe,KAAK2J,IACLvH,IAAI/E,KAAK8L,sB,GArDazK,IAAMC,WA4DjD,SAASgL,GAAe1O,EAAesH,GACnC,OAAOA,EAAEzC,MAAQ7E,EAAE6E,M,yBCtEjBnF,I,OAAKjG,EAAQ,KACbkG,GAAOlG,EAAQ,IAEfuR,GAAWvN,IAAIuM,KAAKgB,SACpByB,GAAShP,IAAIuM,KAAKyC,OAClB1B,GAAStN,IAAIuM,KAAKe,OAClBhB,GAAQtM,IAAIuM,KAAKD,MACjB4E,GAAU,IAAIlR,IAAIkR,QAAQC,qBAAqB,wCAE/CC,GAAU,CACZ,UAAW,aAAW,OAAQ,QAC9B,MAAO,OAAQ,UAAW,UAC1B,YAAa,UAAW,WAAY,eAcnBC,G,4MACjBhT,M,2BACO6S,GAAQ9G,IAAI,QAAS,CACpBkH,aAAc,GACdC,QAAS,M,IAEbC,UAAW,K,EAGPC,OAAS,SAACC,GACd,IAAMrT,EAAK,2BACJ,EAAKA,OACLqT,GAEP,EAAKpC,SAASjR,GACd6S,GAAQ3G,IAAI,QAASlM,I,EAwDjBsT,Y,sBAAc,0CAAApP,EAAA,yDACVhF,EAAY,EAAK+H,MAAjB/H,QADU,yCAEG,IAFH,UAGZqU,EAAgBC,GAAqB,EAAKxT,MAAMmT,WACtDpS,QAAQ6K,KAAK,SAAU2H,GACjBE,EAAO,IAAIC,KALC,uBAOd3S,QAAQ2F,MAAM,kCAPA,2CAUI,EAAKiN,aAAaJ,GAVtB,WAUZzO,EAVY,OAWlB/D,QAAQ6K,KAAK,WAAY9G,GAXP,UAYlB2O,EAAKG,OAAO,mBAZM,uEAYkCC,GAAS,yBAZ3C,yBAYOnH,KAZP,UAYY,eAZZ,qBAalB+G,EAAK/G,KAAK,cAAe5H,GAbP,KAclB2O,EAdkB,UAccI,GAAS,gBAdvB,gCAcbnH,KAda,UAcR,eAdQ,WAelB+G,EAfkB,UAeUI,GAAS,YAfnB,gCAebnH,KAfa,UAeR,WAfQ,WAgBlB+G,EAhBkB,UAgBUI,GAAS,YAhBnB,gCAgBbnH,KAhBa,UAgBR,WAhBQ,WAiBlB+G,EAjBkB,UAiBcI,GAAS,gBAjBvB,gCAiBbnH,KAjBa,UAiBR,eAjBQ,YAkBlB+G,EAlBkB,UAkBYI,GAAS,cAlBrB,2BAkBbnH,KAlBa,WAkBR,aAlBQ,OAmBZzE,EAAM,IAAIpK,KACV0G,EAAWV,GAAKd,QAClBiO,EAAevG,iBAAiBvL,EAAQC,IAD3B,eAEL8I,EAAIZ,cAFC,YAEgBY,EAAI6L,WAAa,EAFjC,YAEsC7L,EAAI8L,UAF1C,SAIjBhT,QAAQ6K,KAAK,YAAarH,GAC1B,IACUyP,EAASP,EAAKQ,mBAChB,CACI/T,KAAM,aACNgU,aAAa,EACbC,YAAa,UACbC,mBAAoB,CAAEC,MAAO,GAC7BC,SAAU,4CAEd,SAACC,GACGxT,QAAQZ,IAAI,IAAKoU,EAASC,YAAaD,EAASE,YAGxD1T,QAAQ6K,KAAK,UAAWoI,GACxBA,EAAOU,KAAK9Q,GAAG+Q,kBAAkBpQ,IAC5BqQ,GAAG,SAAS,SAACjQ,GACV5D,QAAQ2F,MAAM,SAAU/B,MAE3BiQ,GAAG,UAAU,WACV7T,QAAQZ,IAAI,sCACZwB,IAAIkT,QAAQC,OAAOlJ,KAAK,6BACpB,sHACA,+BAAO,8BAAOrH,MAElBwQ,GAAGC,MAAMC,SAAS1Q,MAE5B,MAAO2Q,GACLnU,QAAQ2F,MAAM,iCACd3F,QAAQ2F,MAAMwO,GArDA,4C,+DArDGC,EAAiBC,GAAoB,IAEpDC,EADgB/O,KAAKtG,MAAnBmT,UAC+B1J,QAAO,SAAC6B,GAAD,OAAiBA,IAAQ6J,KACnEC,EACA9O,KAAK2K,SAAS,CAAEkC,UAAU,GAAD,mBAAMkC,GAAN,CAA4BF,MAErD7O,KAAK2K,SAAS,CAAEkC,UAAU,YAAKkC,O,qCAIhB/M,GAAwD,IAAD,OAC1E,OAAO4C,OAAOC,KAAK7C,GAAO+C,KACtB,SAACiK,GAAD,OAAwB,EAAKC,cACzBD,EACAhN,EAAMgN,S,oCAKIA,EAAoBE,GAAuC,IAAD,OACtEC,EAAqBvK,OAAOC,KAAKqK,GAASnK,KAC5C,SAACqK,GACG,IAAMC,EAAaH,EAAQE,GAC3B,OAAO,kBAAC,GAAD,CACHpK,IAAG,UAAKgK,EAAL,aAAoBI,GACvB9G,MAAO8G,EACPrH,OAAO,GAEHsH,EAAWtK,KAAI,SAACuD,GAAD,OAAmB,EAAKgH,eACnCN,EACAI,EACA9G,UAKpB,MAAM,CACF,wBAAItD,IAAI,cAAcgK,IAD1B,mBAEOG,M,qCAIYH,EAAoBI,EAAuB9G,GAAgB,IAAD,OACvEtD,EAAG,UAAMgK,EAAN,aAAqBI,EAArB,aAAuC9G,GAC1CiH,GAAoD,IAAvCvP,KAAKtG,MAAMmT,UAAU5C,QAAQjF,GAChD,OAAO,kBAAC,GAAD,CACHsD,MAAOA,EACPC,MAAM,EACNR,MAAOwH,EACPvH,SAAU,SAACD,GAAD,OAAoB,EAAKyH,iBAAiBxK,EAAK+C,Q,4EA6D9CkF,G,oHACPrU,EAAYoH,KAAKW,MAAjB/H,Q,yCACa,I,cACf6I,EAAU2C,EAAepB,WAAWpK,G,EACRoH,KAAKtG,MAA/BkT,E,EAAAA,QAASD,E,EAAAA,a,SAEOY,GAAS,oB,OAA7BkC,E,qBACexC,G,IAAnB,2BAA0B,CAAftU,EAAe,sBACQA,EADR,GACf+W,EADe,KACJC,EADI,KAElBC,EAAQ,IAAIrY,KAChBkY,GAAOI,GAAI,SAAU,CAAE,kBAAmB,OAASH,GACnDD,GAAOI,GAAI,SAAU,CAAE,kBAAmB,MACtCA,GAAI,YAAa,CAAE,kBAAmB,MAAQ,qBAC9CA,GAAI,YAAa,CAAE,kBAAmB,MAAQpO,EAAQ3I,UACtD+W,GAAI,YAAa,CAAE,kBAAmB,MAAQA,GAAI,aAClDA,GAAI,YAAa,CAAE,kBAAmB,MAAQ,gBAC9CA,GAAI,YAAa,CAAE,kBAAmB,MAAQpO,EAAQ1I,YAC1D0W,GAAOI,GAAI,SAAU,CAAE,kBAAmB,MACtCA,GAAI,YAAa,CAAE,kBAAmB,MAAQ,wBAC9CA,GAAI,YAAa,CAAE,kBAAmB,MAAQxW,EAASxB,WAAW4J,EAAQrI,SAC9EqW,GAAOI,GAAI,SAAU,CAAE,kBAAmB,OAC1CJ,GAAOI,GAAI,SAAU,CAAE,kBAAmB,OACtCA,GAAI,YAAa,CAAE,kBAAmB,MAClC,iCACAA,GAAI,YAAa,CAAE,kBAAmB,MAClCD,EAAMnC,UAAY,IAChBhB,GAAQmD,EAAMpC,YAAc,IAC5BoC,EAAM7O,iBACpB0O,GAAOI,GAAI,SAAU,CAAE,kBAAmB,OACtCA,GAAI,YAAa,CAAE,kBAAmB,MAAnC,gCAC0BlD,GACzBkD,GAAI,cACZJ,GAAOI,GAAI,SAAU,CAAE,kBAAmB,OACtCA,GAAI,YAAa,CAAE,kBAAmB,MAAnC,oDAC8CjD,GAC7CiD,GAAI,cACZJ,GAAOI,GAAI,SAAU,CAAE,kBAAmB,iBA7BpB,cA8BAF,GA9BA,IA8BtB,2BAAgC,CAArBT,EAAqB,sBACEA,EADF,GACrBY,EADqB,KACP9N,EADO,KAE5ByN,GAAOI,GAAI,SAAU,CAAE,kBAAmB,gBAAkBC,GAFhC,cAGT9N,GAHS,IAG5B,2BAAW+N,EAAe,QACtBN,GAAOI,GAAI,YAAa,CAAE,kBAAmB,MACzCA,GAAI,iBACAA,GAAI,SAAU,CAAE,kBAAmB,OAAhC,UACIE,EADJ,cACcF,GAAI,gBAPL,gCA9BV,gC,oDA0ChBJ,G,UAAYlC,GAAS,oB,iNAGzB,IAAD,SAC0BvN,KAAKW,MAA5B/H,EADH,EACGA,QAASuH,EADZ,EACYA,UACjB,IAAKvH,IAAYuH,EAAW,OAAO,KAEnC,IAAMK,EAAO,CACT,2CADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAGvD,OAAQ,yBAAKA,UAAWJ,EAAQQ,KAAK,MACjC,kCACI,4BAAQJ,UAAU,YAAlB,oCAEIZ,KAAKgQ,eAAe7P,EAAU6B,QAGtC,kBAAC,GAAD,CACIsG,MAAM,sBACNC,MAAM,EACNR,MAAO/H,KAAKtG,MAAMiT,aAClB3E,SAAU,SAAA2E,GAAY,OAAI,EAAKG,OAAO,CAAEH,oBAE5C,kBAAC,GAAD,CACIrE,MAAM,0CACNC,MAAM,EACNR,MAAO/H,KAAKtG,MAAMkT,QAClB5E,SAAU,SAAA4E,GAAO,OAAI,EAAKE,OAAO,CAAEF,eAEvC,kBAAC,GAAD,CACIrB,KAAK,QACL/C,MAAM,OACNF,MAAM,0CACNmD,QAASzL,KAAKgN,mB,GApNa3L,IAAMC,WAgOjD,SAAS4L,GAAqBL,GAC1B,IADuD,EACjDI,EAAgB,GAChBgD,EAAkB,YAAIpD,GAAWlK,OAFgB,cAIrCsN,GAJqC,IAIvD,2BAAmC,CAAC,IAAD,UACeC,MAAM,MADrB,mBACxBC,EADwB,KACdC,EADc,KACDC,EADC,KAEzB1X,EAAO2X,GAAerD,EAAOkD,GAE7BjB,EAAUqB,GAJe,YAGV5X,EAHU,MAIayX,GAJb,YAKblB,EALa,MAMzBxM,KAAK2N,IAVwC,8BAavD,OAAOpD,EAIX,SAASqD,GAAerD,EAAekD,GAA0B,IAAD,gBACzClD,GADyC,IAC5D,2BAA0B,CAAC,IAAhBtU,EAAe,QAEtB,GAFsB,YACIA,EADJ,QAEEwX,EAAU,OAAOxX,GAHe,8BAK5D,IAAM6X,EAAiB,CAACL,EAAU,IAElC,OADAlD,EAAMvK,KAAK8N,GACJA,EAGX,SAASD,GAAkBZ,EAAsBS,GAAgC,IAAD,gBACtDT,GADsD,IAC5E,2BAAgC,CAAC,IAAtBT,EAAqB,QAE5B,GAF4B,YACCA,EADD,QAEDkB,EAAa,OAAOlB,GAHyB,8BAK5E,IAAMuB,EAAuB,CAACL,EAAa,IAE3C,OADAT,EAASjN,KAAK+N,GACPA,EAMX,SAASZ,GAAI7Q,GAAqD,IAAD,uBAAnC0R,EAAmC,iCAAnCA,EAAmC,kBAC7D,GAAoB,IAAhBA,EAAKxP,OAAc,MAAO,IAAMlC,EAAO,KAC3C,GAAoB,IAAhB0R,EAAKxP,QAAmC,kBAAZwP,EAAK,GAAiB,MAAM,IAAN,OAAW1R,EAAX,YAAmB0R,EAAK,GAAxB,aAA+B1R,EAA/B,KAKtD,IAHA,IAAIyQ,EAAG,WAAOzQ,GACV2R,EAAuB,GACvBnS,EAAU,GACd,MAAkBkS,EAAlB,eAAwB,CAAnB,IAAME,EAAG,KACS,kBAARA,EAAkBpS,GAAWoS,EACnCD,EAAUC,EAGnB,cAAkBhM,OAAOC,KAAK8L,GAA9B,eAAwC,CAAnC,IAAM3L,EAAG,KACJ6L,EAAMF,EAAQ3L,GACpByK,GAAG,WAAQzK,EAAR,YAAelF,KAAKC,UAAU8Q,IAQrC,OANIrS,EAAQ0C,OAAS,EACjBuO,GAAG,WAAQjR,EAAR,aAAoBQ,EAApB,KAEHyQ,GAAO,KAGJA,E,SAIIlC,G,iFAAf,WAAwBtP,GAAxB,SAAAL,EAAA,sEACiBvC,IAAIyV,KAAKC,gBAAT,2BAA6C9S,IAD9D,oF,iCC7TM0J,GAAQtM,IAAIuM,KAAKD,MACjBkB,GAAYxN,IAAIuM,KAAKiB,UAWNmI,G,4MACTC,gBAAkB,SAACC,GACvB,EAAKvQ,MAAMwQ,YAAYD,I,EAGnBE,iBAAmB,SAAC3Z,GACxB,EAAKkJ,MAAM0Q,aACPhY,EAAS7B,aAAa,IAAID,KAAKE,M,uDAKnC,IAAM+I,EAAO,CACT,gDADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAGvD,OAAQ,yBAAKA,UAAWJ,EAAQQ,KAAK,MACjC,kBAAC,GAAD,CACIsH,MAAO+C,EAAUiG,WACjBvJ,MAAO1O,EAASpB,aAAa+H,KAAKW,MAAMlJ,MAAMG,UAC9CoQ,SAAUhI,KAAKoR,mBAEnB,kBAAC,GAAD,CACI7I,MAAM,EACND,MAAO+C,EAAUkG,UACjBxJ,MAAO/H,KAAKW,MAAMuQ,IAClBlJ,SAAUhI,KAAKiR,uB,GA3BS5P,IAAMC,WCXxCuK,I,OAAYxQ,IAAIuM,KAAKiE,WASN2F,G,4MACjB9X,MAAQ,G,EAEA+X,aAAe,SAAC5Y,GAAgB,IAAD,EAC3BD,EAAY,EAAK+H,MAAjB/H,QACR,IAAKA,EAAS,OAAO,KACrB,IACM8Y,IADoB,UAAA7Q,EAASV,iBAAT,eAAqB+B,UAAW,IAC1BrJ,IAAO,CAAEkO,QAAS,OAC5C4K,EAAgB/Y,EAAQsJ,QAAQrJ,GAChC2H,EAAU,CAAC,iBAAkB,UAC7B/I,EAAOka,EAAgBtY,EAASpB,aAAa0Z,EAAcla,MAAQ,GAAK,KAC9E,GAAIA,EAAM,CACN,IAAMmY,EAAQ,IAAIrY,KACZqa,EAAKhC,EAAM7O,cACX8Q,EAAKjC,EAAMpC,WACXsE,EAAKlC,EAAMnC,UAEXsE,EAAU1Y,EAAS7B,aACrB,IAAID,KAAKqa,EAAK,EAAGC,EAAIC,IAGnBE,EAAM3Y,EAAS7B,aACjB,IAAID,KAAKqa,EAAK,GAAIC,EAAIC,IAEpB5Z,EAAUyZ,EAAcla,MAAQ,EAClCS,EAAU8Z,EACVxR,EAAQkC,KAAK,OAERxK,EAAU6Z,EACfvR,EAAQkC,KAAK,WAGblC,EAAQkC,KAAK,QAGrB,OAAO,kBAAC,GAAD,CACHsC,IAAKnM,EACL4S,QAAS,kBAAM,EAAKwG,kBAAkBpZ,KAEtC,yBAAK+H,UAAWJ,EAAQQ,KAAK,MACzB,6BAAM0Q,EAAO3K,SAETtP,GACA,yBAAKmJ,UAAU,QACXvH,EAASxB,WAAWJ,O,+DAOfoB,GAAa,IAAD,EAGjC,SAF0B,UAAAgI,EAASV,iBAAT,eAAqB+B,UAAW,IAC1BrJ,IAAO,CAAEkO,QAAS,QACpCA,U,iFAGclO,G,8EACpBD,EAAYoH,KAAKW,MAAjB/H,Q,yCACa,M,UACf8Y,EAAkB9Y,EAAQsJ,QAAQrJ,IAAO,CAC3CkO,QAAS/G,KAAKkS,iBAAiBrZ,GAC/BqY,IAAK,I,uDAGkB,qBAAhBQ,EAAOja,OACdia,EAAOja,KAAO4B,EAAS7B,aAAa,IAAID,OAE5CkD,QAAQ6K,KAAK,UAAWoM,GAElBC,E,eACCD,G,UAEiBrW,IAAIkT,QAAQC,OAAO2D,QACvCR,EAAc5K,QACd,kBAAC,GAAD,CACItP,KAAMka,EAAcla,MAAQ4B,EAAS7B,aAAa6B,EAAS/B,uBAC3D4Z,IAAKS,EAAcT,KAAO,GAC1BG,aAAc,SAAC5Z,GACXka,EAAcla,KAAOA,GAEzB0Z,YAAa,SAACD,GACVS,EAAcT,IAAMA,M,qEAKhClR,KAAKW,MAAMyR,eAAevZ,EAAI8Y,G,uIAGxB,IAAD,EAEL,IADoB3R,KAAKW,MAAjB/H,QACM,OAAO,KAErB,IAAM4H,EAAO,CACT,qCADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAEjDyR,EAAYzN,OAAOC,MAAK,UAAAhE,EAASV,iBAAT,eAAqB+B,UAAW,IAE9D,OAAQ,yBAAKtB,UAAWJ,EAAQQ,KAAK,MACjC,yBACIJ,UAAU,UACV0R,MAAO,CACHC,aAAa,UAAD,OACR7a,KAAK8a,KAAKH,EAAUnR,OAAS,GADrB,6BAIlBmR,EAAUtN,IAAI/E,KAAKyR,eACrB,0EACA,4BACI,kCAAO,0BAAM7Q,UAAU,OAAhB,SAAP,6BAAmE,6CAAnE,KACA,kCAAO,0BAAMA,UAAU,WAAhB,UAAP,6BAAwE,gDAAxE,KACA,kCAAO,0BAAMA,UAAU,QAAhB,QAAP,6BAAmE,6CAAnE,W,GAjHqBS,IAAMC,W,SCVrCqG,I,OAAQtM,IAAIuM,KAAKD,OACjBkB,GAAYxN,IAAIuM,KAAKiB,UACrB4J,GAAepX,IAAIuM,KAAK6K,aAUTC,G,4MACTnI,kBAAoB,G,EAE5B7Q,MAA2B,CACvBb,GAAI,GACJC,SAAU,GACVC,UAAW,GACXC,WAAY,GACZC,OAAQ,GACRC,KAAM,EACNC,QAAS,GACTC,MAAOC,EAAS/B,uB,EAGZmT,QAAU,WAAO,IACbpH,EAAmB,EAAK1C,MAAxB0C,eACFsP,EAAoB7S,KAAKC,UAAUsD,GACrC,EAAKkH,oBAAsBoI,IAC/B,EAAKpI,kBAAoBoI,EACzBlY,QAAQ6K,KAAK,qBAAsBqN,GACnC,EAAKhI,SAAL,eAAmBtH,M,EAGvBwH,kBAAoB,EAAKJ,Q,EAEzBK,mBAAqB,EAAKL,Q,EAElBmI,WAAa,WAAO,IAChBlZ,EADe,gBACfA,MACR,EAAKiH,MAAMqH,SAAX,eAAyBtO,K,EAGrBmZ,qBAAuB,SAAC/Z,GAC5B,EAAK6R,SAAS,CAAE7R,YAAY,EAAK8Z,a,EAG7BE,sBAAwB,SAAC/Z,GAC7B,EAAK4R,SAAS,CAAE5R,aAAa,EAAK6Z,a,EAG9BG,uBAAyB,SAAC/Z,GAC9B,EAAK2R,SAAS,CAAE3R,cAAc,EAAK4Z,a,EAG/BI,oBAAsB,SAAC7Z,GAC3B,EAAKwR,SAAS,CAAExR,WAAW,EAAKyZ,a,EAG5BK,mBAAqB,SAACha,GAC1B,EAAK0R,SAAS,CAAE1R,UAAU,EAAK2Z,a,EAG3BM,iBAAmB,SAACha,GACxB,EAAKyR,SAAS,CAAEzR,QAAQ,EAAK0Z,a,EAGzBO,kBAAoB,SAACC,GAEzB,EAAKzI,SAAS,CAAEvR,MAAO,IAAI7B,KAAK6b,IAAc,EAAKR,a,uDAInDnY,QAAQZ,IAAI,2BACZ,IAAM2G,EAAO,CACT,oBADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAJlD,EASDZ,KAAKtG,MAFLZ,EAPC,EAODA,SAAUC,EAPT,EAOSA,UAAWC,EAPpB,EAOoBA,WACrBC,EARC,EAQDA,OAAQG,EARP,EAQOA,MAAOD,EARd,EAQcA,QAASD,EARvB,EAQuBA,KAG5B,OAAQ,yBAAK0H,UAAWJ,EAAQQ,KAAK,MACjC,kBAAC,GAAD,CACIsH,MAAO+C,EAAUgI,SACjBC,UAAWjY,IAAIuI,UAAUG,UACzBwE,MAAM,EACNgL,OAAO,EACPxL,MAAOjP,EACPkP,SAAUhI,KAAK6S,uBAEnB,kBAAC,GAAD,CACIvK,MAAO+C,EAAUmI,UACjBF,UAAWjY,IAAIuI,UAAUC,cACzB0E,MAAM,EACNR,MAAOhP,EACPiP,SAAUhI,KAAK8S,wBAEnB,kBAAC,GAAD,CACIxK,MAAO+C,EAAUoI,WACjBH,UAAWjY,IAAIuI,UAAUC,cACzB0E,MAAM,EACNR,MAAO/O,EACPgP,SAAUhI,KAAK+S,yBAEnB,kBAAC,GAAD,CACIzK,MAAO+C,EAAUpS,OACjBsP,MAAM,EACN3O,KAAK,UACLmO,MAAO9O,EACP+O,SAAUhI,KAAKiT,qBAEnB,kBAAC,GAAD,CACI3K,MAAO+C,EAAUqI,SACjB3L,MAAO3O,EAAMxB,UACboQ,SAAUhI,KAAKmT,oBAEnB,kBAAC,GAAD,CACI7K,MAAO+C,EAAUlS,QACjBoP,MAAM,EACN3O,KAAK,WACLmO,MAAO5O,EACP6O,SAAUhI,KAAKgT,sBAEnB,kBAACP,GAAD,CACInK,MAAO+C,EAAUnS,KACjB6O,MAAO7O,EACP8O,SAAUhI,KAAKkT,wB,GArHU7R,IAAMC,WCGzC+I,I,OAAShP,IAAIuM,KAAKyC,QAClBsJ,GAAWtY,IAAIuY,OAAOD,SAUPE,G,4MACTC,aAAe,G,EACvBpa,MAAuB,G,EAEf+Q,Q,sBAAU,8BAAA7M,EAAA,yDACNyF,EAAmB,EAAK1C,MAAxB0C,eACJ,EAAKyQ,eAAiBzQ,EAAexK,GAF3B,wDAGd,EAAKib,aAAezQ,EAAexK,GAHrB,SAIQ6R,EAAexG,WAAWb,EAAexK,IAJjD,OAIRD,EAJQ,OAKd6B,QAAQ6K,KAAK,WAAY1M,GACzB,EAAK+R,SAAS,CAAE/R,YANF,2C,EASlBiS,kBAAoB,EAAKJ,Q,EACzBK,mBAAqB,EAAKL,Q,EAElBsJ,wBAA0B,SAACrb,GAC/B+B,QAAQ6K,KAAK,kBAAmB5M,GAChCsb,EAAM7Z,kBAAkBzB,GACxBsb,EAAM3Z,QAAQ,iB,EAGV4Z,2B,sBAA6B,8BAAArW,EAAA,yDACzBhF,EAAY,EAAKc,MAAjBd,QADyB,wDAG3B4J,EAA8B,CAChCC,MAAOpJ,EAAS7B,aAAa,IAAID,MACjC6C,KAAMsH,IACN8B,QAAS,EACTlF,KAAM,IAEwB,IAA9B1F,EAAQgJ,WAAWV,QAEnBtI,EAAQgJ,WAAWc,KAAK,CACpBD,MAAOD,EAAaC,MACpBF,OAAQ,KAGkB3J,EAAQgJ,WAAWhJ,EAAQgJ,WAAWV,OAAS,GACnEqB,OAAOG,KAAKF,GAjBO,SAkB3BkI,EAAepQ,WAAW1B,GAlBC,OAmBjC,EAAK+R,SAAS,CACV/R,QAAQ,eAAMA,KACf,kBAAM,EAAKmb,wBAAwBvR,EAAapI,SArBlB,4C,EAwB7B8Z,mB,uCAAqB,WAAOrb,EAAY6Y,GAAnB,eAAA9T,EAAA,yDACzBnD,QAAQ6K,KAAK,yBAA0BzM,EAAI6Y,GACnC9Y,EAAY,EAAKc,MAAjBd,QAFiB,wDAIzBA,EAAQsJ,QAAQrJ,GAAM6Y,EACtBjX,QAAQ6K,KAAK,WAAY1M,GALA,SAMnB8R,EAAepQ,WAAW1B,GANP,OAOzB,EAAK+R,SAAS,CAAE/R,QAAQ,eAAMA,KAPL,2C,0DAUrBub,WAAa,WACjBH,EAAM3Z,QAAQ,YACd2Z,EAAMja,gB,EAGFqa,kB,sBAAoB,gCAAAxW,EAAA,yDAClBhF,EAAU,EAAKc,MAAMd,QADH,iDAGpByK,EAAiBe,EAAepB,WAAWpK,GAC/C6B,QAAQ6K,KAAK,WAAY1M,GACzB6B,QAAQ6K,KAAK,kBAAmBjC,GAC1BgR,EAAShZ,IAAIkT,QAAQC,OAAO8F,KAAK,CACnCrT,MAAOoK,EAAUkJ,YACjB/V,QAAS,6BACL,kBAAC,GAAD,CACI6E,eAAgBA,EAChB2E,SAAU,SAAAvG,GAAO,OAAI4B,EAAc,eAAQ5B,MAE/C,6BACA,kBAAC,GAAD,CACI6G,MAAO+C,EAAUrH,cACjBuH,KAAK,SAASC,MAAM,IACpBC,QAAS,kBAAM,EAAK+I,oBAAoBnR,EAAexK,GAAIwb,OAGnEI,OAAQ,CACJ,kBAAC,GAAD,CACInM,MAAO+C,EAAUK,OACjBgJ,MAAM,EACNjJ,QAAS,kBAAM4I,EAAOM,UAE1B,kBAAC,GAAD,CACIrM,MAAO+C,EAAUC,GACjBE,MAAM,IACNC,QAAO,sBAAE,sBAAA7N,EAAA,6DACLwG,EAAehB,WAAWxK,EAASyK,GAD9B,SAECqH,EAAepQ,WAAW1B,GAF3B,cAGLyb,EAAOM,OACP,EAAKR,aAJA,KAKLH,EALK,SAKmBtJ,EAAezG,iBALlC,wBAKC1J,YALD,iEA7BG,2C,EAyCpBia,oB,uCAAsB,WAAOvO,EAAmBoO,GAA1B,SAAAzW,EAAA,yDACVvC,IAAIkT,QAAQC,OAAO2D,QAC/B9G,EAAUrH,cACV,6BAAMqH,EAAUuJ,uBAHM,wDAM1BP,EAAOM,OANmB,SAOpBjK,EAAe1G,cAAciC,GAPT,mBAQ1B+N,EAR0B,SAQFtJ,EAAezG,iBARb,wBAQpB1J,YARoB,gBAS1B,EAAK4Z,aATqB,4C,+GAa1B,IAAM3T,EAAO,CACT,qBADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAGvD,OAAQ,yBAAKA,UAAWJ,EAAQQ,KAAK,MACjC,4BAAQJ,UAAU,wBACd,kBAAC,GAAD,CACI0H,MAAO+C,EAAUwJ,KACjBtJ,KAAK,OACLE,QAASzL,KAAKmU,aAElB,kBAAC,EAAD,CAAkBvb,QAASoH,KAAKW,MAAM0C,iBACtC,kBAAC,GAAD,CACIiF,MAAO+C,EAAUkJ,YACjBhJ,KAAK,OACL/C,MAAM,OACNiD,QAASzL,KAAKoU,qBAGtB,iCACI,kBAACT,GAAD,CACImB,QAAS,CACLzJ,EAAUhJ,cACVgJ,EAAUnJ,QACVmJ,EAAU0J,gBAGd,kBAAC,GAAD,CACInc,QAASoH,KAAKtG,MAAMd,QACpBqT,oBAAqBjM,KAAK+T,wBAC1B1H,uBAAwBrM,KAAKiU,6BAEjC,kBAAC,GAAD,CACIrb,QAASoH,KAAKtG,MAAMd,QACpBwZ,eAAgBpS,KAAKkU,qBAEzB,kBAAC,GAAD,CACItb,QAASoH,KAAKtG,MAAMd,QACpBuH,UAAWU,EAASV,mB,GA1JPkB,IAAMC,WC5BrCuK,I,OAAYxQ,IAAIuM,KAAKiE,WAQNmJ,G,4MACTC,YAAc,WAClB,EAAKtU,MAAM8K,QAAX,eAAwB,EAAK9K,MAAM0C,kB,uDAInC,IAAM7C,EAAO,CACT,6BADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAGvD,OAAQ,yBAAKA,UAAWJ,EAAQQ,KAAK,MACjC,kBAAC,GAAD,CACIJ,UAAU,eACV6K,QAASzL,KAAKiV,aAEd,kBAAC,EAAD,CAAkBrc,QAASoH,KAAKW,MAAM0C,uB,GAhBJhC,IAAMC,WCbnC4T,G,WAMjB,WAAYC,GAAsC,yBAL1CC,mBAKyC,OAHzCD,sBAGyC,OAFhCE,gBAEgC,EAC7CrV,KAAKmV,iBAAmBA,EACxBnV,KAAKoV,cAAgBD,EAAiBG,QACtCtV,KAAKqV,WAAaF,EAAiBpQ,KAAI,SAAAhJ,GAAC,MAAK,CACzClD,GAAIkD,EAAElD,GACN2a,UAAW+B,GAAaxZ,EAAEhD,WAC1Bsa,SAAUkC,GAAaxZ,EAAEjD,c,mDAI1Bua,EAAkBG,GAAoB,IAAD,OAClCgC,EAAiBD,GAAalC,GAC9BoC,EAAkBF,GAAa/B,GAErCxT,KAAKoV,cAAgBpV,KAAKmV,iBAAiBhS,QACvC,SAACE,EAAiCqS,GAC9B,IAAMrQ,EAAO,EAAKgQ,WAAWK,GAC7B,OAAOC,GAAMtQ,EAAKgO,SAAUmC,IACrBG,GAAMtQ,EAAKmO,UAAWiC,MAGrCzV,KAAKoV,cAAczS,MACf,SAACiT,EAAqBC,GAClB,OAAID,EAAG9c,SAAW+c,EAAG/c,SAAiB,EAClC8c,EAAG9c,SAAW+c,EAAG/c,UAAkB,EACnC8c,EAAG7c,UAAY8c,EAAG9c,UAAkB,EACpC6c,EAAG7c,UAAY8c,EAAG9c,WAAmB,EACrC6c,EAAG5c,WAAa6c,EAAG7c,WAAmB,EACtC4c,EAAG5c,WAAa6c,EAAG7c,YAAoB,EACpC,O,mCAKE,OAAOgH,KAAKoV,cAAcE,Y,KAanD,SAASK,GAAM5N,EAAe+N,GAC1B,OAAoB,IAAhBA,EAAK5U,SAJK,IAKP6G,EAAMkC,QAAQ6L,GAIzB,IACMC,GAAoB,CACtB,CAAC,uBAAS,KACV,CAAC,yBAAS,KACV,CAAC,yBAAS,KACV,CAAC,uBAAS,KACV,CAAC,yBAAS,KACV,CAAC,OAAK,KACN,CAAC,SAAK,KACN,CAAC,OAAK,MAGV,SAASR,GAAavW,GAClB,IADwC,EACpCyQ,EAAM,GAD8B,cAEnBzQ,EAAKmC,eAFc,IAExC,2BAAyC,CAAC,IAA/B6U,EAA8B,QAC/BC,EAAcC,GAAgBF,GAChCC,EACAxG,GAAOwG,GAEmC,IAnB9B,6BAmBShM,QAAQ+L,KAC7BvG,GAAOuG,IARyB,8BAWxC,OAAOvG,EAUX,SAASyG,GAAgBF,GAAgC,IAAD,gBAClCD,IADkC,IACpD,2BAAqC,CAAC,IAA3BhR,EAA0B,sBACCA,EADD,GAC1BoR,EAD0B,KACdF,EADc,KAEjC,IA7CU,IA6CNE,EAAWlM,QAAQ+L,GACnB,OAAOC,GAJqC,8BAOpD,OAAO,K,wBCxFUG,I,8KAEb,IAAMC,EAAa,CAAC,SAAU,oBAK9B,MAJoC,kBAAzBrW,KAAKW,MAAMC,WAClByV,EAAW3T,KAAK1C,KAAKW,MAAMC,WAGxB,sBAAIA,UAAWyV,EAAWrV,KAAK,MAE9BhB,KAAKW,MAAMpH,KAAKwL,KACZ,SAAClL,EAAayc,GAAd,OACA,sBAAItR,IAAG,aAAQsR,IAAS,gBAAC,KAAD,KACpBzc,Y,GAZiBwH,cCD1BkV,oBARf,SAAyB7c,GACrB,MAAO,CAAEH,KAAMG,EAAMH,SAGzB,SAA4BS,MAIbuc,CAA6CH,ICKtD/L,I,OAAShP,IAAIuM,KAAKyC,QAClBmM,GAAOnb,IAAIuM,KAAK4O,KAeDC,G,4MACTC,WAAa,G,EACbC,YAAc,G,EACdC,oB,IAERld,MAAQ,CACJmd,iBAAkB,EAAKlW,MAAMrH,U,EAejCuR,kBAAoB,EAAKiM,sB,EACzBhM,mBAAqB,EAAKgM,sB,EAElB3T,OAAS9H,IAAIsE,MAAMC,WAAU,WAAO,IAChCgX,EAD+B,gBAC/BA,eACR,GAAIA,EAAgB,CAAC,IACThe,EAAY,EAAK+H,MAAjB/H,QACRge,EAAezT,OAAOvK,EAAQE,SAAUF,EAAQG,WAChD,EAAK4R,SAAS,CACVkM,iBAAkBD,EAAeG,kBA3CvB,K,EAgDdC,oBAAsB,SAAC3T,GAC3B,EAAK1C,MAAMsW,gBAAgB5T,I,EAGvB6T,2BAA6B,SAAC7T,GAClC,OAAO,kBAAC,GAAD,CACHA,eAAgBA,EAChBoI,QAAS,EAAK0L,6B,EAIdA,0BAA4B,SAAC9T,GACjC,EAAK1C,MAAMsW,gBAAgB5T,GAC3B,EAAK1C,MAAMyW,eAAe/T,I,EAGtBgU,oB,sBAAsB,4BAAAzZ,EAAA,6DACpBhF,EAAUwL,EAAe5C,yBAC3B,EAAKb,MAAM/H,SAFW,SAIpByC,IAAIkT,QAAQC,OAAO8I,KACrBjM,EAAUkM,WACV,IAAI7Z,QAAJ,uCAAkB,WAAOjB,GAAP,eAAAmB,EAAA,sEACR8M,EAAepQ,WAAW1B,GADlB,uBAEiB8R,EAAezG,iBAFhC,OAERkR,EAFQ,OAGdnB,EAAMzZ,YAAY4a,GAClB1Y,IAJc,2CAAlB,wDANsB,OAa1B,EAAKkE,MAAMyW,eAAehT,EAAepB,WAAWpK,IAb1B,2C,sEA1CG,IAAD,EACEoH,KAAKW,MAA3B/H,EADoB,EACpBA,QAASU,EADW,EACXA,SACXke,EAAa1X,KAAKC,UAAUnH,GAC5B6e,EAAc3X,KAAKC,UAAUzG,GAC/B0G,KAAK0W,aAAec,GAAcxX,KAAK2W,cAAgBc,IACvDzX,KAAK0W,WAAac,EAClBxX,KAAK2W,YAAcc,EACnBzX,KAAK4W,eAAiB,IAAIc,GAAepe,GACzC0G,KAAKmD,Y,+BAoDT,IAD2BnD,KAAnB4W,eACa,OAAO,KAE5B,IAAMpW,EAAO,CACT,sBADS,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAE/ChI,EAAYoH,KAAKW,MAAjB/H,QACAie,EAAqB7W,KAAKtG,MAA1Bmd,iBAER,OAAQ,yBAAKjW,UAAWJ,EAAQQ,KAAK,MACjC,4BAAQJ,UAAU,wBACd,kBAAC,GAAD,CACI2K,KAAK,QACLjD,MAAM,UACNmD,QAAS,kBAAMgD,GAAGkJ,IAAIC,UAE1B,wDAA8BC,GAAQrU,SACtC,kBAAC,GAAD,CACIgF,MAAM,OACNF,MAAO+C,EAAUyM,eACjBvM,KAAK,SACLE,QAAS,kBAAMuI,EAAM3Z,QAAQ,uBAGrC,iCACI,yBAAKuG,UAAU,YACX,yBAAKA,UAAU,wCACX,uEACA,kBAAC,GAAD,CACIyC,eAAgBzK,EAChBoP,SAAUhI,KAAKgX,sBAEnB,uBAAGpW,UAAuC,IAA5BiW,EAAiB3V,OAAe,OAAS,IAAvD,SACU,wDADV,8BAEI,6CAFJ,wFAKA,kBAAC,GAAD,CACIqK,KAAK,MACLhD,MAAM,EACND,MAAO+C,EAAUkM,WACjBQ,QAASC,GAAiBpf,GAC1B4S,MAAM,IACNC,QAASzL,KAAKqX,uBAGtB,kBAAC,GAAD,OAEJ,yBAAKzW,UAAU,iBACX,qEACI,6BAAMiW,EAAiB3V,QACvB,qCAAWlB,KAAKW,MAAMrH,SAAS4H,SACnC,kBAACsV,GAAD,CACI5V,UAAU,OACVqX,WAAY,GACZC,MAAOlY,KAAKtG,MAAMmd,iBAClBsB,OAAQnY,KAAKkX,oC,GA7HC7V,IAAMC,WAqI5C,SAAS0W,GAAiBpf,GACtB,OAAuC,IAAnCA,EAAQE,SAAS0C,OAAO0F,SACY,IAApCtI,EAAQG,UAAUyC,OAAO0F,SACS,IAAlCtI,EAAQO,QAAQqC,OAAO0F,UAEtB7H,EAASrB,cAAcY,EAAQQ,S,ICtKnBgf,G,WAWjB,WAAoB5Z,EAAyB9C,GAAe,yBAAfA,OAAc,KAH1C2c,oBAG0C,OAF1CC,cAE0C,EACvD,IACI,IAAMhf,EAAWwG,KAAKG,MAAMzB,GAC5B,GAA8B,kBAAnBlF,EAAS+M,MAChB,MAAMnG,MAAM,iDAGhB,GADAF,KAAKqY,eAAiB/e,EAAS+M,MACC,kBAArB/M,EAASwL,QAChB,MAAM5E,MAAM,mDAEhB,GAAI0J,MAAMC,QAAQvQ,EAASwL,SACvB,MAAM5E,MAAM,sDAEhBF,KAAKsY,SAAWhf,EAASwL,QACzBrK,QAAQ6K,KAAK,YAAahM,GAC5B,MAAOsV,GAEL,MADAnU,QAAQZ,IAAI+U,GACN1O,MAAM,6C,iGA3BAqY,G,yFACM1Y,EAAW1B,SAASoa,G,cAApC/Z,E,OACA9C,EAAO6c,EAAiBC,OAC1B,EAAGD,EAAiBrX,OAAS,gBAAgBA,Q,kBAC1C,IAAIkX,EAAc5Z,EAAS9C,I,uJA6BxB4a,GACV,IAAMxR,EAAsC9E,KAAKsY,SAE3CtT,EADOJ,OAAOC,KAAKC,GACRwR,GACjB,IAAKtR,EAAK,MAAM9E,MAAM,0BAAD,OAA2BoW,EAA3B,MACrB,OAAOlS,EAAenB,qBAAqB6B,EAAQE,M,0EAGtCA,G,uFACS0F,EAAexG,WAAWc,EAAKhF,KAAKtE,M,cAApD9C,E,yBACCA,G,2IAZW,OAAOoH,KAAKqY,mB,KC1BhChO,I,OAAShP,IAAIuM,KAAKyC,QAClBoO,GAAYpd,IAAIuM,KAAK6Q,UACrBC,GAAWrd,IAAIuM,KAAK8Q,SACpBC,GAAOtd,IAAIuY,OAAO+E,KAClBnK,GAASnT,IAAIkT,QAAQC,OAaNoK,G,4MACjBlf,MAAQ,CACJmf,SAAU,EACVxS,MAAO,EACPzN,aAASyD,EACTyc,mBAAoB,EACpBC,sBAAuB,G,EAGnBC,iB,uCAAmB,WAAOC,GAAP,eAAArb,EAAA,yDACF,IAAjBqb,EAAM/X,OADa,gCAEbsN,GAAOpO,MAAM,mDAFA,2CAQjBgG,EAAQ6S,EAAM5T,KAAK,GARF,oDAUvB5K,QAAQ6K,KAAK,QAASc,GACJ,kBAAdA,EAAKpH,KAXc,kCAYbwP,GAAOpO,MAAM,mEAZA,0CAgBvB,EAAKuK,SACD,CAAEkO,SAAU,OACZ,kBAAM,EAAKf,eAAe1R,EAAK1K,SAlBZ,4C,wDA2DnByY,W,sBAAa,4BAAAvW,EAAA,6DACjBoW,EAAM3Z,QAAQ,YADG,SAEMqQ,EAAezG,iBAFrB,OAEX3K,EAFW,OAGjBmB,QAAQ6K,KAAK,YAAahM,GAC1B0a,EAAMzZ,YAAYjB,GAJD,2C,sGArCQoC,G,mGACFwd,GAAqBC,OAAOzd,G,OAA7C0d,E,OACFN,EAAqB,EACrBC,EAAwB,EAC5B/Y,KAAK2K,SAAS,CACVtE,MAAO+S,EAASC,cAChBP,qBACAC,0BAGKO,EAAe,E,YAAGA,EAAeF,EAASC,e,wBAC/CrZ,KAAK2K,SAAS,CACVkO,SAAUS,EAAeF,EAASC,gB,SAG5BE,EAAaH,EAASI,cAAcF,GAC1CtZ,KAAK2K,SAAS,CAAE/R,QAAS2gB,IACzB9e,QAAQ6K,KAAK,cAAeiU,GACtBvU,EAAMuU,EAAW1gB,G,UACDugB,EAASlV,WAAWc,G,WAApCpM,E,OACN6B,QAAQ6K,KAAK,WAAY1M,IACrB8R,EAAe1M,OAAOpF,EAAQC,I,wBAC9BkgB,IACA/Y,KAAK2K,SAAS,CAAEoO,0B,UACV1d,IAAIsE,MAAM8Z,MAAM,G,uCAEtBX,IACA9Y,KAAK2K,SAAS,CAAEmO,uB,UACVpO,EAAepQ,WAAW1B,G,0DAGpC6B,QAAQ2F,MAAR,M,QArB0DkZ,I,uBAwBlEtZ,KAAK2K,SAAS,CAAEkO,SAAU,I,gJAW1B,IAAMrY,EAAO,CACT,0BAA2B,WADlB,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAHlD,EAKgCZ,KAAKtG,MAAlCmf,EALH,EAKGA,SAAUxS,EALb,EAKaA,MAAOzN,EALpB,EAKoBA,QACnB8gB,EAAYb,EAAW,GAAKA,EAAW,EAE7C,OAAQ,yBAAKjY,UAAWJ,EAAQQ,KAAK,MACjC,kBAAC2X,GAAD,KACI,kBAAC,GAAD,CACI/X,UAAU,cACV2K,KAAK,OACLjD,MAAM,SACNyP,SAAU2B,EACVjO,QAASzL,KAAKmU,aAElB,sHAEmB,6BAFnB,yFAMA,kBAACsE,GAAD,CACIkB,OAAO,QACPpO,KAAK,OACLjD,MAAM,sCACNkD,MAAM,IACNjD,MAAM,EACNwP,SAAU2B,GAAuB,IAAVrT,EACvBoF,QAASzL,KAAKgZ,oBAGtB,yBAAKpY,UAAS,mBAAcyF,EAAQ,EAAI,OAAS,SAC7C,kBAACqS,GAAD,CACIpQ,MAAK,yBAAoBjC,EAApB,mBAAoCA,EAAQ,EAAI,IAAM,GAAtD,aAA6D3O,KAAKC,MAAM,GAAM,IAAMkhB,GAApF,MACL9Q,MAAO8Q,EACPtQ,MAAM,EACNqR,OAAO,SAGPhhB,GACA,yBAAKgI,UAAU,gBACX,kBAAC,EAAD,CAAkBhI,QAASA,MAIvC,kBAAC+f,GAAD,KACI,6BACI,qDACA,6BAAM3Y,KAAKtG,MAAMof,qBAErB,6BACI,8DACA,6BAAM9Y,KAAKtG,MAAMqf,8B,GAjIM1X,IAAMC,WChB3CuY,I,OAAQxe,IAAIuY,OAAOiG,OAaJlC,G,4MAKjBX,oBAAsB,SAAC3T,GACnB,EAAK1C,MAAMsW,gBAAgB5T,I,EAG/ByW,mBAAqB,SAACzW,GAClB,EAAK1C,MAAMyW,eAAe/T,I,EAG9B0W,+BAAiC,SAACvX,EAAoC5J,GAClE,EAAK+H,MAAMqZ,2BAA2BxX,EAAc5J,I,kEAZpDqhB,M,+BAgBA,IAAMzZ,EAAO,CACT,MAAO,WADE,mBAENnF,IAAIoF,UAAUC,YAAYV,KAAKW,MAAMC,UAAW,MAGvD,OAAQ,yBAAKA,UAAWJ,EAAQQ,KAAK,MACjC,kBAAC6Y,GAAD,CACIK,YAAY,EACZC,YAAY,EACZpS,MAAO/H,KAAKW,MAAMhI,MAElB,kBAAC,GAAD,CACIqM,IAAI,eACJtM,eAAgBsH,KAAKW,MAAMjI,eAC3B2K,eAAgBrD,KAAKW,MAAM/H,QAC3BoS,OAAQhL,KAAK+Z,iCAEjB,kBAAC,GAAD,CACI/U,IAAI,UACJ3B,eAAgBrD,KAAKW,MAAM/H,UAE/B,kBAAC,GAAD,CACIoM,IAAI,WACJpM,QAASoH,KAAKW,MAAM/H,QACpBU,SAAU0G,KAAKW,MAAMrH,SACrB2d,gBAAiBjX,KAAKgX,oBACtBI,eAAgBpX,KAAK8Z,qBAEzB,kBAAC,GAAD,CACI9U,IAAI,0B,GA/CS3D,IAAMC,WCWxBiV,oBA7Bf,SAAyB7c,GACrB,MAAO,CACHhB,eAAgBgB,EAAMhB,eACtBC,KAAMe,EAAMf,KACZC,QAASc,EAAMd,QACfU,SAAUI,EAAMJ,aAIxB,SAA4BU,GACxB,MAAO,CACHid,gBADG,SACa5T,GACZ2Q,EAAM1Z,WAAW+I,IAErB+T,eAJG,SAIY/T,GACX2Q,EAAM1Z,WAAW+I,GACjB2Q,EAAM3Z,QAAQ,YAEZ2f,2BARH,SAQ8BxX,EAAoC5J,GAAqB,OAAD,wGACjF4J,IAAgB5J,EADiE,uBAGjFwL,EAAed,mBAAmB1K,EAAS4J,GAHsC,SAI3EkI,EAAepQ,WAAW1B,GAJiD,OAMrFob,EAAM3Z,QAAQ,WANuE,iDAWlFkc,CAA6C6D,IC/B7C,IACXC,Q,4FAKJ,WAAuBxgB,GAAvB,mBAAA+D,EAAA,sDACU0c,EAAwB,KADlC,uBAIYzgB,EAAI,+BAJhB,SAKiC0gB,KALjC,cAKkBC,EALlB,gBAMmC9P,EAAezG,iBANlD,cAMkB3K,EANlB,iBAOkBmhB,GAAsBD,EAAQlhB,EAAUO,GAP1D,yBAQkB6gB,GAAoBF,EAAQlhB,EAAUO,GARxD,0DAUYY,QAAQ2F,MAAR,MACAvG,EAAI,IAAD,kBAXf,eAaQA,EAAI,2CAbZ,UAccwB,IAAIsE,MAAM8Z,MAAMa,GAd9B,kF,+BAmBeG,G,qFAAf,WACID,EAAwBlhB,EAA6BO,GADzD,eAAA+D,EAAA,sDAGU+c,EAAmBrhB,EAAS6J,QAC9B,SAAApH,GAAC,MAA4B,qBAAjBye,EAAOze,EAAElD,OAEzBgB,EAAI,+CAAD,OAA6C8gB,EAAiBzZ,OAA9D,gBAA4E5H,EAAS4H,SAN5F,4C,+BAcewZ,G,qFAAf,WACIF,EAAwBlhB,EAA6BO,GADzD,uCAAA+D,EAAA,oEAGiCtE,GAHjC,gEAGe+J,EAHf,iBAI8BqH,EAAexG,WAAWb,EAAexK,IAJvE,OAIcD,EAJd,OAKcgiB,EALd,UAKoCJ,EAAO5hB,EAAQC,WALnD,QAK0D,GAL1D,cAMgCD,EAAQgJ,YANxC,IAMQ,2BAA4C,CAAjCU,EAAiC,sBACbA,EAAUC,QADG,IACxC,2BAAWC,EAAkC,kBACPoY,EAAoBpY,EAAapI,aAD1B,QACmC,EAFxC,gCANpD,sO,+BAgBemgB,K,8EAAf,gEAAA3c,EAAA,6DACUhB,EADV,UACoBiE,EAASrB,eAD7B,YAC+CqB,EAAStB,YADxD,SAEyBsb,GAAK,WAAY,CAAEC,IAAK,SAAUle,SAF3D,WAGoB,KADVme,EAFV,uDAGgDla,EAAStB,YAHzD,UAI0B,kBAAXwb,EAJf,+CAI6Djb,KAAKC,UAAUgb,IAJ5E,OAMUP,EAAyB,GACzBQ,EAAQD,EAAO7K,MAAM,MAP/B,cAQuB8K,GARvB,IAQI,2BAA0B,CAAfC,EAAe,UACWA,EAAK/K,MAAM,KADtB,mBACfgL,EADe,KACHtZ,EADG,KAEhBhJ,EAAqC,GAC3C4hB,EAAOU,GAActiB,EAHC,cAIEgJ,EAAWsO,MAAM,MAJnB,IAItB,2BAAW5N,EAAoC,UACpBA,EAAU4N,MAAM,KADI,mBACpClL,EADoC,KAC/BxB,EAD+B,KAE3C5K,EAAQoM,GAAO3J,IAAIoF,UAAUkD,QAAQH,EAAS,GAN5B,gCAR9B,uDAiBWgX,GAjBX,6C,sBAoBA,SAASK,GAAKM,EAAqBC,GAI/B,OAHmB/f,IAAIggB,WAAWlC,OAC9BtY,EAASvB,cAEKub,KAAKM,EAAaC,GCjFxC,IAAMhgB,GAAIC,IAAIlD,KAAKmD,KAAKjE,EAAQ,MAwE1BikB,GAAU,0DAchB,SAASrb,GAAMrD,GACX,IAAM2K,EAAuC,GACvCgU,EAAS,CAAChU,GAoChB,MAnCoB,kBAAT3K,IAAmBA,EAAI,UAAMA,IACxCA,EAAKsT,MAAM,MAAMxJ,SAAQ,SAASuU,EAAMO,GACpC,IAGI,GAAoB,KAFpBP,EAAOA,EAAKzf,QAEH0F,OAAc,OAEvB,GAA0B,OAAtB+Z,EAAKzC,OAAO,EAAG,GAAa,OAChC,GAAuB,MAAnByC,EAAK/T,OAAO,GAAY,MAAM9L,GAAE,SAGpC,IAAM2S,EAgClB,SAAsBkN,GAClB,IAAIlN,EAAQ,EACZ,KAAyB,KAAlBkN,EAAK/T,OAAO,IACf+T,EAAOA,EAAKzC,OAAO,GACnBzK,IAEJ,OAAOA,EAtCe0N,CAAaR,GAG3B,GAFAA,EAAOA,EAAKzC,OAAOzK,GAAOvS,OAEtBuS,EAAQwN,EAAOra,OACf,MAAM9F,GACF,QACA6f,EAFG,UAGAM,EAAOra,OAAS,GAHhB,UAIA6M,IAEX,KAAOwN,EAAOra,OAAS6M,GACnBwN,EAAOG,MAEX,IAAMrW,EA6BlB,SAAmB4V,GACf,IAAM5V,EAAmB,CACrBxM,GAAI,GACJkO,QAAS,GACTU,SAAU,GACVkC,KAAM,IAEJgS,EAAIL,GAAQT,KAAKI,EAAKzf,QAC5B,IAAKmgB,EAAG,OAAOtW,EAEXsW,EAAE,KACFtW,EAAK0B,QAAU4U,EAAE,GAAGngB,QAExB,GAAImgB,EAAE,GACFtW,EAAKxM,GAAK8iB,EAAE,GAAGngB,WACZ,CACH,IAAK6J,EAAK0B,QAGN,MAFAtM,QAAQ2F,MAAM,QAAS6a,GACvBxgB,QAAQ2F,MAAM,QAASiF,GACjBnF,MAAM,2BAEhBmF,EAAKxM,GAAKwM,EAAK0B,QAAQtL,cAEvBkgB,EAAE,KACFtW,EAAKzL,KAAO+hB,EAAE,GAAGnD,OAAO,EAAGmD,EAAE,GAAGza,OAAS,GAAG1F,QAE5CmgB,EAAE,KACFtW,EAAKsE,KAAOgS,EAAE,GAAGngB,OACZgd,OAAO,GACPtI,MAAM,KACNnL,KAAI,SAAAzE,GAAC,OAAIA,EAAE9E,WAEpB,OAAO6J,EA7D0BuW,CAAUX,GACnC,GAAkD,qBAAvCM,EAAOA,EAAOra,OAAS,GAAGmE,EAAKxM,IACtC,MAAMuC,GAAE,QAASiK,EAAKxM,IAE1B0iB,EAAOA,EAAOra,OAAS,GAAGmE,EAAKxM,IAAMwM,EACrCkW,EAAO7Y,KAAK2C,EAAKoC,UAAY,IAEjC,MAAOmH,GACH,KAAM,CAAE4M,WAAYA,EAAa,EAAGthB,QAAS0U,OAG9CrH,EAkHI,QAAEtH,SAAO4b,UAjKxB,SAAmBjf,GACf,IACI,OAAOqD,GAAMrD,GACf,MAAOgS,GAEL,OADAnU,QAAQ2F,MAAMwO,GACP,KA4JoBkN,mBA3CnC,SACI1R,GAEA,IAAI2R,EAA6B,GASjC,OAIJ,SAASC,EACLvU,EACAsU,EACArgB,GAEAkJ,OAAOC,KAAK4C,GAAUf,SAAQ,SAAS1B,GACnC,IAAIiX,EAAQxU,EAASzC,GACG,kBAAbiX,EAAMpjB,IAA0C,MAAvBojB,EAAMpjB,GAAGqO,OAAO,GAEhD6U,EAAKrZ,KAAK,CACN7J,GAAIojB,EAAMpjB,GACVkO,QAASkV,EAAMlV,QACfU,SAAU,GACVkC,KAAM,GACNjO,KAAMA,EAAK4Z,UAGV2G,EAAMxU,WAEX/L,EAAKgH,KAAKuZ,EAAMlV,SAChBiV,EAA4BC,EAAMxU,SAAUsU,EAAMrgB,GAClDA,EAAKggB,UAjCbM,CAA4B5R,EAAO2R,EAAM,IACzCA,EAAKpZ,MAAK,SAAS/E,EAAGsH,GAClB,IAAIgX,EAAWte,EAAEmJ,QACboV,EAAWjX,EAAE6B,QACjB,OAAImV,EAAWC,GAAkB,EAC7BD,EAAWC,EAAiB,EACzB,KAEJJ,IC5MI,IACX9b,SACAmc,WAkBJ,SAAoBC,GAChB,IAAMra,EAAwD,GAE9D,IAEI,IADA,IAAMsa,EAAqCC,GAAOV,UAAUQ,GAC5D,MAAyBzX,OAAOC,KAAKyX,GAArC,eAA2C,CAAtC,IAAMtN,EAAU,KACXE,EAAsBoN,EAAItN,GAC1BoB,EAAclB,EAAQnI,QACtByV,EAA4C,GAClDxa,EAAMoO,GAAeoM,EACrB,cAA4B5X,OAAOC,KAAKqK,EAAQzH,UAAhD,eAA2D,CAAtD,IAAM2H,EAAa,KACdC,EAAaH,EAAQzH,SAAS2H,GAC9BqN,EAAiBpN,EAAWtI,QAC5B2V,EAA4B,GAClCF,EAAaC,GAAkBC,EAC/B,cAAkB9X,OAAOC,KAAKwK,EAAW5H,UAAzC,eAAoD,CAA/C,IAAMzC,EAAG,KACJgE,EAAQqG,EAAW5H,SAASzC,GAClC0X,EAAgBha,KAAKsG,EAAMjC,SAEA,IAA3B2V,EAAgBxb,QAChBwb,EAAgBha,KAAK+Z,KAKrC,MAAO7N,GACHnU,QAAQ2F,MAAM,gBAAiBwO,GAC/BnU,QAAQZ,IAAI,YAAawiB,GAG7B,OAAOra,GA/CP2a,gBA2FJ,SAAyBxc,GACrB,IAAM4a,EAAwC,GACxC6B,EACF,CAAC3c,GAAME,EAAUiK,QAErB,KAAOwS,EAAO1b,OAAS,GAAG,CACtB,IAAMmE,EAAOuX,EAAOC,QACpB,GAAKxX,EACL,cAAmBT,OAAOC,KAAKQ,GAA/B,eAAsC,CAAjC,IAAMrG,EAAI,KACL+I,EAAQ1C,EAAKrG,GACnB+b,EAAO/b,GAAQ,CACXpF,KAAM,GACNmN,QAAS1L,IAAIlD,KAAK2O,OAAOzL,IAAIlD,KAAK2kB,OAAO/U,EAAMhB,WAE/CgB,EAAMnO,OAAMmhB,EAAO/b,GAAMpF,KAAOmO,EAAMnO,MACtCmO,EAAMN,UACNmV,EAAOla,KAAKqF,EAAMN,WAI9B,OAAOsT,GA9GPgC,aAgEJ,SAAsBC,GAClB,IACI,IAAMV,EACFC,GAAOtc,MAAM+c,GAUjB,OATkCpY,OAAOC,KAAKyX,GACzCvX,KAAI,SAAClM,GACF,IAAMD,EAAU0jB,EAAIzjB,GACpB,MAAO,CACHA,KACAe,KAAMhB,EAAQgB,MAAQ,GACtBmN,QAAS1L,IAAIlD,KAAK2kB,OAAOlkB,EAAQmO,UAAY,OAK7D,MAAO6H,GACHnU,QAAQ2F,MAAM,kBAAmBwO,GAErC,MAAO,IAjFPqO,aAgDJ,SAAsBC,GAClB,IAAMhb,EAAoB,GAC1B,IAGI,IAFA,IAAMoa,EACFC,GAAOtc,MAAMid,GACjB,MAAiBtY,OAAOC,KAAKyX,GAA7B,eAAmC,CAA9B,IAAMzjB,EAAE,KACTqJ,EAAQrJ,GAAM,CAAEkO,QAASuV,EAAIzjB,GAAIkO,UAGzC,MAAO6H,GACHnU,QAAQ2F,MAAM,kBAAmBwO,GAErC,OAAO1M,IAxDX,SAASjC,GAAMkd,GACX,IACI,OAAOZ,GAAOtc,MAAMkd,GAExB,MAAOvO,GAGH,MAFAnU,QAAQ2F,MAAM,6BAA8BwO,GAC5CnU,QAAQZ,IAAIsjB,GACNjd,MAAM0O,ICfL,kBACwC,OAAD,2HACxCpP,EAAyBqB,EAASrB,eAClCC,EAAsBoB,EAASpB,YAC/B4b,EAAahgB,IAAIggB,WAAWlC,OAC9BtY,EAASvB,cAJiC,kBAQhC+b,EAAWR,KAAK,iBAAkBrb,GARF,UAOpC4d,EAPoC,OASpCjd,EAAYid,EAAWC,MACzB,SAACld,GAAD,OAAkCA,EAAUtH,KAAO4G,KAVb,0CAYnB,MAZmB,eAa1ChF,QAAQ6K,KAAK,mBAAoBnF,GAC3Bmd,EAA8B,CAChCzkB,GAAIsH,EAAUtH,GACd2G,iBACAR,KAAMmB,EAAUnB,KAChByH,cAAe8V,GAAOQ,aAAa5c,EAAUvH,SAC7CuO,WAAYoV,GAAOI,gBAAgBxc,GAGnCiK,MAAOmS,GAAOtc,MAAME,EAAUiK,OAC9B7C,MAAOgV,GAAOtc,MAAME,EAAUoH,OAC9BrF,QAASqa,GAAOU,aAAa9c,EAAU+B,SACvCF,MAAOua,GAAOH,WAAWjc,EAAU6B,OACnCub,QAAS,CACLvb,MAAO7B,EAAU6B,MACjBE,QAAS/B,EAAU+B,QACnBtJ,QAASuH,EAAUvH,QACnBwR,MAAOjK,EAAUiK,MACjB7C,MAAOpH,EAAUoH,QAGzB9M,QAAQ6K,KAAK,sBAAuBgY,GAlCM,kBAmCnCA,GAnCmC,yCAqC1C7iB,QAAQ2F,MAAR,MArC0C,kBAsCnC,MAtCmC,6DCIlCod,QACW,cAA7BxiB,OAAOyiB,SAASC,UAEe,UAA7B1iB,OAAOyiB,SAASC,UAEhB1iB,OAAOyiB,SAASC,SAAS/H,MACvB,2D,8CCGN,8BAAA/X,EAAA,sEACUvC,IAAIsiB,KAAKC,aAAY,GAD/B,cAEI5iB,OAAO6iB,iBAAiB,SAAS,SAACC,GACd,QAAZA,EAAI9Y,MACJ8Y,EAAIC,iBAEQtP,GAAGuP,OAAOvY,MAClBwY,uBAET,GACHxjB,QAAQ6K,KAAK,eAAgBhJ,oHAVjC,SAWUuE,EAASqd,aAXnB,cAYIlK,EAAM/Z,OAAN,6BAAmC4G,EAASvB,aAA5C,OAZJ,SAa2BoL,EAAezG,iBAb1C,cAaU3K,EAbV,OAcImB,QAAQ6K,KAAK,YAAahM,GAC1B0a,EAAMzZ,YAAYjB,GAftB,UAgB4B6kB,KAhB5B,SAgBUhe,EAhBV,UAmBQU,EAASV,UAAYA,GAGzBie,IAASC,OACL,kBAAC,IAAD,CAAU7kB,MAAOwa,EAAMxa,OACnB,kBAAC,IAAM8kB,WAAP,KACI,kBAAC,GAAD,QAGR1jB,SAASC,eAAe,SAG5B0jB,GAAelE,QACXrG,EAAM/Z,QAhCd,6C,sBARAoB,IAAImjB,MAAMC,SAAS,OAAQ,CACvBC,OAAQ,OAAQC,OAAQ,OAAQC,OAAQ,OACxCC,OAAQ,UAAWC,OAAQ,UAAWC,OAAQ,UAAWC,OAAQ,UACjEC,OAAQ,UAAWC,QAAS,UAAWC,QAAS,UAChDC,OAAQ,UAAWC,QAAS,UAAWC,QAAS,YAEpD7kB,QAAQZ,IAAIwB,IAAImjB,MAAMe,MAAM,S,oCAsC5BC,GDkFM,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA3f,GACL3F,QAAQ2F,MAAMA,EAAMlG,a,iBEjJ5B/C,EAAOC,QAAUC,QAAQ,S,iBCAzBF,EAAOC,QAAUC,QAAQ,S,iBCAzBF,EAAOC,QAAUC,QAAQ,O,iBCAzBF,EAAOC,QAAUC,QAAQ,Y","file":"static/js/main.37e8f452.chunk.js","sourcesContent":["module.exports = require(\"crypto\");","module.exports = __webpack_public_path__ + \"static/media/consultation.1f2c06a3.svg\";","module.exports = require(\"events\");","module.exports = require(\"buffer\");","export default {\n    createUndefinedDate,\n    date2seconds,\n    formatDate,\n    isDefinedDate,\n    seconds2date\n}\n\nconst UNDEFINED_DATE_TIME = -30610224561000\n\nfunction isDefinedDate(date: any): date is Date {\n    if (date instanceof Date) {\n        return date.getTime() > UNDEFINED_DATE_TIME\n    }\n    return false\n}\n\n\nfunction createUndefinedDate(): Date {\n    return new Date(UNDEFINED_DATE_TIME)\n}\n\n\nfunction seconds2date(seconds: number): Date {\n    return new Date(seconds * 1000)\n}\n\n\nfunction date2seconds(date: Date): number {\n    const CONVERSION = 0.001\n    return Math.floor(date.getTime() * CONVERSION)\n}\n\nconst dateFormatter = new Intl.DateTimeFormat([\"fr-CM\"], {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n})\n\nfunction formatDate(date: Date): string {\n    return dateFormatter.format(date)\n}\n","import { createStore } from 'redux'\nimport DateUtil from '../date-util'\n\nimport {\n    IAppState, IPatientSummary, IStructure\n} from '../types'\n\nconst INITIAL_STATE: IAppState = {\n    consultationId: \"\",\n    page: \"patients\",\n    patient: {\n        id: \"\",\n        lastname: \"\",\n        firstname: \"\",\n        secondname: \"\",\n        gender: \"X\",\n        size: 0,\n        country: \"\",\n        birth: DateUtil.createUndefinedDate()\n    },\n    patients: [],\n    logs: []\n}\n\ntype IAction = \n    | IActionAddLog \n    | IActionSetPage \n    | IActionSetPatients \n    | IActionSetPatient \n    | IActionSetConsultationId\n\ninterface IActionAddLog {\n    type: \"add-log\",\n    log: string\n}\n\ninterface IActionSetPage {\n    type: \"set-page\",\n    page: string\n}\n\ninterface IActionSetPatients {\n    type: \"set-patients\",\n    patients: IPatientSummary[]\n}\n\ninterface IActionSetPatient {\n    type: \"set-patient\",\n    patient: IPatientSummary\n}\n\ninterface IActionSetConsultationId {\n    type: \"set-consultation-id\",\n    consultationId: string\n}\n\nconst store = createStore<IAppState, IAction, unknown, unknown>(reducer)\n\nfunction reducer(\n    state: IAppState | undefined = INITIAL_STATE,\n    action: IAction\n): IAppState {\n    switch (action.type) {\n        case 'add-log':\n            return { \n                ...state, \n                logs: [action.log, ...state.logs].splice(0, 1024) \n            }\n        case 'set-consultation-id':\n            return { ...state, consultationId: action.consultationId }\n        case 'set-page':\n            return { ...state, page: action.page }\n        case 'set-patient':\n            return { ...state, patient: action.patient }\n        case 'set-patients':\n            return { ...state, patients: action.patients }\n        default:\n            return state\n    }\n}\n\nexport default {\n    store,\n    clearPatient() {\n        const patient: IPatientSummary = {\n            id: \"\", firstname: \"\", secondname: \"\", lastname: \"\",\n            birth: new Date(),\n            country: \"\", gender: \"\", size: 0\n        }\n        dispatch({ type: \"set-patient\", patient })\n    },\n    addLog(message: string) {\n        dispatch({ type: \"add-log\", log: message })\n    },\n    setConsultationId(uuid: string) {\n        dispatch({ type: \"set-consultation-id\", consultationId: uuid })\n    },\n    setPage(page: string) {\n        dispatch({ type: \"set-page\", page })\n    },\n    setPatient(patient: IPatientSummary) {\n        dispatch({ type: \"set-patient\", patient })\n    },\n    setPatients(patients: IPatientSummary[]) {\n        dispatch({ type: \"set-patients\", patients })\n    }\n}\n\nfunction dispatch(param: IAction) {\n    console.trace(\"DISPATCH\", param)\n    store.dispatch(param)\n}\n","import \"./splash.css\"\n\nexport default {\n    hide() {\n        const splash = document.getElementById(\"splash-screen\")\n        if (!splash) return\n        splash.classList.add(\"vanish\")\n        const VANISHING_DELAY = 1000\n        window.setTimeout(\n            () => document.body.removeChild(splash),\n            VANISHING_DELAY\n        )\n    }\n}\n","import Tfw from 'tfw'\n\nconst _ = Tfw.Intl.make(require(\"./translate.json\"))\n\nexport default {\n    get addPatient() { return _('add-patient') },\n    get back() { return _('back') },\n    get birthday() { return _('birthday') },\n    get cancel() { return _('cancel') },\n    get clickToEdit() { return _('click-to-edit')},\n    get close() { return _('close') },\n    get code() { return _('code') },\n    get confirmDeletePatient() { return _('confirm-patient-delete') },\n    get consultationDate() { return _('consultation-date') },\n    get consultation() { return _('consultation') },\n    get consultations() { return _('consultations') },\n    get consultationsCount() { return _('consultations-count') },\n    get country() { return _('country') },\n    get dateMin() { return _('date-min') },\n    get dateMax() { return _('date-max') },\n    get deletePatient() { return _('delete-patient') },\n    get editPatient() { return _('edit-patient') },\n    get executeQuery() { return _('execute-query') },\n    get extractions() { return _('extractions') },\n    get filter() { return _('filter') },\n    get firstName() { return _('firstname') },\n    get gender() { return _('gender') },\n    genderValue(type: string) {\n        switch (type.trim().toUpperCase()) {\n            case 'M': return _('gender-male')\n            case 'F': return _('gender-female')\n            default: return _('gender-undefined')\n        }\n    },\n    get identifier() { return _('identifier') },\n    get importPatients() { return _('import-patients') },\n    get lastName() { return _('lastname') },\n    get loading() { return _('loading') },\n    get logout() { return _('logout') },\n    get newConsultation() { return _('new-consultation') },\n    get ok() { return _('ok') },\n    get patients() { return _('patients') },\n    get patientsCount() { return _('patients-count') },\n    get prescriptions() { return _('prescriptions') },\n    get secondName() { return _('secondname') },\n    get size() { return _('size') },\n    get struct() { return _('struct') },\n    get vaccinDate() { return _('vaccin-date') },\n    get vaccinLot() { return _('vaccin-lot') },\n    get vaccins() { return _('vaccins') },\n    get warningConsultationDate() { return _('warning-consultation-date') },\n}\n","const path = require('path')\nconst fs = require('fs')\nconst _0777 = parseInt('0777', 8)\n\nexport default function mkdirP(p: string, opts: any, f?: any, made?: any) {\n    if (typeof opts === 'function') {\n        f = opts;\n        opts = {};\n    }\n    else if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n\n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n\n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    var cb = f || function() { };\n    p = path.resolve(p);\n\n    xfs.mkdir(p, mode, function(er: any) {\n        if (!er) {\n            made = made || p;\n            return cb(null, made);\n        }\n        switch (er.code) {\n            case 'ENOENT':\n                mkdirP(path.dirname(p), opts, function(er: any, made: any) {\n                    if (er) cb(er, made);\n                    else mkdirP(p, opts, cb, made);\n                });\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                xfs.stat(p, function(er2: any, stat: any) {\n                    // if the stat fails, then that's super weird.\n                    // let the original error be the failure reason.\n                    if (er2 || !stat.isDirectory()) cb(er, made)\n                    else cb(null, made);\n                });\n                break;\n        }\n    });\n}\n\nmkdirP.sync = function sync(p: any, opts: any, made: any) {\n    if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n\n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n\n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    p = path.resolve(p);\n\n    try {\n        xfs.mkdirSync(p, mode);\n        made = made || p;\n    }\n    catch (err0) {\n        switch (err0.code) {\n            case 'ENOENT':\n                made = sync(path.dirname(p), opts, made);\n                sync(p, opts, made);\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                var stat;\n                try {\n                    stat = xfs.statSync(p);\n                }\n                catch (err1) {\n                    throw err0;\n                }\n                if (!stat.isDirectory()) throw err0;\n                break;\n        }\n    }\n\n    return made;\n};\n","import mkdirp from './mkdirp'\n\nconst FS = window.require('fs')\nconst Path = window.require('path')\n\nexport default { deleteFolder, exists, readText, writeText }\n\nconst ROOT = Path.resolve(process.cwd(), \"data\")\n\ninterface IDirectoryEntry {\n    name: string\n    isFile(): boolean\n    isDirectory(): boolean\n}\n\nfunction exists(filename: string): boolean {\n    const fullPath = Path.resolve(ROOT, filename)\n    return FS.existsSync(fullPath)\n}\n\n/**\n * Read text file in \"data/\" folder.\n */\nfunction readText(filename: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const fullPath = Path.resolve(ROOT, filename)\n        FS.readFile(fullPath, 'utf-8', (err: any, data: any) => {\n            if (err) {\n                reject(err)\n            } else {\n                resolve(data)\n            }\n        })\n    })\n}\n\n\n/**\n * Write text file in \"data/\" folder.\n */\nfunction writeText(filename: string, content: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const fullPath = Path.resolve(ROOT, filename)\n        const dirname = Path.dirname(fullPath)\n        mkdirp(dirname, (err: any) => {\n            if (err) reject(err)\n            else FS.writeFile(fullPath, content, 'utf-8', (err: any, data: any) => {\n                if (err) reject(err)\n                else resolve(data)\n            })\n        })\n    })\n}\n\n\nfunction deleteFolder(foldername: string): Promise<void> {\n    return new Promise(async (resolve, reject) => {\n        const fullPath = Path.resolve(ROOT, foldername)\n        await removeDirectory(fullPath)\n    })\n}\n\n\nfunction removeDirectory(path: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n        FS.readdir(\n            path, {\n                withFileTypes: true\n            },\n            async (err: any, entries: IDirectoryEntry[]) => {\n                if (err) {\n                    return reject(err)\n                }\n                for (const entry of entries) {\n                    const filename = Path.resolve(path, entry.name)\n                    if (entry.isFile()) {\n                        try {\n                            await removeFile(filename)\n                        }\n                        catch (ex) {\n                            reject(ex)\n                            return\n                        }\n                    }\n                    else {\n                        removeDirectory(filename)\n                    }\n                }\n                FS.rmdir(path, (err: any) => {\n                    if (err) reject(err)\n                })\n                resolve()\n            }\n        )\n    })\n}\n\n\nfunction removeFile(path: string): Promise<void> {\n    return new Promise((resolve, reject) => {\n        FS.unlink(path, (err: any) => {\n            if (err) reject(err)\n            else resolve()\n        })\n    })\n}\n","import Tfw from 'tfw'\nimport FileSystem from '../service/file-system'\nimport { IStructure } from '../types'\n\nconst SAVE_DEBOUNCING_DELAY = 300\n\ninterface ISettings {\n    remoteServer: string\n    secretCode: string\n    organizationId: number\n    structureId: number\n    structure?: IStructure\n}\n\nconst DATA: ISettings = {\n    remoteServer: \"https://web-soins.com\",\n    secretCode: \"kAcGObgfMr\",\n    organizationId: 1,\n    structureId: 1\n}\n\nclass Settings {\n    private readonly data: ISettings\n    constructor() {\n        this.data = DATA\n    }\n\n    async initialize(): Promise<boolean> {\n        try {\n            const content = await FileSystem.readText(\"settings.json\")\n            const data = JSON.parse(content)\n\n            if (typeof data.remoteServer !== 'string')\n                throw Error(\"Attribute remoteServer must be a string!\")\n            if (typeof data.secretCode !== 'string')\n                throw Error(\"Attribute secretCode must be a string!\")\n            if (typeof data.organizationId !== 'number')\n                throw Error(\"Attribute organizationId must be a number!\")\n            if (typeof data.structureId !== 'number')\n                throw Error(\"Attribute structureId must be a number!\")\n\n            DATA.remoteServer = data.remoteServer\n            DATA.secretCode = data.secretCode\n            DATA.organizationId = data.organizationId\n            DATA.structureId = data.structureId\n            DATA.structure = data.structure\n\n            return true\n        } catch (ex) {\n            console.error(\"Unable to load settings.json!\")\n            console.error(ex)\n            return false\n        }\n    }\n\n    get remoteServer(): string {\n        return process.env.REACT_APP_WEBSOINS === 'DEV'\n            ? \"http://localhost:7474/web-soins/\"\n            : this.data.remoteServer\n    }\n    set remoteServer(v: string) {\n        this.data.remoteServer = v\n        this.save()\n    }\n    get secretCode(): string { return this.data.secretCode }\n    set secretCode(v: string) {\n        this.data.secretCode = v\n        this.save()\n    }\n    get organizationId(): number { return this.data.organizationId }\n    set organizationId(v: number) {\n        this.data.organizationId = v\n        this.save()\n    }\n    get structureId(): number { return this.data.structureId }\n    set structureId(v: number) {\n        this.data.structureId = v\n        this.save()\n    }\n    get structure(): IStructure | undefined { return this.data.structure }\n    set structure(v: IStructure | undefined) {\n        this.data.structure = v\n        this.save()\n    }\n\n    save = Tfw.Async.Debouncer(() => {\n        FileSystem.writeText(\"settings.json\", JSON.stringify(this.data))\n    }, SAVE_DEBOUNCING_DELAY)\n}\n\nexport default new Settings()\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport Settings from '../../settings'\nimport DateUtil from '../../date-util'\nimport { IPatientSummary } from \"../../types\"\n\n\nimport \"./patient-short-desc.css\"\n\ninterface IPatientShortDescProps {\n    className?: string | string[]\n    patient?: IPatientSummary\n}\ninterface IPatientShortDescState { }\n\nexport default class PatientShortDesc extends React.Component<IPatientShortDescProps, IPatientShortDescState> {\n    state = {}\n\n    render() {\n        const classes = [\n            'view-PatientShortDesc',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const { patient } = this.props\n        if (!patient) return null\n        const structure = Settings.structure\n        if (!structure) return null\n        const today = new Date()\n        const age = 1 + today.getFullYear() - patient.birth.getFullYear()\n\n        return (\n            <div\n                className={classes.join(' ')}\n                title={patient.id}\n            >\n                <span className=\"lastname\">{patient.lastname.toUpperCase()}</span>\n                <span className=\"firstname\">{patient.firstname}</span>\n                {\n                    hasSecondName(patient) &&\n                    <span className=\"secondname\">{patient.secondname}</span>\n                }\n                {\n                    DateUtil.isDefinedDate(patient.birth) &&\n                    <span className=\"age\">{age} <em>ans</em></span>\n                }\n                {\n                    patient.size > 0 &&\n                    <span className=\"size\">{patient.size} <em>cm</em></span>\n                }\n            </div>\n        )\n    }\n}\n\n\nfunction hasSecondName(patient: IPatientSummary): boolean {\n    const { secondname } = patient\n    if (typeof secondname !== 'string') return false\n    if (secondname.trim().length === 0) return false\n    if (secondname.trim().toLowerCase() === 'undefined') return false\n    return true\n}\n","import { v4 as UuidV4 } from \"uuid\"\n\nexport default {\n    create() {\n        return UuidV4()\n    }\n}\n","import Tfw from 'tfw'\nimport Guid from '../guid'\nimport DateUtil from '../date-util'\nimport { IPatient, IPatientSummary, IConsultation, IRecord } from '../types'\n\nexport default {\n    createPatientFromSummary,\n    getAllConsultationsBefore,\n    getConsultationFromUuid,\n    getSummary,\n    getSummaryFromRecord,\n    removeConsultation,\n    setSummary,\n    updateConsultation\n}\n\nfunction getConsultationFromUuid(patient: IPatient, consultationId: string): IConsultation | null {\n    for (const admission of patient.admissions) {\n        for (const consultation of admission.visits) {\n            if (consultation.uuid === consultationId) {\n                return consultation\n            }\n        }\n    }\n    console.warn(`No consultation found for Patient ${patient.id} with Id ${consultationId}!`)\n    return null\n}\n\n\nfunction getSummary(patient: IPatient): IPatientSummary {\n    patient.data.id = patient.id\n    return getSummaryFromRecord(patient.data)\n}\n\n/**\n * Update patient with a new summary.\n */\nfunction setSummary(patient: IPatient, patientSummary: IPatientSummary) {\n    patient.data[\"#PATIENT-BIRTH\"] = DateUtil.date2seconds(patientSummary.birth)\n    patient.data[\"#PATIENT-COUNTRY\"] = patientSummary.country\n    patient.data[\"#PATIENT-FIRSTNAME\"] = patientSummary.firstname\n    patient.data[\"#PATIENT-SECONDNAME\"] = patientSummary.secondname\n    patient.data[\"#PATIENT-LASTNAME\"] = patientSummary.lastname\n    patient.data[\"#PATIENT-GENDER\"] = patientSummary.gender\n    patient.data[\"#PATIENT-SIZE\"] = patientSummary.size\n}\n\nfunction getSummaryFromRecord(record: IRecord): IPatientSummary {\n    const summary: IPatientSummary = {\n        id: record.id,\n        birth: DateUtil.seconds2date(\n            Tfw.Converter.Integer(\n                record[\"#PATIENT-BIRTH\"]\n            )\n        ),\n        country: `${record[\"#PATIENT-COUNTRY\"]}`,\n        firstname: Tfw.Transform.normalizeName(\n            `${record[\"#PATIENT-FIRSTNAME\"]}`\n        ),\n        gender: Tfw.Converter.Enum<string>(\n            record[\"#PATIENT-GENDER\"],\n            [\"#F\", \"#M\", \"#X\"],\n            \"#X\"\n        ),\n        lastname: Tfw.Transform.upperCase(\n            `${record[\"#PATIENT-LASTNAME\"]}`\n        ),\n        secondname: Tfw.Transform.normalizeName(\n            `${record[\"#PATIENT-SECONDNAME\"]}`\n        ),\n        size: Tfw.Converter.Integer(\n            record[\"#PATIENT-SIZE\"]\n        )\n    }\n    return summary\n}\n\nfunction createPatientFromSummary(summary: IPatientSummary): IPatient {\n    const id = Guid.create()\n    const now = DateUtil.date2seconds(new Date())\n    return {\n        id,\n        admissions: [],\n        created: now,\n        attachments: [],\n        data: {\n            id,\n            \"#PATIENT-LASTNAME\": summary.lastname,\n            \"#PATIENT-FIRSTNAME\": summary.firstname,\n            \"#PATIENT-SECONDNAME\": summary.secondname,\n            \"#PATIENT-BIRTH\": DateUtil.date2seconds(summary.birth),\n            \"#PATIENT-GENDER\": summary.gender,\n            \"#PATIENT-COUNTRY\": summary.country,\n            \"#PATIENT-SIZE\": summary.size,\n        },\n        edited: now,\n        exams: [],\n        picture: null,\n        vaccins: {}\n    }\n}\n\nfunction updateConsultation(patient: IPatient, newConsultation: IConsultation): IPatient {\n    for (const admission of patient.admissions) {\n        for (const consultation of admission.visits) {\n            if (consultation.uuid !== newConsultation.uuid) continue\n            consultation.version = 1 + Math.max(\n                consultation.version, newConsultation.version)\n            consultation.enter = newConsultation.enter\n            consultation.data = { ...newConsultation.data }\n            return patient\n        }\n    }\n\n    return patient\n}\n\nfunction removeConsultation(patient: IPatient, consultationId: string): IPatient {\n    for (const admission of patient.admissions) {\n        admission.visits = admission.visits.filter(\n            consultation => consultation.uuid !== consultationId\n        )\n    }\n    return patient\n}\n\nfunction getAllConsultationsBefore(patient: IPatient, timeInSeconds: number): IConsultation[] {\n    const consultations: IConsultation[] = []\n    for (const admission of patient.admissions) {\n        for (const consultation of admission.visits) {\n            if (consultation.enter < timeInSeconds) {\n                consultations.push(consultation)\n            }\n        }\n    }\n\n    // Sort then with the more recent first.\n    consultations.sort(\n        (c1: IConsultation, c2: IConsultation) => c2.enter - c1.enter\n    )\n\n    return consultations\n}\n","/**\n * Patients files are stored locally in the \"data/\" directory.\n * This folder contains an index file named \"patients.json\"\n * which type is IPatientsFile.\n *\n * Every patient has a unique id which is used as folder's name\n * to store the file \"patient.json\" of type IPatient.\n */\n\n\nimport { IPatient, IPatientSummary, IRecord, IConsultation } from '../types'\nimport FileSystem from \"./file-system\"\nimport PatientManager from '../manager/patient'\nimport Guid from '../guid'\n\nexport default {\n    deletePatient,\n    getAllPatients, getPatient, getPatientFolder, getSummary,\n    exists, setPatient\n}\n\ninterface IPatientsFile {\n    count: number,\n    records: { [key: string]: IRecord }\n}\n\nconst ROOT_DIRECTORY = '.'\nconst PATIENTS_FILENAME = `${ROOT_DIRECTORY}/patients.json`\n\nconst PATIENTS = new Map<string, IPatient>()\n\n/**\n * @return A list of all the patients summaries.\n */\nasync function getAllPatients(): Promise<IPatientSummary[]> {\n    try {\n        const patientsFile = await loadPatientsFile()\n        const listToSort: Array<[string, string, IRecord]> =\n            Object.keys(patientsFile.records)\n                .map(key => patientsFile.records[key])\n                .map((record: IRecord) => {\n                    const { id } = record\n                    const label = `${\n                        record[\"#PATIENT-LASTNAME\"]\n                        }\\t${\n                        record[\"#PATIENT-FIRSTNAME\"]\n                        }\\t${\n                        record[\"#PATIENT-SECONDNAME\"]\n                        }`\n                    return [id, label, record]\n                })\n        const sortedList = listToSort.sort((a: any[], b: any[]) => {\n            const [A] = a\n            const [B] = b\n            if (A < B) return -1\n            if (A > B) return +1\n            return 0\n        })\n        return sortedList\n            .map(item => item[2])\n            .map(PatientManager.getSummaryFromRecord)\n    }\n    catch (ex) {\n        console.error(`Unable to load \"${PATIENTS_FILENAME}\"!`, ex)\n        return []\n    }\n}\n\n\nfunction exists(id: string): boolean {\n    const patientFilename = `${ROOT_DIRECTORY}/${id}/patient.json`\n    return FileSystem.exists(patientFilename)\n}\n\nasync function getPatient(id: string, path = \".\"): Promise<IPatient> {\n    try {\n        console.info(\"getPatient() id=\", id)\n        if (PATIENTS.has(id)) {\n            const cachedPatient = PATIENTS.get(id) as IPatient\n            console.log(`Found Patient #${id} in cache!`, cachedPatient)\n            return cachedPatient\n        }\n        const patientContent = await FileSystem.readText(\n            `${path}/${id}/patient.json`)\n        const patient = JSON.parse(patientContent) as IPatient\n        sanitizePatient(patient)\n        PATIENTS.set(id, patient)\n        console.log(\"Loaded patient: \", patient)\n        return patient\n    }\n    catch (ex) {\n        console.error(`Unable to load patient #${id}!`, ex)\n        throw ex\n    }\n}\n\n\n/**\n * Store the patient to disk.\n * If such a patient already exist, it will be overwritten.\n */\nasync function setPatient(patient: IPatient): Promise<IPatient> {\n    try {\n        const patientContent = JSON.stringify(sanitizePatient(patient))\n        addUniqueIdIfMissing(patient)\n        await FileSystem.writeText(`./${patient.id}/patient.json`, patientContent)\n        const patientsFile = await loadPatientsFile()\n        addPatientToPatientsFile(patient, patientsFile)\n        await savePatientsFile(patientsFile)\n\n        const id = patient.id\n        if (PATIENTS.has(id)) {\n            PATIENTS.delete(id)\n        }\n        PATIENTS.set(id, patient)\n\n        return patient\n    }\n    catch (ex) {\n        console.error(`Unable to save patient #${patient.id}!`, ex)\n        throw ex\n    }\n}\n\n/**\n * Return the folder of a specific patient.\n * Can be used to store patient prescriptions documents, for instance.\n */\nfunction getPatientFolder(id: string, path = \".\"): string {\n    return `${path}/data/${id}/`\n}\n\nasync function deletePatient(patientId: string) {\n    try {\n        const patientsFile = await loadPatientsFile()\n        removePatientFromPatientsFile(patientId, patientsFile)\n        await savePatientsFile(patientsFile)\n        await FileSystem.deleteFolder(`./${patientId}`)\n        if (PATIENTS.has(patientId)) {\n            PATIENTS.delete(patientId)\n        }\n    }\n    catch (ex) {\n        console.error(`Unable to delete patient #${patientId}!`, ex)\n        throw ex\n    }\n}\n\n\nfunction getSummary(patient: IPatient): IPatientSummary {\n    return PatientManager.getSummary(patient)\n}\n\n\n/**\n * If \"patient.id\" is missing, create a new unique one.\n */\nfunction addUniqueIdIfMissing(patient: IPatient) {\n    if (typeof patient.id === 'string' && patient.id.length > 0) return\n    patient.id = Guid.create()\n}\n\n\nasync function loadPatientsFile(): Promise<IPatientsFile> {\n    try {\n        const patientsFileContent = await FileSystem.readText(PATIENTS_FILENAME)\n        return JSON.parse(patientsFileContent) as IPatientsFile\n    } catch (ex) {\n        const file: IPatientsFile = {\n            count: 0,\n            records: {}\n        }\n        return file\n    }\n}\n\n\nasync function savePatientsFile(patientsFile: IPatientsFile) {\n    await FileSystem.writeText(PATIENTS_FILENAME, JSON.stringify(patientsFile))\n}\n\n\nfunction addPatientToPatientsFile(patient: IPatient, patientsFile: IPatientsFile) {\n    patientsFile.records[patient.id] = {\n        ...patient.data,\n        id: patient.id\n    }\n}\n\n\nfunction removePatientFromPatientsFile(patientId: string, patientsFile: IPatientsFile) {\n    delete patientsFile.records[patientId]\n}\n\n\nfunction sanitizePatient(patient: IPatient): IPatient {\n    for (const admission of patient.admissions) {\n        for (const consultation of admission.visits) {\n            if (\n                typeof consultation.uuid !== 'string'\n                || consultation.uuid.length === 0\n            ) {\n                consultation.uuid = Guid.create()\n            }\n            if (typeof consultation.version !== 'number') {\n                consultation.version = 1\n            }\n        }\n    }\n    return patient\n}\n","import Tfw from 'tfw'\r\nimport Settings from '../../settings'\r\nimport { IStructure, IPatientField } from \"../../types\"\r\n\r\nconst Intl = Tfw.Intl\r\n\r\nexport default {\r\n    createPatientsFieldsFromStructure,\r\n    createPatientsFieldsCaptionsFromStructure,\r\n    getCurrentStructure,\r\n    getFieldCaption,\r\n    getValueCaption\r\n}\r\n\r\nfunction getCurrentStructure(): IStructure {\r\n    const structure = Settings.structure\r\n    if (!structure) throw Error(\"Structure has not been initialized yet!\")\r\n    return structure\r\n}\r\n\r\nfunction createPatientsFieldsFromStructure(): { [key: string]: boolean } {\r\n    const structure = getCurrentStructure()\r\n    const patientsFields: { [key: string]: boolean } = {};\r\n    structure.patientFields.forEach((patientField: IPatientField) => {\r\n        patientsFields[patientField.id] = true;\r\n    });\r\n    return patientsFields;\r\n}\r\n\r\nfunction createPatientsFieldsCaptionsFromStructure(): { [key: string]: string } {\r\n    const structure = getCurrentStructure()\r\n    const patientsFieldsCaptions: { [key: string]: string } = {};\r\n    structure.patientFields.forEach((patientField: IPatientField) => {\r\n        patientsFieldsCaptions[patientField.id] = Intl.toText(patientField.caption);\r\n    });\r\n    return patientsFieldsCaptions;\r\n}\r\n\r\n/**\r\n * Return the caption of a field, given its key or caption.\r\n */\r\nfunction getFieldCaption(fieldKey: string): string {\r\n    const structure = getCurrentStructure()\r\n    if (fieldKey.charAt(0) !== '#') return fieldKey;\r\n    const item: { caption: string, type: string } | undefined =\r\n        structure.formFields[fieldKey];\r\n    if (!item) return fieldKey;\r\n    return Intl.toText(item.caption);\r\n}\r\n\r\nfunction getValueCaption(typeKey: string | undefined, valueKey: string): string {\r\n    if (!typeKey) {\r\n        // If no type, return the value as is.\r\n        return valueKey\r\n    }\r\n    const structure = getCurrentStructure()\r\n    const types = structure.types\r\n    const type = types[typeKey]\r\n    if (!type) return valueKey\r\n\r\n    for (const subType of Object.values(type.children)) {\r\n        const caption = subType.caption\r\n        if (!caption) continue\r\n        if (subType.id === valueKey) {\r\n            return subType.caption || valueKey\r\n        }\r\n    }\r\n    return valueKey\r\n}\r\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport StructureManager from '../../../manager/structure'\nimport Settings from '../../../settings'\nimport { IStructure } from \"../../../types\"\n\n\nimport \"./text.css\"\n\nconst Input = Tfw.View.Input\n\ninterface ITextProps {\n    className?: string | string[]\n    label?: string\n    wide?: boolean\n    type: string\n    width?: string\n    value: string\n    onChange(value: string): void\n}\ninterface ITextState { }\n\nexport default class Text extends React.Component<ITextProps, ITextState> {\n    state = {}\n\n    private handleChange = (value: string) => {\n        const structure = Settings.structure\n        if (!structure) return null\n        this.props.onChange(getTypeKey(structure, this.props.type, value))\n    }\n\n    render() {\n        const classes = [\n            'view-field-Text',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const structure = Settings.structure\n        if (!structure) return null\n\n        const type = this.props.type\n        const value = this.props.value\n        const suggestions = getSuggestionsForType(structure, type)\nconsole.log(\"<Text>.render()\")\n        return <Input\n            className={classes.join(\" \")}\n            label={this.props.label}\n            wide={this.props.wide}\n            width={this.props.width}\n            value={StructureManager.getValueCaption(type ,value)}\n            suggestions={suggestions}\n            onChange={this.handleChange}\n        />\n    }\n}\n\n\nfunction getSuggestionsForType(structure: IStructure, typeName: string): string[] {\n    const types = structure.types\n    const type = types[typeName]\n    if (!type) return []\n    const subTypes = Object.values(type.children)\n    return subTypes\n        .map(t => t.caption)\n        .filter(t => typeof t === \"string\") as string[]\n}\n\n\nfunction getTypeKey(\n    structure: IStructure,\n    typeName: string,\n    value: string\n): string {\n    const types = structure.types\n    const type = types[typeName]\n    if (!type) return value\n    const normalizedValue = value.trim().toLowerCase()\n    for (const subType of Object.values(type.children)) {\n        const caption = subType.caption\n        if (!caption) continue\n        if (caption.toLowerCase() === normalizedValue) {\n            return subType.id\n        }\n    }\n    return value\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport DateUtil from '../../date-util'\nimport Settings from '../../settings'\nimport TextField from '../field/text'\nimport PatientManager from '../../manager/patient'\nimport StructureManager from '../../manager/structure'\nimport { IPatient, IFormField, IFormFields, IConsultation } from \"../../types\"\n\n\nimport \"./consultation-form.css\"\n\nconst Expand = Tfw.View.Expand\nconst Checkbox = Tfw.View.Checkbox\nconst InputDate = Tfw.View.InputDate\n\ninterface IConsultationFormProps {\n    className?: string | string[]\n    patient: IPatient\n    // This object is mutable and will be modified by this component.\n    // It must be a copy of the original consultation because\n    // the editing can be cancelled.\n    consultation: IConsultation\n}\ninterface IConsultationFormState { }\n\nexport default class ConsultationForm extends React.Component<IConsultationFormProps, IConsultationFormState> {\n    state = {}\n\n    private getFieldValue(field: IFormField, overrideConsultation: IConsultation | null = null): string {\n        const consultation = overrideConsultation || this.props.consultation\n        if (!consultation) return \"\"\n        const { data } = consultation\n        if (!data) return \"\"\n        if (!data[field.id]) return \"\"\n        return StructureManager.getValueCaption(field.type, data[field.id])\n    }\n\n    private getFieldValueAsBoolean(field: IFormField): boolean {\n        const value = this.getFieldValue(field)\n        return Tfw.Converter.Enum<string>(\n            value,\n            [\"#YES\", \"#TRUE\"],\n            \"#FALSE\"\n        ) !== \"#FALSE\"\n    }\n\n    /**\n     * @return number of milliseconds since Epoc.\n     */\n    private getFieldValueAsDate(field: IFormField): number {\n        const value = this.getFieldValue(field)\n        return s2ms(Tfw.Converter.Integer(value))\n    }\n\n    private renderFields(fields: IFormFields) {\n        return Object.keys(fields).map(\n            name => {\n                const field = fields[name]\n                if (!field) return null\n                return this.renderField(field)\n            }\n        )\n    }\n\n    private renderField(field: IFormField) {\n        if (hasChildren(field)) {\n            return <Expand\n                key={field.id}\n                label={field.caption}\n                value={false}\n                className=\"thm-ele-button\"\n            >\n                {this.renderFields(field.children)}\n            </Expand>\n        }\n\n        if (field.id === '#CONSULTATION-DATE') {\n            console.warn(\"We have ignore an old field because of it's id: \", field)\n            return null\n        }\n\n        const { consultation } = this.props\n        const prevConsultations = PatientManager.getAllConsultationsBefore(\n            this.props.patient,\n            consultation.enter\n        )\n\n        if (isBool(field)) {\n            return <div\n                key={field.id}\n                className=\"field\"\n                title={field.id}\n            >\n                <Checkbox\n                    wide={false}\n                    label={field.caption}\n                    value={this.getFieldValueAsBoolean(field)}\n                    onChange={(value: boolean) => this.updateBooleanField(field, value)}\n                />\n                {prevConsultations.map(this.renderPrevConsultation.bind(this, field))}\n            </div>\n        }\n\n        if (field.tags.indexOf(\"DATE\") > -1) {\n            return <div\n                key={field.id}\n                className=\"field\"\n                title={field.id}\n            >\n                <InputDate\n                    label={field.caption}\n                    value={this.getFieldValueAsDate(field)}\n                    wide={false}\n                    onChange={\n                        (value: number) => this.updateField(field, `${ms2s(value)}`)\n                    }\n                />\n                {prevConsultations.map(this.renderPrevConsultation.bind(this, field))}\n            </div>\n        }\n\n        return <div\n            key={field.id}\n            className=\"field\"\n            title={field.id}\n        >\n            <TextField\n                label={field.caption}\n                value={this.getFieldValue(field)}\n                type={field.type || \"\"}\n                width=\"15rem\"\n                wide={false}\n                onChange={(value: string) => this.updateField(field, value)}\n            />\n            {prevConsultations.map(this.renderPrevConsultation.bind(this, field))}\n        </div>\n    }\n\n    /**\n     * We want to show the values of previous consultations as well.\n     */\n    private renderPrevConsultation = (field: IFormField, consultation: IConsultation) => {\n        if (typeof consultation.data[field.id] === 'undefined') {\n            // This field does not exist.\n            return null\n        }\n        const value = this.getFieldValue(field, consultation)\n        return <div className=\"prev-field\" key={`pc-${consultation.enter}`}>\n            <div className=\"date\">{\n                DateUtil.formatDate(\n                    DateUtil.seconds2date(consultation.enter)\n                )\n            }</div>\n            <div className=\"value\">{value}</div>\n        </div>\n    }\n\n    private updateField = (field: IFormField, value: string) => {\n        const sanitizedValue = (value || \"\").trim()\n        const { consultation } = this.props\n        delete consultation.data[field.id]\n        if (sanitizedValue.length > 0) {\n            consultation.data[field.id] = sanitizedValue\n            console.info(\"consultation=\", consultation)\n        }\n    }\n\n    private updateBooleanField = (field: IFormField, value: boolean) => {\n        const { consultation } = this.props\n        delete consultation.data[field.id]\n        if (value) {\n            consultation.data[field.id] = \"#YES\"\n        }\n\n    }\n\n    render() {\n        const classes = [\n            'view-ConsultationForm',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const structure = Settings.structure\n        if (!structure) return null\n        const form = structure.forms\n\n        return (<div className={classes.join(' ')}>\n            {this.renderFields(form)}\n        </div>)\n    }\n}\n\n\n/**\n * If a field has children, it will be represented by an expander.\n */\nfunction hasChildren(field: IFormField): boolean {\n    if (!field.children) return false\n    const names = Object.keys(field.children)\n    return names.length > 0\n}\n\n\nfunction isBool(field: IFormField): boolean {\n    const { tags } = field\n    if (!Array.isArray(tags)) return false\n    for (const tag of tags) {\n        if (tag.trim().toUpperCase() === \"BOOL\") return true\n    }\n    return false\n}\n\nfunction ms2s(milliseconds: number): number {\n    const COEFF = 0.001\n    return milliseconds * COEFF\n}\n\nfunction s2ms(seconds: number): number {\n    const COEFF = 1000\n    return seconds * COEFF\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport DateUtil from '../../../date-util'\nimport Translate from '../../../translate'\nimport PatientShortDesc from '../../patient-short-desc'\nimport PatientManager from '../../../manager/patient'\nimport PatientService from '../../../service/patient'\nimport ConsultationForm from '../../consultation-form'\nimport { IPatient, IPatientSummary, IConsultation } from \"../../../types\"\n\n\nimport \"./consultation.css\"\n\nconst Button = Tfw.View.Button\nconst InputDate = Tfw.View.InputDate\n\ninterface IConsultationsProps {\n    className?: string | string[]\n    patientSummary: IPatientSummary\n    consultationId: string\n    // If a null consultation is given, that is a cancel opération.\n    onBack(consultation: IConsultation | null, patient?: IPatient): void\n}\ninterface IConsultationsState {\n    patient?: IPatient\n    consultation: IConsultation | null\n}\n\nexport default class Consultations extends React.Component<IConsultationsProps, IConsultationsState> {\n    private oldPatientSummary?: IPatientSummary\n    private oldConsultationId?: string\n    state: IConsultationsState = {\n        patient: undefined,\n        consultation: null\n    }\n\n    private refresh = async () => {\n        const { patientSummary } = this.props\n        if (patientSummary !== this.oldPatientSummary) {\n            this.oldPatientSummary = patientSummary\n            const patient = await PatientService.getPatient(patientSummary.id)\n            this.setState({ patient })\n        }\n        const { consultationId } = this.props\n        const { patient } = this.state\n        if (patient && consultationId !== this.oldConsultationId) {\n            this.oldConsultationId = consultationId\n            const consultation: IConsultation | null = copy(\n                PatientManager.getConsultationFromUuid(\n                    patient,\n                    consultationId\n                )\n            )\n            this.setState({ consultation })\n        }\n    }\n\n    componentDidMount = this.refresh\n    componentDidUpdate = this.refresh\n\n    private handleOK = () => {\n        this.props.onBack(this.state.consultation, this.state.patient)\n    }\n\n    private handleCancel = () => {\n        this.props.onBack(null)\n    }\n\n    private handleDataChange = (time: number) => {\n        const { consultation } = this.state\n        if (consultation) {\n            consultation.enter = Math.floor(time / 1000)\n        }\n    }\n\n    render() {\n        const classes = [\n            'view-page-Consultation',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const { patient, consultation } = this.state\n        if (!patient) return null\n        if (!consultation) return null\n        const patientSummary = PatientManager.getSummary(patient)\n        const consultationDate = DateUtil.seconds2date(\n            consultation.enter\n        )\n\n        return (<div className={classes.join(' ')}>\n            <header className=\"thm-bgPD thm-ele-nav\">\n                <div>\n                    <Button\n                        label={Translate.ok}\n                        icon=\"ok\"\n                        color=\"S\"\n                        onClick={this.handleOK}\n                    />\n                    <Button\n                        label={Translate.cancel}\n                        width=\"auto\"\n                        icon=\"cancel\"\n                        onClick={this.handleCancel}\n                    />\n                </div>\n                <div className=\"date\">{\n                    DateUtil.formatDate(consultationDate)\n                }</div>\n                <PatientShortDesc patient={patientSummary} />\n            </header>\n            <section>\n                <div className=\"consultation-date\">\n                    <InputDate\n                        label={Translate.consultationDate}\n                        value={consultation.enter * 1000}\n                        onChange={this.handleDataChange}\n                    />\n                    <p className=\"thm-bgSD\">{\n                        Translate.warningConsultationDate\n                    }</p>\n                </div>\n                <hr />\n                <ConsultationForm\n                    patient={patient}\n                    consultation={consultation}\n                />\n            </section>\n        </div>)\n    }\n}\n\n\nfunction copy(obj: IConsultation | null) {\n    if (!obj) return obj\n    return JSON.parse(JSON.stringify(obj))\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport Translate from '../../../../../translate'\nimport DateUtil from '../../../../../date-util'\nimport { IPatient, IAdmission, IConsultation } from \"../../../../../types\"\nimport ConsultationImage from './consultation.svg'\n\nimport \"./consultations.css\"\n\nconst Button = Tfw.View.Button\nconst Touchable = Tfw.View.Touchable\n\ninterface IConsultationsProps {\n    className?: string | string[]\n    patient?: IPatient\n    onConsultationClick(consultationId: string): void\n    onNewConsultationClick(): void\n}\n\nexport default class Consultations extends React.Component<IConsultationsProps, {}> {\n    private renderAdmission = (admission: IAdmission) => {\n        return <div className=\"admission\" key={admission.enter}>\n            {admission.visits.map(this.renderConsultation)}\n        </div>\n    }\n\n    private renderConsultation = (consultation: IConsultation) => {\n        const dat = DateUtil.seconds2date(consultation.enter)\n        return <Touchable\n            onClick={() => this.props.onConsultationClick(consultation.uuid)}\n            key={consultation.enter}\n            className=\"consultation thm-bgPD thm-ele-button\"\n        >\n            <img src={ConsultationImage} />\n            <div>\n                <div className=\"title\">{\n                    Translate.consultations\n                }</div>\n                <div className=\"date\">\n                    {DateUtil.formatDate(dat)}\n                </div>\n                <div className=\"hint\">{\n                    Translate.clickToEdit\n                }</div>\n            </div>\n        </Touchable>\n    }\n\n    render() {\n        const { patient } = this.props\n        if (!patient) return null\n\n        const classes = [\n            'view-page-patient-section-Consultations',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <Button\n                icon=\"add\"\n                width=\"auto\"\n                label={Translate.newConsultation}\n                onClick={() => this.props.onNewConsultationClick()}\n            />\n            <hr />\n            {\n                patient.admissions.length === 0 &&\n                <p>Ce-tte patient-e n'a pas encore consulté ici.</p>\n            }\n            {\n                patient.admissions\n                    .sort(sortByDateDesc)\n                    .map(this.renderAdmission)\n            }\n        </div>)\n    }\n}\n\n\nfunction sortByDateDesc(a: IAdmission, b: IAdmission) {\n    return b.enter - a.enter\n}","import React from \"react\"\nimport Tfw from 'tfw'\nimport JSZip from 'jszip'\nimport DateUtil from '../../../../../date-util'\nimport PatientService from '../../../../../service/patient'\nimport PatientManager from '../../../../../manager/patient'\nimport { IPatient, IStructure } from \"../../../../../types\"\n\nimport \"./prescriptions.css\"\n\nconst FS = require(\"fs\")\nconst Path = require(\"path\")\n\nconst Checkbox = Tfw.View.Checkbox\nconst Button = Tfw.View.Button\nconst Expand = Tfw.View.Expand\nconst Input = Tfw.View.Input\nconst Storage = new Tfw.Storage.PrefixedLocalStorage(\"web-soins-consultations/prescription\")\n\nconst MONTHES = [\n    'Janvier', 'Février', 'Mars', 'Avril',\n    'Mai', 'Juin', 'Juillet', 'Août',\n    'Septembre', 'Octobre', 'Novembre', 'Décembre'\n]\n\ninterface IPrescriptionsProps {\n    className?: string\n    patient?: IPatient\n    structure?: IStructure\n}\ninterface IPrescriptionsState {\n    prescripteur: string\n    service: string\n    selection: string[]\n}\n\nexport default class Prescriptions extends React.Component<IPrescriptionsProps, IPrescriptionsState> {\n    state: IPrescriptionsState = {\n        ...Storage.get(\"state\", {\n            prescripteur: \"\",\n            service: \"\"\n        }),\n        selection: []\n    }\n\n    private update = (newState: Partial<IPrescriptionsState>) => {\n        const state = {\n            ...this.state,\n            ...newState\n        }\n        this.setState(state)\n        Storage.set(\"state\", state)\n    }\n\n    private setItemSelection(itemKey: string, selected: boolean) {\n        const { selection } = this.state\n        const selectionWithoutItem = selection.filter((key: string) => key !== itemKey)\n        if (selected) {\n            this.setState({ selection: [...selectionWithoutItem, itemKey] })\n        } else {\n            this.setState({ selection: [...selectionWithoutItem] })\n        }\n    }\n\n    private renderSections(exams: { [key: string]: { [key: string]: string[] } }) {\n        return Object.keys(exams).map(\n            (sectionKey: string) => this.renderSection(\n                sectionKey,\n                exams[sectionKey]\n            )\n        )\n    }\n\n    private renderSection(sectionKey: string, section: { [key: string]: string[] }) {\n        const subSectionElements = Object.keys(section).map(\n            (subSectionKey: string) => {\n                const subSection = section[subSectionKey]\n                return <Expand\n                    key={`${sectionKey}\\n${subSectionKey}`}\n                    label={subSectionKey}\n                    value={false}\n                >{\n                        subSection.map((label: string) => this.renderCheckbox(\n                            sectionKey,\n                            subSectionKey,\n                            label\n                        ))\n                    }</Expand>\n            }\n        )\n        return [\n            <h1 key=\"sectionKey\">{sectionKey}</h1>,\n            ...subSectionElements\n        ]\n    }\n\n    private renderCheckbox(sectionKey: string, subSectionKey: string, label: string) {\n        const key = `${sectionKey}\\n${subSectionKey}\\n${label}`\n        const isSelected = this.state.selection.indexOf(key) !== -1\n        return <Checkbox\n            label={label}\n            wide={true}\n            value={isSelected}\n            onChange={(value: boolean) => this.setItemSelection(key, value)}\n        />\n    }\n\n    private handlePrint = async () => {\n        const { patient } = this.props\n        if (!patient) return \"\"\n        const pages: IPages = groupSelectionByPage(this.state.selection)\n        console.info(\"pages=\", pages)\n        const arch = new JSZip()\n        if (!arch) {\n            console.error(\"Unable to create JSZip object!\")\n            return\n        }\n        const content = await this.buildContent(pages)\n        console.info(\"content=\", content)\n        arch.folder(\"META-INF\")?.file(\"manifest.xml\", await loadFile(\"META-INF/manifest.xml\"))\n        arch.file(\"content.xml\", content)\n        arch.file(\"manifest.rdf\", await loadFile(\"manifest.rdf\"))\n        arch.file(\"meta.xml\", await loadFile(\"meta.xml\"))\n        arch.file(\"mimetype\", await loadFile(\"mimetype\"))\n        arch.file(\"settings.xml\", await loadFile(\"settings.xml\"))\n        arch.file(\"styles.xml\", await loadFile(\"styles.xml\"))\n        const now = new Date()\n        const filename = Path.resolve(\n            PatientService.getPatientFolder(patient.id),\n            `pres-${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}.odt`\n        )\n        console.info(\"filename=\", filename)\n        try {\n            const stream = arch.generateNodeStream(\n                {\n                    type: 'nodebuffer',\n                    streamFiles: true,\n                    compression: \"DEFLATE\",\n                    compressionOptions: { level: 9 },\n                    mimeType: \"application/vnd.oasis.opendocument.text\"\n                },\n                (metadata: { percent: number, currentFile: string }) => {\n                    console.log(\">\", metadata.currentFile, metadata.percent)\n                }\n            )\n            console.info(\"stream=\", stream)\n            stream.pipe(FS.createWriteStream(filename))\n                .on('error', (err: any) => {\n                    console.error(\"ERROR:\", err)\n                })\n                .on('finish', () => {\n                    console.log(\"File has been written to the disk.\")\n                    Tfw.Factory.Dialog.info(<div>\n                        <p>Le document a été généré avec succès et sauvegardé sur le disque :</p>\n                        <small><code>{filename}</code></small>\n                    </div>)\n                    nw.Shell.openItem(filename)\n                })\n        } catch (ex) {\n            console.error(\"Unable to create Zip archive!\")\n            console.error(ex)\n        }\n    }\n\n    async buildContent(pages: IPages): Promise<string> {\n        const { patient } = this.props\n        if (!patient) return \"\"\n        const summary = PatientManager.getSummary(patient)\n        const { service, prescripteur } = this.state\n\n        let out: string = await loadFile(\"content.head.xml\")\n        for (const page of pages) {\n            const [pageTitle, sections] = page\n            var today = new Date()\n            out += tag(\"text:p\", { \"text:style-name\": \"P18\" }, pageTitle)\n            out += tag('text:p', { 'text:style-name': 'P2' },\n                tag('text:span', { 'text:style-name': 'T5' }, \"Nom du patient : \"),\n                tag('text:span', { 'text:style-name': 'T3' }, summary.lastname),\n                tag('text:span', { 'text:style-name': 'T6' }, tag('text:tab')),\n                tag('text:span', { 'text:style-name': 'T5' }, \"Prénom : \"),\n                tag('text:span', { 'text:style-name': 'T3' }, summary.firstname));\n            out += tag('text:p', { 'text:style-name': 'P1' },\n                tag('text:span', { 'text:style-name': 'T5' }, \"Date de naissance : \"),\n                tag('text:span', { 'text:style-name': 'T3' }, DateUtil.formatDate(summary.birth)))\n            out += tag('text:p', { 'text:style-name': 'P4' })\n            out += tag('text:p', { 'text:style-name': 'P15' },\n                tag('text:span', { 'text:style-name': 'T5' },\n                    \"Date de demande de l'examen : \",\n                    tag('text:span', { 'text:style-name': 'T3' },\n                        today.getDate() + \" \"\n                        + MONTHES[today.getMonth()] + \" \"\n                        + today.getFullYear())));\n            out += tag('text:p', { 'text:style-name': 'P15' },\n                tag('text:span', { 'text:style-name': 'T5' },\n                    `Nom du prescripteur : ${prescripteur}`,\n                    tag('text:tab')));\n            out += tag('text:p', { 'text:style-name': 'P15' },\n                tag('text:span', { 'text:style-name': 'T5' },\n                    `Nom du service prescripteur de l'examen : ${service}`,\n                    tag('text:tab')));\n            out += tag('text:p', { 'text:style-name': \"Heading_20_2\" })\n            for (const section of sections) {\n                const [sectionTitle, exams] = section\n                out += tag(\"text:p\", { \"text:style-name\": \"Heading_20_2\" }, sectionTitle)\n                for (const exam of exams) {\n                    out += tag('text:list', { 'text:style-name': 'L1' },\n                        tag('text:list-item',\n                            tag('text:p', { 'text:style-name': 'P16' },\n                                `${exam} : ${tag('text:tab')}`)))\n                }\n            }\n        }\n\n        return `${out}${await loadFile('content.foot.xml')}`\n    }\n\n    render() {\n        const { patient, structure } = this.props\n        if (!patient || !structure) return null\n\n        const classes = [\n            'view-page-patient-section-Prescriptions',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <fieldset>\n                <legend className=\"thm-fgPL\">Liste des examens à prescrire</legend>\n                {\n                    this.renderSections(structure.exams)\n                }\n            </fieldset>\n            <Input\n                label=\"Nom du prescripteur\"\n                wide={true}\n                value={this.state.prescripteur}\n                onChange={prescripteur => this.update({ prescripteur })}\n            />\n            <Input\n                label=\"Nom du service prescripteur de l'examen\"\n                wide={true}\n                value={this.state.service}\n                onChange={service => this.update({ service })}\n            />\n            <Button\n                icon=\"print\"\n                width=\"auto\"\n                label=\"Préparer le document pour impression\"\n                onClick={this.handlePrint}\n            />\n        </div>)\n    }\n}\n\n\ntype ISection = [string, string[]]\ntype IPage = [string, ISection[]]\ntype IPages = IPage[]\n\n\nfunction groupSelectionByPage(selection: string[]): IPages {\n    const pages: IPages = []\n    const sortedSelection = [...selection].sort()\n\n    for (const key of sortedSelection) {\n        const [pageName, sectionName, examName] = key.split(\"\\n\")\n        const page = getPageElement(pages, pageName)\n        const [, sections] = page\n        const section = getSectionElement(sections, sectionName)\n        const [, exams] = section\n        exams.push(examName)\n    }\n\n    return pages\n}\n\n\nfunction getPageElement(pages: IPages, pageName: string): IPage {\n    for (const page of pages) {\n        const [currentPageName] = page\n        if (currentPageName === pageName) return page\n    }\n    const newPage: IPage = [pageName, []]\n    pages.push(newPage)\n    return newPage\n}\n\nfunction getSectionElement(sections: ISection[], sectionName: string): ISection {\n    for (const section of sections) {\n        const [currentSectionName] = section\n        if (currentSectionName === sectionName) return section\n    }\n    const newSection: ISection = [sectionName, []]\n    sections.push(newSection)\n    return newSection\n}\n\n\ninterface IAttributes { [key: string]: string }\n\nfunction tag(name: string, ...args: Array<string | IAttributes>) {\n    if (args.length === 0) return \"<\" + name + \"/>\"\n    if (args.length === 0 && typeof args[0] === 'string') return `<${name}>${args[0]}</${name}>`\n\n    let out = `<${name}`\n    let attribs: IAttributes = {}\n    let content = ''\n    for (const arg of args) {\n        if (typeof arg === 'string') content += arg\n        else attribs = arg\n    }\n\n    for (const key of Object.keys(attribs)) {\n        const val = attribs[key]\n        out += ` ${key}=${JSON.stringify(val)}`\n    }\n    if (content.length > 0) {\n        out += `>${content}</${name}>`\n    } else {\n        out += \"/>\"\n    }\n\n    return out\n}\n\n\nasync function loadFile(filename: string) {\n    return await Tfw.Util.loadTextFromURL(`doc/prescription/${filename}`)\n}","import React from \"react\"\nimport Tfw from 'tfw'\n\nimport DateUtil from \"../../../../../../date-util\"\nimport Translate from \"../../../../../../translate\"\n\n\nimport \"./vaccin-form.css\"\n\nconst Input = Tfw.View.Input\nconst InputDate = Tfw.View.InputDate\n\ninterface IVaccinFormProps {\n    className?: string\n    // Seconds since EPOC.\n    date: number\n    lot: string\n    onDateChange(date: number): void\n    onLotChange(lot: string): void\n}\n\nexport default class VaccinForm extends React.Component<IVaccinFormProps, {}> {\n    private handleLotChange = (lot: string) => {\n        this.props.onLotChange(lot)\n    }\n\n    private handleDateChange = (date: number) => {\n        this.props.onDateChange(\n            DateUtil.date2seconds(new Date(date))\n        )\n    }\n\n    render() {\n        const classes = [\n            'view-page-patient-section-vaccins-VaccinForm',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <InputDate\n                label={Translate.vaccinDate}\n                value={DateUtil.seconds2date(this.props.date).getTime()}\n                onChange={this.handleDateChange}\n            />\n            <Input\n                wide={true}\n                label={Translate.vaccinLot}\n                value={this.props.lot}\n                onChange={this.handleLotChange}\n            />\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport DateUtil from '../../../../../date-util'\nimport Settings from '../../../../../settings'\nimport Translate from '../../../../../translate'\nimport VaccinForm from './vaccin-form'\nimport { IPatient, IVaccins, IVaccin } from \"../../../../../types\"\n\nimport \"./vaccins.css\"\n\nconst Touchable = Tfw.View.Touchable\n\ninterface IVaccinsProps {\n    className?: string\n    patient?: IPatient\n    onUpdateVaccin(id: string, vaccin: IVaccin): void\n}\ninterface IVaccinsState { }\n\nexport default class Vaccins extends React.Component<IVaccinsProps, IVaccinsState> {\n    state = {}\n\n    private renderVaccin = (id: string) => {\n        const { patient } = this.props\n        if (!patient) return null\n        const vaccins: IVaccins = Settings.structure ?.vaccins || {}\n        const vaccin: IVaccin = vaccins[id] || { caption: \"???\" }\n        const currentVaccin = patient.vaccins[id]\n        const classes = [\"thm-ele-button\", \"vaccin\"]\n        const date = currentVaccin ? DateUtil.seconds2date(currentVaccin.date || 0) : null\n        if (date) {\n            const today = new Date()\n            const yy = today.getFullYear()\n            const mm = today.getMonth()\n            const dd = today.getDate()\n            // Attention, vaccin de plus de 5 ans.\n            const warning = DateUtil.date2seconds(\n                new Date(yy - 5, mm, dd)\n            )\n            // Dangeureux après 10 ans.\n            const bad = DateUtil.date2seconds(\n                new Date(yy - 10, mm, dd)\n            )\n            const seconds = currentVaccin.date || 0\n            if (seconds < bad) {\n                classes.push(\"bad\")\n            }\n            else if (seconds < warning) {\n                classes.push(\"warning\")\n            }\n            else {\n                classes.push(\"good\")\n            }\n        }\n        return <Touchable\n            key={id}\n            onClick={() => this.handleVaccinClick(id)}\n        >\n            <div className={classes.join(\" \")}>\n                <div>{vaccin.caption}</div>\n                {\n                    date &&\n                    <div className=\"date\">{\n                        DateUtil.formatDate(date)\n                    }</div>\n                }\n            </div>\n        </Touchable>\n    }\n\n    private getVaccinCaption(id: string) {\n        const vaccins: IVaccins = Settings.structure ?.vaccins || {}\n        const vaccin: IVaccin = vaccins[id] || { caption: \"???\" }\n        return vaccin.caption\n    }\n\n    private async handleVaccinClick(id: string) {\n        const { patient } = this.props\n        if (!patient) return null\n        const vaccin: IVaccin = patient.vaccins[id] || {\n            caption: this.getVaccinCaption(id),\n            lot: \"\"\n        }\n        if (!vaccin) return\n        if (typeof vaccin.date === 'undefined') {\n            vaccin.date = DateUtil.date2seconds(new Date())\n        }\n        console.info(\"vaccin=\", vaccin)\n\n        const currentVaccin: IVaccin = {\n            ...vaccin\n        }\n        const confirmed = await Tfw.Factory.Dialog.confirm(\n            currentVaccin.caption,\n            <VaccinForm\n                date={currentVaccin.date || DateUtil.date2seconds(DateUtil.createUndefinedDate())}\n                lot={currentVaccin.lot || \"\"}\n                onDateChange={(date: number) => {\n                    currentVaccin.date = date\n                }}\n                onLotChange={(lot: string) => {\n                    currentVaccin.lot = lot\n                }}\n            />\n        )\n        if (!confirmed) return\n        this.props.onUpdateVaccin(id, currentVaccin)\n    }\n\n    render() {\n        const { patient } = this.props\n        if (!patient) return null\n\n        const classes = [\n            'view-page-patient-section-Vaccins',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const vaccinIds = Object.keys(Settings.structure ?.vaccins || {})\n\n        return (<div className={classes.join(' ')}>\n            <div\n                className=\"vaccins\"\n                style={{\n                    gridTemplate: `repeat(${\n                        Math.ceil(vaccinIds.length / 3)\n                        }, 1fr) / repeat(3, 1fr)`\n                }}\n            >{vaccinIds.map(this.renderVaccin)}</div>\n            <p>Cliquez sur un vaccin pour changer sa date.</p>\n            <ul>\n                <li>Le <span className=\"bad\">rouge</span> signifie que le vaccin a <b>plus de 10 ans</b>.</li>\n                <li>Le <span className=\"warning\">orange</span> signifie que le vaccin a <b>entre 5 et 10 ans</b>.</li>\n                <li>Le <span className=\"good\">vert</span> signifie que le vaccin a <b>moins de 5 ans</b>.</li>\n            </ul>\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport Translate from '../../translate'\nimport DateUtil from '../../date-util'\nimport TextField from '../field/text'\nimport { IPatientSummary } from \"../../types\"\n\nimport \"./patient-form.css\"\n\nconst Input = Tfw.View.Input\nconst InputDate = Tfw.View.InputDate\nconst InputInteger = Tfw.View.InputInteger\n\ninterface IPatientFormProps {\n    className?: string | string[]\n    patientSummary: IPatientSummary\n    onChange(patientSummary: IPatientSummary): void\n\n}\ninterface IPatientFormState extends IPatientSummary { }\n\nexport default class PatientForm extends React.Component<IPatientFormProps, IPatientFormState> {\n    private oldPatientSummary = \"\"\n\n    state: IPatientFormState = {\n        id: \"\",\n        lastname: \"\",\n        firstname: \"\",\n        secondname: \"\",\n        gender: \"\",\n        size: 0,\n        country: \"\",\n        birth: DateUtil.createUndefinedDate()\n    }\n\n    private refresh = () => {\n        const { patientSummary } = this.props\n        const newPatientSummary = JSON.stringify(patientSummary)\n        if (this.oldPatientSummary === newPatientSummary) return\n        this.oldPatientSummary = newPatientSummary\n        console.info(\"newPatientSummary=\", newPatientSummary)\n        this.setState({ ...patientSummary })\n    }\n\n    componentDidMount = this.refresh\n\n    componentDidUpdate = this.refresh\n\n    private fireChange = () => {\n        const { state } = this\n        this.props.onChange({ ...state })\n    }\n\n    private handleLastnameChange = (lastname: string) => {\n        this.setState({ lastname }, this.fireChange)\n    }\n\n    private handleFirstnameChange = (firstname: string) => {\n        this.setState({ firstname }, this.fireChange)\n    }\n\n    private handleSecondnameChange = (secondname: string) => {\n        this.setState({ secondname }, this.fireChange)\n    }\n\n    private handleCountryChange = (country: string) => {\n        this.setState({ country }, this.fireChange)\n    }\n\n    private handleGenderChange = (gender: string) => {\n        this.setState({ gender }, this.fireChange)\n    }\n\n    private handleSizeChange = (size: number) => {\n        this.setState({ size }, this.fireChange)\n    }\n\n    private handleBirthChange = (birthTime: number) => {\n        // \"birthTime\" is the number of milliseconds since Epoc.\n        this.setState({ birth: new Date(birthTime) }, this.fireChange)\n    }\n\n    render() {\n        console.log(\"[render()] patient-form\")\n        const classes = [\n            'view-PatientForm',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const {\n            lastname, firstname, secondname,\n            gender, birth, country, size\n        } = this.state\n\n        return (<div className={classes.join(' ')}>\n            <Input\n                label={Translate.lastName}\n                transform={Tfw.Transform.upperCase}\n                wide={true}\n                focus={true}\n                value={lastname}\n                onChange={this.handleLastnameChange}\n            />\n            <Input\n                label={Translate.firstName}\n                transform={Tfw.Transform.normalizeName}\n                wide={false}\n                value={firstname}\n                onChange={this.handleFirstnameChange}\n            />\n            <Input\n                label={Translate.secondName}\n                transform={Tfw.Transform.normalizeName}\n                wide={false}\n                value={secondname}\n                onChange={this.handleSecondnameChange}\n            />\n            <TextField\n                label={Translate.gender}\n                wide={false}\n                type=\"#GENDER\"\n                value={gender}\n                onChange={this.handleGenderChange}\n            />\n            <InputDate\n                label={Translate.birthday}\n                value={birth.getTime()}\n                onChange={this.handleBirthChange}\n            />\n            <TextField\n                label={Translate.country}\n                wide={false}\n                type=\"#COUNTRY\"\n                value={country}\n                onChange={this.handleCountryChange}\n            />\n            <InputInteger\n                label={Translate.size}\n                value={size}\n                onChange={this.handleSizeChange}\n            />\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport State from '../../../state'\nimport Translate from '../../../translate'\nimport PatientShortDesc from '../../patient-short-desc'\nimport PatientService from '../../../service/patient'\nimport Consultations from './section/consultations'\nimport Prescriptions from './section/prescriptions'\nimport Vaccins from './section/vaccins'\nimport Guid from '../../../guid'\nimport DateUtil from '../../../date-util'\nimport Settings from '../../../settings'\nimport PatientForm from '../../patient-form'\nimport PatientManager from '../../../manager/patient'\nimport {\n    IPatientSummary, IPatient, IConsultation, IAdmission, IVaccin\n} from \"../../../types\"\n\nimport \"./patient.css\"\n\n\ninterface IDialog {\n    hide(): void\n}\nconst Button = Tfw.View.Button\nconst TabStrip = Tfw.Layout.TabStrip\n\ninterface IPatientProps {\n    className?: string | string[]\n    patientSummary: IPatientSummary\n}\ninterface IPatientState {\n    patient?: IPatient\n}\n\nexport default class Patient extends React.Component<IPatientProps, IPatientState> {\n    private oldPatientId = \"\"\n    state: IPatientState = {}\n\n    private refresh = async () => {\n        const { patientSummary } = this.props\n        if (this.oldPatientId === patientSummary.id) return\n        this.oldPatientId = patientSummary.id\n        const patient = await PatientService.getPatient(patientSummary.id)\n        console.info(\"patient=\", patient)\n        this.setState({ patient })\n    }\n\n    componentDidMount = this.refresh\n    componentDidUpdate = this.refresh\n\n    private handleConsultationClick = (consultationId: string) => {\n        console.info(\"consultationId=\", consultationId)\n        State.setConsultationId(consultationId)\n        State.setPage(\"consultation\")\n    }\n\n    private handleNewConsultationClick = async () => {\n        const { patient } = this.state\n        if (!patient) return\n        const consultation: IConsultation = {\n            enter: DateUtil.date2seconds(new Date()),\n            uuid: Guid.create(),\n            version: 0,\n            data: {}\n        }\n        if (patient.admissions.length === 0) {\n            // No admission yet. Let's create one.\n            patient.admissions.push({\n                enter: consultation.enter,\n                visits: []\n            })\n        }\n        const lastAdmission: IAdmission = patient.admissions[patient.admissions.length - 1]\n        lastAdmission.visits.push(consultation)\n        await PatientService.setPatient(patient)\n        this.setState({\n            patient: { ...patient }\n        }, () => this.handleConsultationClick(consultation.uuid))\n    }\n\n    private handleUpdateVaccin = async (id: string, vaccin: IVaccin) => {\n        console.info(\"handleUpdateVaccin()  \", id, vaccin)\n        const { patient } = this.state\n        if (!patient) return\n        patient.vaccins[id] = vaccin\n        console.info(\"patient=\", patient)\n        await PatientService.setPatient(patient)\n        this.setState({ patient: { ...patient } })\n    }\n\n    private handleBack = () => {\n        State.setPage(\"patients\")\n        State.clearPatient()\n    }\n\n    private handleEditPatient = async () => {\n        const patient = this.state.patient\n        if (!patient) return\n        let patientSummary = PatientManager.getSummary(patient)\n        console.info(\"patient=\", patient)\n        console.info(\"patientSummary=\", patientSummary)\n        const dialog = Tfw.Factory.Dialog.show({\n            title: Translate.editPatient,\n            content: <div>\n                <PatientForm\n                    patientSummary={patientSummary}\n                    onChange={summary => patientSummary = { ...summary }}\n                />\n                <hr/>\n                <Button\n                    label={Translate.deletePatient}\n                    icon=\"delete\" color=\"S\"\n                    onClick={() => this.handleDeletePatient(patientSummary.id, dialog)}\n                />\n            </div>,\n            footer: [\n                <Button\n                    label={Translate.cancel}\n                    flat={true}\n                    onClick={() => dialog.hide()}\n                />,\n                <Button\n                    label={Translate.ok}\n                    color=\"S\"\n                    onClick={async () => {\n                        PatientManager.setSummary(patient, patientSummary)\n                        await PatientService.setPatient(patient)\n                        dialog.hide()\n                        this.handleBack()\n                        State.setPatients(await PatientService.getAllPatients())\n                    }}\n                />\n            ]\n        })\n    }\n\n    private handleDeletePatient = async (patientId: string, dialog: IDialog) => {\n        const confirm = Tfw.Factory.Dialog.confirm(\n            Translate.deletePatient,\n            <div>{Translate.confirmDeletePatient}</div>\n        )\n        if (!confirm) return\n        dialog.hide()\n        await PatientService.deletePatient(patientId)\n        State.setPatients(await PatientService.getAllPatients())\n        this.handleBack()\n    }\n\n    render() {\n        const classes = [\n            'view-page-Patient',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <header className=\"thm-bgPD thm-ele-nav\">\n                <Button\n                    label={Translate.back}\n                    icon=\"back\"\n                    onClick={this.handleBack}\n                />\n                <PatientShortDesc patient={this.props.patientSummary} />\n                <Button\n                    label={Translate.editPatient}\n                    icon=\"user\"\n                    width=\"auto\"\n                    onClick={this.handleEditPatient}\n                />\n            </header>\n            <section>\n                <TabStrip\n                    headers={[\n                        Translate.consultations,\n                        Translate.vaccins,\n                        Translate.prescriptions\n                    ]}\n                >\n                    <Consultations\n                        patient={this.state.patient}\n                        onConsultationClick={this.handleConsultationClick}\n                        onNewConsultationClick={this.handleNewConsultationClick}\n                    />\n                    <Vaccins\n                        patient={this.state.patient}\n                        onUpdateVaccin={this.handleUpdateVaccin}\n                    />\n                    <Prescriptions\n                        patient={this.state.patient}\n                        structure={Settings.structure}\n                    />\n                </TabStrip>\n            </section>\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport PatientShortDesc from '../patient-short-desc'\nimport { IPatientSummary } from \"../../types\"\n\nimport \"./patient-summary-button.css\"\n\nconst Touchable = Tfw.View.Touchable\n\ninterface IPatientSummaryButtonProps {\n    className?: string | string[]\n    patientSummary: IPatientSummary\n    onClick(patientSummary: IPatientSummary): void\n}\n\nexport default class PatientSummaryButton extends React.Component<IPatientSummaryButtonProps, {}> {\n    private handleClick = () => {\n        this.props.onClick({ ...this.props.patientSummary })\n    }\n\n    render() {\n        const classes = [\n            'view-PatientSummaryButton',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <Touchable\n                className=\"thm-bg1 item\"\n                onClick={this.handleClick}\n            >\n                <PatientShortDesc patient={this.props.patientSummary} />\n            </Touchable>\n        </div>)\n    }\n}\n","import { IPatientSummary } from \"../../../types\"\n\nexport default class PatientsExport {\n    private _filteredList: IPatientSummary[]\n    // patientSummaries and footPrints must keep the same order!\n    private patientSummaries: IPatientSummary[]\n    private readonly footPrints: IPatientFootPrint[]\n\n    constructor(patientSummaries: IPatientSummary[]) {\n        this.patientSummaries = patientSummaries\n        this._filteredList = patientSummaries.slice()\n        this.footPrints = patientSummaries.map(p => ({\n            id: p.id,\n            firstName: simplifyName(p.firstname),\n            lastName: simplifyName(p.lastname)\n        }))\n    }\n\n    filter(lastName: string, firstName: string) {\n        const simpleLastName = simplifyName(lastName)\n        const simpleFirstName = simplifyName(firstName)\n\n        this._filteredList = this.patientSummaries.filter(\n            (patientSummary: IPatientSummary, idx: number) => {\n                const item = this.footPrints[idx]\n                return match(item.lastName, simpleLastName)\n                    && match(item.firstName, simpleFirstName)\n            }\n        )\n        this._filteredList.sort(\n            (p1: IPatientSummary, p2: IPatientSummary) => {\n                if (p1.lastname > p2.lastname) return +1\n                if (p1.lastname < p2.lastname) return -1\n                if (p1.firstname > p2.firstname) return +1\n                if (p1.firstname < p2.firstname) return -1\n                if (p1.secondname > p2.secondname) return +1\n                if (p1.secondname < p2.secondname) return -1\n                return 0\n            }\n        )\n    }\n\n    get filteredList() { return this._filteredList.slice() }\n}\n\ninterface IPatientFootPrint {\n    id: string\n    firstName: string\n    lastName: string\n}\n\n\nconst NOT_FOUND = -1\n\n\nfunction match(value: string, test: string): boolean {\n    if (test.length === 0) return true\n    return value.indexOf(test) !== NOT_FOUND\n}\n\n\nconst LETTERS_TO_KEEP = \"abcdefghijklmnopqrstuvwxyz\"\nconst LETTERS_TO_CHANGE = [\n    [\"àáäâã\", \"a\"],\n    [\"èéëêẽ\", \"e\"],\n    [\"ìíïîĩ\", \"i\"],\n    [\"òóöôõ\", \"o\"],\n    [\"ùúüûũ\", \"u\"],\n    [\"ç\", \"c\"],\n    [\"€\", \"e\"],\n    [\"ñ\", \"n\"]\n]\n\nfunction simplifyName(name: string): string {\n    let out = \"\"\n    for (const letter of name.toLowerCase()) {\n        const replacement = findReplacement(letter)\n        if (replacement) {\n            out += replacement\n        }\n        else if (LETTERS_TO_KEEP.indexOf(letter) !== -1) {\n            out += letter\n        }\n    }\n    return out\n}\n\n\n/**\n * Look if the letter can be changed by another one.\n * This is used to get rid of accents and other cedillas.\n * @param letter - Must be in lower case.\n * @return `null` if no replacement has been found.\n */\nfunction findReplacement(letter: string): string | null {\n    for (const map of LETTERS_TO_CHANGE) {\n        const [candidates, replacement] = map\n        if (candidates.indexOf(letter) !== NOT_FOUND) {\n            return replacement\n        }\n    }\n    return null\n}\n","import * as React from \"react\"\nimport Tfw from 'tfw'\nimport Markdown from \"markdown-to-jsx\"\n\nimport './console-view.css'\n\n// const _ = Tfw.Intl.make(require('./console-view.json'))\n\nexport interface IConsoleViewProps {\n    className?: string\n    logs: string[]\n}\n\nexport default class ConsoleView extends React.Component<IConsoleViewProps> {\n    render() {\n        const classNames = ['custom', 'view-ConsoleView']\n        if (typeof this.props.className === 'string') {\n            classNames.push(this.props.className)\n        }\n\n        return <ul className={classNames.join(\" \")}>\n            {\n                this.props.logs.map(\n                    (log: string, index: number) =>\n                    <li key={`li-${index}`}><Markdown>{\n                        log\n                    }</Markdown></li>\n                )\n            }\n        </ul>\n    }\n}\n","import { connect } from 'react-redux'\nimport ConsoleView, { IConsoleViewProps } from './console-view'\nimport { IAppState } from '../../types'\n\nfunction mapStateToProps(state: IAppState): IConsoleViewProps {\n    return { logs: state.logs }\n}\n\nfunction mapDispatchToProps(dispatch: (action: any) => void) {\n    // @see https://redux.js.org/basics/usage-with-react/#implementing-container-components\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ConsoleView)\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport PatientForm from '../../patient-form'\nimport State from '../../../state'\nimport Translate from '../../../translate'\nimport { IPatientSummary } from \"../../../types\"\nimport PatientSummaryButton from '../../patient-summary-button'\nimport PatientsFilter from './patients-filter'\nimport PatientManager from '../../../manager/patient'\nimport PatientService from '../../../service/patient'\nimport Package from '../../../../package.json'\nimport DateUtil from '../../../date-util'\nimport Settings from '../../../settings'\nimport ConsoleView from '../../console'\n\nimport \"./patients.css\"\n\nconst Button = Tfw.View.Button\nconst List = Tfw.View.List\n\nconst FILTER_DEBOUNCING = 350\n\ninterface IPatientsProps {\n    className?: string\n    patient: IPatientSummary\n    patients: IPatientSummary[]\n    onPatientChange(patient: IPatientSummary): void\n    onPatientClick(patient: IPatientSummary): void\n}\ninterface IPatientsState {\n    filteredPatients: IPatientSummary[]\n}\n\nexport default class Patients extends React.Component<IPatientsProps, IPatientsState> {\n    private oldPatient = \"\"\n    private oldPatients = \"\"\n    private patientsFilter?: PatientsFilter\n\n    state = {\n        filteredPatients: this.props.patients\n    }\n\n    private refreshPatientsFilter() {\n        const { patient, patients } = this.props\n        const newPatient = JSON.stringify(patient)\n        const newPatients = JSON.stringify(patients)\n        if (this.oldPatient !== newPatient || this.oldPatients !== newPatients) {\n            this.oldPatient = newPatient\n            this.oldPatients = newPatients\n            this.patientsFilter = new PatientsFilter(patients)\n            this.filter()\n        }\n    }\n\n    componentDidMount = this.refreshPatientsFilter\n    componentDidUpdate = this.refreshPatientsFilter\n\n    private filter = Tfw.Async.Debouncer(() => {\n        const { patientsFilter } = this\n        if (patientsFilter) {\n            const { patient } = this.props\n            patientsFilter.filter(patient.lastname, patient.firstname)\n            this.setState({\n                filteredPatients: patientsFilter.filteredList\n            })\n        }\n    }, FILTER_DEBOUNCING)\n\n    private handlePatientChange = (patientSummary: IPatientSummary) => {\n        this.props.onPatientChange(patientSummary)\n    }\n\n    private renderPatientSummaryButton = (patientSummary: IPatientSummary) => {\n        return <PatientSummaryButton\n            patientSummary={patientSummary}\n            onClick={this.handlePatientSummaryClick}\n        />\n    }\n\n    private handlePatientSummaryClick = (patientSummary: IPatientSummary) => {\n        this.props.onPatientChange(patientSummary)\n        this.props.onPatientClick(patientSummary)\n    }\n\n    private handleAddNewPatient = async () => {\n        const patient = PatientManager.createPatientFromSummary(\n            this.props.patient\n        )\n        await Tfw.Factory.Dialog.wait(\n            Translate.addPatient,\n            new Promise<void>(async (resolve) => {\n                await PatientService.setPatient(patient)\n                const patientSummaries = await PatientService.getAllPatients()\n                State.setPatients(patientSummaries)\n                resolve()\n            })\n        )\n        this.props.onPatientClick(PatientManager.getSummary(patient))\n    }\n\n    render() {\n        const { patientsFilter } = this\n        if (!patientsFilter) return null\n\n        const classes = [\n            'view-page-Patients',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const { patient } = this.props\n        const { filteredPatients } = this.state\n\n        return (<div className={classes.join(' ')}>\n            <header className=\"thm-bgPD thm-ele-nav\">\n                <Button\n                    icon=\"close\"\n                    label=\"Quitter\"\n                    onClick={() => nw.App.quit()}\n                />\n                <div>WebSoins Consultations v{Package.version}</div>\n                <Button\n                    width=\"auto\"\n                    label={Translate.importPatients}\n                    icon=\"import\"\n                    onClick={() => State.setPage(\"import-patients\")}\n                />\n            </header>\n            <section>\n                <div className=\"flex-col\">\n                    <div className=\"patients-form thm-bg2 thm-ele-button\">\n                        <h1>Données démographiques du patient</h1>\n                        <PatientForm\n                            patientSummary={patient}\n                            onChange={this.handlePatientChange}\n                        />\n                        <p className={filteredPatients.length === 0 ? 'hide' : ''}>\n                            Si le <b>patient existe déjà</b> dans la colonne de droite,\n                            <b>cliquez dessus</b> pour voir ses anciennes consultations\n                            et éventuellement en ajouter une nouvelle.\n                        </p>\n                        <Button\n                            icon=\"add\"\n                            wide={true}\n                            label={Translate.addPatient}\n                            enabled={canAddNewPatient(patient)}\n                            color=\"S\"\n                            onClick={this.handleAddNewPatient}\n                        />\n                    </div>\n                    <ConsoleView />\n                </div>\n                <div className=\"patients-list\">\n                    <h1>Patients correspondant au filtre: &nbsp;\n                        <big>{filteredPatients.length}</big>\n                        <small> / {this.props.patients.length}</small></h1>\n                    <List\n                        className=\"list\"\n                        itemHeight={32}\n                        items={this.state.filteredPatients}\n                        mapper={this.renderPatientSummaryButton}\n                    />\n                </div>\n            </section>\n        </div>)\n    }\n}\n\nfunction canAddNewPatient(patient: IPatientSummary): boolean {\n    if (patient.lastname.trim().length === 0) return false\n    if (patient.firstname.trim().length === 0) return false\n    if (patient.country.trim().length === 0) return false\n    // We cannot add the patient if he/she is born in 1000 or before.\n    if (!DateUtil.isDefinedDate(patient.birth)) return false\n\n    return true\n}\n","import FileSystem from './file-system'\nimport PatientService from './patient'\nimport PatientManager from '../manager/patient'\nimport { IPatient, IPatientSummary, IRecord } from '../types'\n\nexport default class PatientImport {\n    static async create(patientsFilePath: string): Promise<PatientImport> {\n        const content = await FileSystem.readText(patientsFilePath)\n        const path = patientsFilePath.substr(\n            0, patientsFilePath.length - \"patients.json\".length)\n        return new PatientImport(content, path)\n    }\n\n    private readonly _patientsCount: number\n    private readonly _records: { [key: string]: IRecord }\n\n    private constructor(content: string, private path: string) {\n        try {\n            const patients = JSON.parse(content)\n            if (typeof patients.count !== 'number') {\n                throw Error('Wrong file format: missing \"count\" attribute!')\n            }\n            this._patientsCount = patients.count\n            if (typeof patients.records !== 'object') {\n                throw Error('Wrong file format: missing \"records\" attribute!')\n            }\n            if (Array.isArray(patients.records)) {\n                throw Error('Wrong file format: \"records\" must not be an array!')\n            }\n            this._records = patients.records\n            console.info(\"patients=\", patients)\n        } catch (ex) {\n            console.log(ex)\n            throw Error('Unable to parse \"patients.json\" content!')\n        }\n    }\n\n    get patientsCount() { return this._patientsCount }\n\n    getPatientBio(index: number): IPatientSummary {\n        const records: { [key: string]: IRecord } = this._records\n        const keys = Object.keys(records)\n        const key = keys[index]\n        if (!key) throw Error(`Invalid patient index #${index}!`)\n        return PatientManager.getSummaryFromRecord(records[key])\n    }\n\n    async getPatient(key: string): Promise<IPatient> {\n        const patient = await PatientService.getPatient(key, this.path)\n        return patient\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport State from '../../../state'\nimport PatientShortDesc from '../../patient-short-desc'\nimport PatientService from '../../../service/patient'\nimport PatientImportService from '../../../service/patient-import'\nimport { IPatientSummary } from \"../../../types\"\n\n\nimport \"./import-patient.css\"\n\nconst Button = Tfw.View.Button\nconst InputFile = Tfw.View.InputFile\nconst Progress = Tfw.View.Progress\nconst Flex = Tfw.Layout.Flex\nconst Dialog = Tfw.Factory.Dialog\n\ninterface IImportPatientProps {\n    className?: string | string[]\n}\ninterface IImportPatientState {\n    progress: number\n    count: number\n    patient?: IPatientSummary\n    addedPatientsCount: number\n    rejectedPatientsCount: number\n}\n\nexport default class ImportPatient extends React.Component<IImportPatientProps, IImportPatientState> {\n    state = {\n        progress: 0,\n        count: 0,\n        patient: undefined,\n        addedPatientsCount: 0,\n        rejectedPatientsCount: 0\n    }\n\n    private handleFilesClick = async (files: FileList) => {\n        if (files.length !== 1) {\n            await Dialog.error(\"Veuillez sélectionner un et un seul fichier.\")\n            return\n        }\n\n        // We untype this because we have the `path` attribute\n        // thanks to NodeWebkit.\n        const file = (files.item(0) as unknown) as any\n        if (!file) return\n        console.info(\"file=\", file)\n        if (file.name !== 'patients.json') {\n            await Dialog.error('Vous devez sélectionner un fichier nommé \"patients.json\".')\n            return\n        }\n\n        this.setState(\n            { progress: 0.000001 },\n            () => this.importPatients(file.path)\n        )\n    }\n\n    private async importPatients(path: string) {\n        const importer = await PatientImportService.create(path)\n        let addedPatientsCount = 0\n        let rejectedPatientsCount = 0\n        this.setState({\n            count: importer.patientsCount,\n            addedPatientsCount,\n            rejectedPatientsCount\n        })\n\n        for (let patientIndex = 0; patientIndex < importer.patientsCount; patientIndex++) {\n            this.setState({\n                progress: patientIndex / importer.patientsCount\n            })\n            try {\n                const patientBio = importer.getPatientBio(patientIndex)\n                this.setState({ patient: patientBio })\n                console.info(\"patientBio=\", patientBio)\n                const key = patientBio.id\n                const patient = await importer.getPatient(key)\n                console.info(\"patient=\", patient)\n                if (PatientService.exists(patient.id)) {\n                    rejectedPatientsCount++\n                    this.setState({ rejectedPatientsCount })\n                    await Tfw.Async.sleep(2)\n                } else {\n                    addedPatientsCount++\n                    this.setState({ addedPatientsCount })\n                    await PatientService.setPatient(patient)\n                }\n            } catch (ex) {\n                console.error(ex)\n            }\n        }\n        this.setState({ progress: 1 })\n    }\n\n    private handleBack = async () => {\n        State.setPage(\"patients\")\n        const patients = await PatientService.getAllPatients()\n        console.info(\"patients=\", patients)\n        State.setPatients(patients)\n    }\n\n    render() {\n        const classes = [\n            'view-page-ImportPatient', 'thm-bg1',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const { progress, count, patient } = this.state\n        const isWorking = progress > 0 && progress < 1\n\n        return (<div className={classes.join(' ')}>\n            <Flex>\n                <Button\n                    className=\"back-button\"\n                    icon=\"left\"\n                    label=\"Retour\"\n                    enabled={!isWorking}\n                    onClick={this.handleBack}\n                />\n                <p>\n                    Utilisez cet outil pour récupérer des patients depuis une autre\n                    base de donnée.<br />\n                    Seuls les patients que vous n'avez pas déjà dans votre base\n                    seront importés.\n                </p>\n                <InputFile\n                    accept=\".json\"\n                    icon=\"user\"\n                    label='Importer le fichier \"patients.json\"'\n                    color=\"S\"\n                    wide={true}                    \n                    enabled={!isWorking && count === 0}\n                    onClick={this.handleFilesClick}\n                />\n            </Flex>\n            <div className={`progress ${count > 0 ? \"show\" : \"hide\"}`}>\n                <Progress\n                    label={`Importation de ${count} patient${count > 1 ? \"s\" : \"\"} (${Math.floor(0.5 + 100 * progress)}%)`}\n                    value={progress}\n                    wide={true}\n                    height=\"2rem\"\n                />\n                {\n                    patient &&\n                    <div className=\"patient-desc\">\n                        <PatientShortDesc patient={patient} />\n                    </div>\n                }\n            </div>\n            <Flex>\n                <div>\n                    <p>Patients importés :</p>\n                    <big>{this.state.addedPatientsCount}</big>\n                </div>\n                <div>\n                    <p>Patients déjà existants :</p>\n                    <big>{this.state.rejectedPatientsCount}</big>\n                </div>\n            </Flex>\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\n\nimport Splash from './splash'\nimport PageConsultation from '../view/page/consultation'\nimport PagePatient from '../view/page/patient'\nimport PagePatients from '../view/page/patients'\nimport PageImportPatients from '../view/page/import-patient'\nimport { IPatientSummary, IPatient, IConsultation } from '../types'\n\nimport \"./app.css\"\n\nconst Stack = Tfw.Layout.Stack\n\ninterface IAppProps {\n    className?: string[]\n    page: string\n    consultationId: string\n    patient: IPatientSummary\n    patients: IPatientSummary[]\n    onPatientChange(patientSummary: IPatientSummary): void\n    onPatientClick(patientSummary: IPatientSummary): void\n    onEndOfConsultationEdition(consultation: IConsultation | null, patient?: IPatient): void\n}\n\nexport default class App extends React.Component<IAppProps, {}> {\n    componentDidMount() {\n        Splash.hide()\n    }\n\n    handlePatientChange = (patientSummary: IPatientSummary) => {\n        this.props.onPatientChange(patientSummary)\n    }\n\n    handlePatientClick = (patientSummary: IPatientSummary) => {\n        this.props.onPatientClick(patientSummary)\n    }\n\n    handleEndOfConsultationEdition = (consultation: IConsultation | null, patient?: IPatient) => {\n        this.props.onEndOfConsultationEdition(consultation, patient)\n    }\n\n    render() {\n        const classes = [\n            'App', \"thm-bg0\",\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <Stack\n                fullscreen={true}\n                scrollable={true}\n                value={this.props.page}\n            >\n                <PageConsultation\n                    key=\"consultation\"\n                    consultationId={this.props.consultationId}\n                    patientSummary={this.props.patient}\n                    onBack={this.handleEndOfConsultationEdition}\n                />\n                <PagePatient\n                    key=\"patient\"\n                    patientSummary={this.props.patient}\n                />\n                <PagePatients\n                    key=\"patients\"\n                    patient={this.props.patient}\n                    patients={this.props.patients}\n                    onPatientChange={this.handlePatientChange}\n                    onPatientClick={this.handlePatientClick}\n                />\n                <PageImportPatients\n                    key=\"import-patients\"\n                />\n            </Stack>\n        </div>)\n    }\n}\n","import { connect } from 'react-redux'\nimport State from '../state'\nimport { IAppState, IPatientSummary, IPatient, IConsultation } from \"../types\"\nimport AppView from \"./app\"\nimport PatientManager from '../manager/patient'\nimport PatientService from '../service/patient'\n\nfunction mapStateToProps(state: IAppState) {\n    return {\n        consultationId: state.consultationId,\n        page: state.page,\n        patient: state.patient,\n        patients: state.patients\n    }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n    return {\n        onPatientChange(patientSummary: IPatientSummary) {\n            State.setPatient(patientSummary)\n        },\n        onPatientClick(patientSummary: IPatientSummary) {\n            State.setPatient(patientSummary)\n            State.setPage(\"patient\")\n        },\n        async onEndOfConsultationEdition(consultation: IConsultation | null, patient?: IPatient) {\n            if (consultation && patient) {\n                // Save the consultation.\n                PatientManager.updateConsultation(patient, consultation)\n                await PatientService.setPatient(patient)\n            }\n            State.setPage(\"patient\")\n        }\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppView);\n","import Tfw from 'tfw'\nimport Settings from '../settings'\nimport { ISynchroStatus, IPatientSummary } from '../types'\nimport PatientService from './patient'\n\nexport default {\n    synchro\n}\n\ntype ILogger = (msg: string) => void\n\nasync function synchro(log: ILogger) {\n    const SLEEP_BETWEEN_RETRIES = 180000\n    while (true) {\n        try {\n            log(\"Synchronisation en cours...\")\n            const status = await getStatus()\n            const patients = await PatientService.getAllPatients()\n            await uploadMissingPatients(status, patients, log)\n            await updateConsultations(status, patients, log)\n        } catch (ex) {\n            console.error(ex)\n            log(`_${ex}_`)\n        }\n        log(\"On attend 3 minutes avant nouvel essai.\")\n        await Tfw.Async.sleep(SLEEP_BETWEEN_RETRIES)\n    }\n}\n\n\nasync function uploadMissingPatients(\n    status: ISynchroStatus, patients: IPatientSummary[], log: ILogger\n) {\n    const patientsToUpload = patients.filter(\n        p => typeof status[p.id] === 'undefined'\n    )\n    log(`Nouveau patients à envoyer au serveur: __${patientsToUpload.length}__ / ${patients.length}`)\n    // @TODO Send patients to remote server.\n}\n\n/**\n * Look for all local consultations and sent to the server the one that are new.\n * The \"version\" attribute will help in that.\n */\nasync function updateConsultations(\n    status: ISynchroStatus, patients: IPatientSummary[], log: ILogger\n) {\n    for (const patientSummary of patients) {\n        const patient = await PatientService.getPatient(patientSummary.id)\n        const remoteConsultations = status[patient.id] ?? {}\n        for (const admission of patient.admissions) {\n            for (const consultation of admission.visits) {\n                const remoteConsultationVersion = remoteConsultations[consultation.uuid] ?? 0\n                \n            }\n        }\n    }\n}\n\n\nasync function getStatus(): Promise<ISynchroStatus> {\n    const code = `${Settings.organizationId}-${Settings.secretCode}`\n    const result = await exec(\"synchro2\", { cmd: \"status\", code })\n    if (result === -3) throw `Code invalide : ${Settings.secretCode}`\n    if (typeof result !== 'string') throw `Unknonw result: ${JSON.stringify(result)}`\n\n    const status: ISynchroStatus = {}\n    const lines = result.split(\"\\n\")\n    for (const line of lines) {\n        const [patientKey, admissions] = line.split(\":\")\n        const patient: { [key: string]: number } = {}\n        status[patientKey] = patient\n        for (const admission of admissions.split(\";\")) {\n            const [key, version] = admission.split(\",\")\n            patient[key] = Tfw.Converter.Integer(version, 0)\n        }\n    }\n    return status\n}\n\nfunction exec(serviceName: string, params: {}) {\n    const WebService = Tfw.WebService.create(\n        Settings.remoteServer\n    )\n    return WebService.exec(serviceName, params)\n}","import Tfw from 'tfw'\r\nimport { IFormField } from '../../types'\r\n\r\nconst _ = Tfw.Intl.make(require(\"./parser.json\"));\r\n\r\ninterface IFormFieldWithPath extends IFormField {\r\n    path: string[]\r\n}\r\n\r\n/**\r\n * Le fichier `types.org` définit tous  les types de données complexe.\r\n * Il  n'y a  pas  de type  très contraignant,  tous  les textes  sont\r\n * libres, mais on propose des listes pour faciliter la saisie. Chaque\r\n * élément  de cette  liste est  muni d'un  identifiant (précédé  d'un\r\n * dièse `#`).\r\n * Un type peut être hiérarchique. Par exemple, une adresse propose un\r\n * pays, une région,  un district, ... Les  propositions dépendent des\r\n * choix  précédents. Ainsi,  la liste  des propositions  de districts\r\n * dépend de la région sélectionnée.\r\n *\r\n * Le  parsing du  fichier `types.org`  se  fait ligne  par ligne.  On\r\n * ignore tous  les espaces/tabulations en  début de ligne.  Le nombre\r\n * d'astérisques  `*`  qui  commencent  une ligne  indique  le  niveau\r\n * hiérarchique.\r\n * Au  niveau 1,  on trouve  l'identifiant du  type qui  doit toujours\r\n * commencer par un dièse `#`.\r\n *\r\n * Voici un  exemple de  fichier en  entrée et de  comment on  doit le\r\n * traduire.\r\n * ```\r\n * #GENDER\r\n * * #H Homme\r\n * * #F Femme\r\n *\r\n * #LOCALIZATION\r\n * * Cameroun\r\n * ** Littoral\r\n * *** District 9\r\n * **** Village 1\r\n * **** Village 2\r\n * **** Village 3\r\n * *** Un peu plus loin\r\n * **** Village A\r\n * **** Village B\r\n * ** Centre\r\n * *** Pas tout près\r\n * **** Village Toto\r\n * *** Au fin fond du...\r\n * **** Village Alpha\r\n * **** Village Beta\r\n * **** Village Gama\r\n * ```\r\n *\r\n * ```\r\n * {\r\n *   \"#GENDER\": {\r\n *     \"#H\": { \"caption\": \"Homme\" },\r\n *     \"#F\": { \"caption\": \"Femme\" }\r\n *   },\r\n *   \"#LOCALIZATION\": {\r\n *     \"Cameroun\": { \"caption\": \"Cameroun\", \"children\": {\r\n *       \"Littoral\": { \"caption\": \"Littoral\", \"children\": {\r\n *         ...\r\n *       }},\r\n *       \"Centre\": { \"caption\": \"Centre\", \"children\": {\r\n *         ...\r\n *       }},\r\n *       ...\r\n *     }}\r\n *   }\r\n * }\r\n * ```\r\n */\r\n\r\n\r\nconst RX_LINE = /^(#[A-Z0-9-]+)?([^\\(@]*)(\\([^\\)]*\\)\\+?)?(@[A-Z0-9,-]+)?/;\r\n\r\n/**\r\n * If there is an error, silents it and return `{}`.\r\n */\r\nfunction parseLazy(code: string): { [key: string]: IFormField } {\r\n    try {\r\n        return parse(code)\r\n    } catch (ex) {\r\n        console.error(ex)\r\n        return {}\r\n    }\r\n}\r\n\r\nfunction parse(code: string): { [key: string]: IFormField } {\r\n    const types: { [key: string]: IFormField } = {};\r\n    const levels = [types];\r\n    if (typeof code !== 'string') code = `${code}`;\r\n    code.split('\\n').forEach(function(line, lineNumber) {\r\n        try {\r\n            line = line.trim();\r\n            // Ignorer les lignes vides.\r\n            if (line.length === 0) return;\r\n            // Ignorer les commentaires.\r\n            if (line.substr(0, 2) === '//') return;\r\n            if (line.charAt(0) !== '*') throw _('err-1');\r\n\r\n            // Calculer le niveau hiérarchique `level`.\r\n            const level = computeLevel(line);\r\n            line = line.substr(level).trim();\r\n\r\n            if (level > levels.length) {\r\n                throw _(\r\n                    'err-2', \r\n                    line, \r\n                    `${levels.length - 1}`, \r\n                    `${level}`)\r\n            }\r\n            while (levels.length > level) {\r\n                levels.pop();\r\n            }\r\n            const item: IFormField = parseLine(line);\r\n            if (typeof levels[levels.length - 1][item.id] !== 'undefined') {\r\n                throw _('err-3', item.id);\r\n            }\r\n            levels[levels.length - 1][item.id] = item;\r\n            levels.push(item.children || {});\r\n        }\r\n        catch (ex) {\r\n            throw { lineNumber: lineNumber + 1, message: ex };\r\n        }\r\n    });\r\n    return types;\r\n};\r\n\r\n\r\n/**\r\n * @param   {string} line - Line to parse.\r\n * @returns {number} Number of leading '*' in the line.\r\n */\r\nfunction computeLevel(line: string): number {\r\n    let level = 0;\r\n    while (line.charAt(0) == '*') {\r\n        line = line.substr(1);\r\n        level++;\r\n    }\r\n    return level;\r\n}\r\n\r\n\r\nfunction parseLine(line: string): IFormField {\r\n    const item: IFormField = {\r\n        id: \"\",\r\n        caption: \"\",\r\n        children: {},\r\n        tags: []\r\n    }\r\n    const m = RX_LINE.exec(line.trim())\r\n    if (!m) return item\r\n\r\n    if (m[2]) {\r\n        item.caption = m[2].trim()\r\n    }\r\n    if (m[1]) {\r\n        item.id = m[1].trim()\r\n    } else {\r\n        if (!item.caption) {\r\n            console.error(\"line:\", line)\r\n            console.error(\"item:\", item)\r\n            throw Error(\"Missing id and caption!\")\r\n        }\r\n        item.id = item.caption.toUpperCase()\r\n    }\r\n    if (m[3]) {\r\n        item.type = m[3].substr(1, m[3].length - 2).trim()\r\n    }\r\n    if (m[4]) {\r\n        item.tags = m[4].trim()\r\n            .substr(1)\r\n            .split(',')\r\n            .map(v => v.trim())\r\n    }\r\n    return item\r\n}\r\n\r\n\r\n/**\r\n * @param {object} forms\r\n * {\r\n *   CONCLUSION: {\r\n *     caption: \"Conclusion\",\r\n *     children: {\r\n *       \"#SURGERY-GYN\": {\r\n *         caption: \"Chirurgie\",\r\n *         id: \"#SURGERY-GYN\",\r\n *         type: \"#SURGERY-GYN\"\r\n *       }\r\n *     }\r\n *   },\r\n *   ...\r\n * }\r\n * @return `[{ id:\"#SURGERY-GYN\", caption:\"Chirurgie\", path:[\"Conclusion\", \"Chirurgie\"] }, ...]`\r\n */\r\nfunction flattenFormsFields(\r\n    forms: { [key: string]: IFormField }\r\n): IFormField[] {\r\n    var list: IFormFieldWithPath[] = [];\r\n    recursiveFlattenFormsFields(forms, list, []);\r\n    list.sort(function(a, b) {\r\n        var captionA = a.caption;\r\n        var captionB = b.caption;\r\n        if (captionA < captionB) return -1;\r\n        if (captionA > captionB) return +1;\r\n        return 0;\r\n    });\r\n    return list;\r\n}\r\n\r\n\r\nfunction recursiveFlattenFormsFields(\r\n    children: { [key: string]: IFormField },\r\n    list: IFormFieldWithPath[],\r\n    path: string[]\r\n) {\r\n    Object.keys(children).forEach(function(key) {\r\n        var child = children[key];\r\n        if (typeof child.id === 'string' && child.id.charAt(0) === '#') {\r\n            // Leave.\r\n            list.push({\r\n                id: child.id,\r\n                caption: child.caption,\r\n                children: {},\r\n                tags: [],\r\n                path: path.slice()\r\n            });\r\n        }\r\n        else if (child.children) {\r\n            // Node.\r\n            path.push(child.caption);\r\n            recursiveFlattenFormsFields(child.children, list, path);\r\n            path.pop();\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport default { parse, parseLazy, flattenFormsFields }\r\n","import Tfw from 'tfw'\nimport Parser from \"../../manager/structure/parser\"\n\nimport { IPatientField, IFormField, IVaccins } from \"../../types\"\nimport { IStructureService } from './types'\n\nexport default {\n    parse,\n    parseExams,\n    parseFormFields,\n    parsePatient,\n    parseVaccins\n}\n\n\nfunction parse(def: string): { [key: string]: IFormField } {\n    try {\n        return Parser.parse(def)\n    }\n    catch (ex) {\n        console.error(\"[service/structure/parse] \", ex)\n        console.log(def)\n        throw Error(ex)\n    }\n}\n\nfunction parseExams(examsDef: string): { [key: string]: { [key: string]: string[] } } {\n    const exams: { [key: string]: { [key: string]: string[] } } = {}\n\n    try {\n        const raw: { [key: string]: IFormField } = Parser.parseLazy(examsDef)\n        for (const sectionKey of Object.keys(raw)) {\n            const section: IFormField = raw[sectionKey]\n            const sectionName = section.caption\n            const examsSection: { [key: string]: string[] } = {}\n            exams[sectionName] = examsSection\n            for (const subSectionKey of Object.keys(section.children)) {\n                const subSection = section.children[subSectionKey]\n                const subSectionName = subSection.caption\n                const examsSubSection: string[] = []\n                examsSection[subSectionName] = examsSubSection\n                for (const key of Object.keys(subSection.children)) {\n                    const field = subSection.children[key]\n                    examsSubSection.push(field.caption)\n                }\n                if (examsSubSection.length === 0) {\n                    examsSubSection.push(subSectionName)\n                }\n            }\n        }\n    }\n    catch (ex) {\n        console.error(\"[parseExams] \", ex);\n        console.log(\"examsDef=\", examsDef)\n    }\n\n    return exams\n}\n\nfunction parseVaccins(stringifiedVaccins: string): IVaccins {\n    const vaccins: IVaccins = {}\n    try {\n        const raw: { [key: string]: IFormField } =\n            Parser.parse(stringifiedVaccins)\n        for (const id of Object.keys(raw)) {\n            vaccins[id] = { caption: raw[id].caption }\n        }\n    }\n    catch (ex) {\n        console.error(\"[parseVaccins] \", ex);\n    }\n    return vaccins\n}\n\nfunction parsePatient(stringifiedPatientDef: string): IPatientField[] {\n    try {\n        const raw: { [key: string]: IFormField } =\n            Parser.parse(stringifiedPatientDef)\n        const patients: IPatientField[] = Object.keys(raw)\n            .map((id: string) => {\n                const patient = raw[id];\n                return {\n                    id,\n                    type: patient.type || \"\",\n                    caption: Tfw.Intl.toIntl(patient.caption) || \"\"\n                }\n            });\n        return patients;\n    }\n    catch (ex) {\n        console.error(\"[parsePatient] \", ex);\n    }\n    return [];\n}\n\ninterface IFlatField {\n    type: string\n    caption: string\n}\n\nfunction parseFormFields(structure: IStructureService): { [key: string]: IFlatField } {\n    const result: { [key: string]: IFlatField } = {}\n    const fringe: Array<{ [key: string]: IFormField }> =\n        [parse(structure.forms)]\n\n    while (fringe.length > 0) {\n        const item = fringe.shift()\n        if (!item) continue\n        for (const name of Object.keys(item)) {\n            const value = item[name]\n            result[name] = {\n                type: \"\",\n                caption: Tfw.Intl.toText(Tfw.Intl.toIntl(value.caption))\n            }\n            if (value.type) result[name].type = value.type\n            if (value.children) {\n                fringe.push(value.children)\n            }\n        }\n    }\n    return result\n}\n","import Tfw from 'tfw'\nimport Settings from '../../settings'\nimport Parser from './parser'\nimport { IStructureService } from './types'\nimport { IStructure, ITypes } from \"../../types\"\n\n\nexport default {\n    async getFromRemote(): Promise<IStructure | null> {\n        const organizationId: number = Settings.organizationId\n        const structureId: number = Settings.structureId\n        const WebService = Tfw.WebService.create(\n            Settings.remoteServer\n        )\n        try {\n            const structures: IStructureService[] =\n                await WebService.exec(\"structure.list\", organizationId);\n            const structure = structures.find(\r\n                (structure: IStructureService) => structure.id === structureId\r\n            )\r\n            if (!structure) return null\r\n            console.info(\"Structure (raw)=\", structure)\r\n            const parsedStructure: IStructure = {\n                id: structure.id,\n                organizationId,\n                name: structure.name,\n                patientFields: Parser.parsePatient(structure.patient),\n                formFields: Parser.parseFormFields(structure),\n                //exams: parse(structure.exams),\n                //vaccins: parse(structure.vaccins),\n                forms: Parser.parse(structure.forms),\n                types: Parser.parse(structure.types) as ITypes,\n                vaccins: Parser.parseVaccins(structure.vaccins),\n                exams: Parser.parseExams(structure.exams),\n                sources: {\n                    exams: structure.exams,\n                    vaccins: structure.vaccins,\n                    patient: structure.patient,\n                    forms: structure.forms,\n                    types: structure.types\n                }\n            }\r\n            console.info(\"Structure (parsed)=\", parsedStructure)\r\n            return parsedStructure\r\n        } catch (ex) {\r\n            console.error(ex)\r\n            return null\r\n        }\r\n    }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Tfw from 'tfw'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport './index.css'\nimport App from './app'\nimport State from './state'\nimport Settings from './settings'\nimport PatientService from './service/patient'\nimport SynchroService from './service/synchro'\nimport StructureService from './service/structure'\nimport * as serviceWorker from './serviceWorker'\n\nTfw.Theme.register(\"soin\", {\n    colorW: \"#fda\", colorB: \"#420\", colorE: \"#B20\",\n    color0: \"#ffcb97\", color1: \"#ffdab3\", color2: \"#ffe6cc\", color3: \"#fff3e6\",\n    colorP: \"#804924\", colorPL: \"#b36633\", colorPD: \"#4d2c16\",\n    colorS: \"#ff9f30\", colorSD: \"#ff7f00\", colorSL: \"#ffbf60\"\n})\nconsole.log(Tfw.Theme.apply(\"soin\"))\n\nasync function start() {\n    await Tfw.Font.loadJosefin(true)\n    window.addEventListener(\"keyup\", (evt) => {\n        if (evt.key === \"F11\") {\n            evt.preventDefault()\n            //const nw = window['nw'] as any\n            const win = nw.Window.get()\n            win.toggleFullscreen()\n        }\n    }, true)\n    console.info(\"process.env=\", process.env)\n    await Settings.initialize()\n    State.addLog(`Serveur distant: __${Settings.remoteServer}__`)\n    const patients = await PatientService.getAllPatients()\n    console.info(\"patients=\", patients)\n    State.setPatients(patients)\n    const structure = await StructureService.getFromRemote()\n    if (structure) {\n        // Update structure from network.\n        Settings.structure = structure\n    }\n\n    ReactDOM.render(\n        <Provider store={State.store}>\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>\n        </Provider>,\n        document.getElementById('root')\n    )\n\n    SynchroService.synchro(\n        State.addLog\n    )\n}\n\nstart()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = require(\"util\");","module.exports = require(\"path\");","module.exports = require(\"fs\");","module.exports = require(\"stream\");"],"sourceRoot":""}