{"version":3,"sources":["../external \"crypto\"","../external \"path\"","../external \"fs\"","date-util/date-util.ts","state/state.ts","app/splash.ts","translate/translate.ts","service/mkdirp.ts","service/file-system.ts","settings/settings.ts","view/patient-short-desc/patient-short-desc.tsx","guid.ts","manager/patient.ts","service/patient.ts","manager/structure/structure.ts","view/field/text/text.tsx","view/consultation-form/consultation-form.tsx","view/page/consultation/consultation.tsx","view/page/patient/section/consultations/consultations.tsx","view/page/patient/section/vaccins/vaccin-form/vaccin-form.tsx","view/page/patient/section/vaccins/vaccins.tsx","view/page/patient/patient.tsx","view/patient-form/patient-form.tsx","view/patient-summary-button/patient-summary-button.tsx","view/page/patients/patients-filter.ts","view/page/patients/patients.tsx","service/patient-import.ts","view/page/import-patient/import-patient.tsx","app/app.tsx","app/app.container.tsx","manager/structure/parser.ts","service/structure.ts","serviceWorker.ts","index.tsx"],"names":["module","exports","require","createUndefinedDate","Date","date2seconds","date","Math","floor","getTime","formatDate","dateFormatter","format","isDefinedDate","seconds2date","seconds","Intl","DateTimeFormat","weekday","year","month","day","INITIAL_STATE","consultationId","page","patient","id","lastname","firstname","secondname","gender","size","country","birth","DateUtil","patients","store","createStore","state","action","type","clearPatient","dispatch","setConsultationId","uuid","setPage","setPatient","setPatients","param","console","trace","splash","document","getElementById","classList","add","window","setTimeout","body","removeChild","_","Tfw","make","genderValue","trim","toUpperCase","path","fs","_0777","parseInt","mkdirP","p","opts","f","made","mode","xfs","undefined","process","umask","cb","resolve","mkdir","er","code","dirname","stat","er2","isDirectory","sync","mkdirSync","err0","statSync","err1","FS","Path","exists","filename","fullPath","ROOT","existsSync","readText","Promise","reject","readFile","err","data","writeText","content","mkdirp","writeFile","cwd","DATA","remoteServer","secretCode","organizationId","structureId","save","Async","Debouncer","FileSystem","JSON","stringify","this","parse","Error","structure","error","REACT_APP_WEBSOINS","v","PatientShortDesc","classes","Converter","StringArray","props","className","Settings","age","getFullYear","join","title","React","Component","UuidV4","createPatientFromSummary","summary","Guid","now","admissions","created","attachments","edited","exams","picture","vaccins","getAllConsultationsBefore","timeInSeconds","consultations","admission","visits","consultation","enter","push","sort","c1","c2","getConsultationFromUuid","warn","getSummary","getSummaryFromRecord","removeConsultation","filter","updateConsultation","newConsultation","version","max","record","Integer","Util","normalizeFirstname","Enum","normalizeLastname","getAllPatients","getPatient","PatientManager","patientFilename","PATIENTS_FILENAME","PATIENTS","Map","a","loadPatientsFile","patientsFile","listToSort","Object","keys","records","map","key","sortedList","b","A","B","item","info","has","cachedPatient","get","log","patientContent","sanitizePatient","set","addUniqueIdIfMissing","addPatientToPatientsFile","savePatientsFile","delete","length","patientsFileContent","file","count","createPatientsFieldsFromStructure","getCurrentStructure","patientsFields","patientFields","forEach","patientField","createPatientsFieldsCaptionsFromStructure","patientsFieldsCaptions","toText","caption","getFieldCaption","fieldKey","charAt","formFields","getValueCaption","typeKey","valueKey","types","values","children","subType","Input","View","Text","handleChange","value","onChange","getTypeKey","suggestions","typeName","t","getSuggestionsForType","label","wide","width","StructureManager","normalizedValue","toLowerCase","Expand","Checkbox","ConsultationForm","renderPrevConsultation","field","getFieldValue","updateField","sanitizedValue","updateBooleanField","overrideConsultation","fields","name","renderField","hasChildren","renderFields","tags","Array","isArray","isBool","getFieldValueAsBoolean","prevConsultations","bind","form","forms","Button","InputDate","Consultations","oldPatientSummary","oldConsultationId","refresh","patientSummary","PatientService","setState","copy","componentDidMount","componentDidUpdate","handleOK","onBack","handleCancel","handleDataChange","time","consultationDate","Translate","ok","icon","small","warning","onClick","cancel","flat","obj","renderAdmission","renderConsultation","dat","dark","onConsultationClick","onNewConsultationClick","VaccinForm","handleLotChange","lot","handleDateChange","vaccinDate","vaccinLot","Touchable","Vaccins","renderVaccin","vaccin","currentVaccin","today","yy","mm","getMonth","dd","getDate","bad","handleVaccinClick","getVaccinCaption","Factory","Dialog","confirm","onUpdateVaccin","vaccinIds","style","gridTemplate","ceil","TabStrip","Layout","Patient","oldPatientId","handleConsultationClick","State","handleNewConsultationClick","handleUpdateVaccin","handleBack","back","editPatient","headers","InputInteger","PatientForm","oldPatient","fireChange","handleLastnameChange","handleFirstnameChange","handleSecondnameChange","handleCountryChange","handleGenderChange","handleSizeChange","handleBirthChange","birthTime","lastName","transform","focus","firstName","secondName","birthday","PatientSummaryButton","handleClick","PatientsExport","patientSummaries","_filteredList","footPrints","slice","simplifyName","simpleLastName","simpleFirstName","idx","match","test","indexOf","LETTERS_TO_CHANGE","out","letter","replacement","findReplacement","candidates","List","Patients","oldPatients","patientsFilter","filteredPatients","filteredList","handlePatientChange","onPatientChange","renderPatientSummaryButton","handlePatientSummaryClick","onPatientClick","handleAddNewPatient","refreshPatientsFilter","PatientsFilter","exit","Package","importPatients","enabled","canAddNewPatient","itemHeight","items","mapper","PatientImport","_patientsCount","_records","ex","patientsFilePath","substr","index","InputFile","Progress","Flex","ImportPatient","progress","addedPatientsCount","rejectedPatientsCount","handleFilesClick","files","PatientImportService","create","importer","patientsCount","patientIndex","patientBio","getPatientBio","isWorking","accept","height","Stack","App","handlePatientClick","handleEndOfConsultationEdition","onEndOfConsultationEdition","Splash","fullscreen","scrollable","connect","AppView","RX_LINE","levels","split","line","lineNumber","level","computeLevel","pop","m","exec","parseLine","message","flattenFormsFields","list","recursiveFlattenFormsFields","child","captionA","captionB","WebService","structures","find","parsedStructure","parsePatient","parseFormFields","parseVaccins","sources","def","Parser","stringifiedVaccins","raw","stringifiedPatientDef","toIntl","result","fringe","shift","Boolean","location","hostname","addEventListener","evt","preventDefault","nw","Window","toggleFullscreen","initialize","StructureService","ReactDOM","render","StrictMode","Theme","register","white","black","bg0","bg1","bg2","bg3","bgP","bgPL","bgPD","bgS","bgSD","bgSL","apply","Font","loadJosefin","start","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.005a5abf.chunk.js","sourcesContent":["module.exports = require(\"crypto\");","module.exports = require(\"path\");","module.exports = require(\"fs\");","export default {\n    createUndefinedDate,\n    date2seconds,\n    formatDate,\n    isDefinedDate,\n    seconds2date\n}\n\nconst UNDEFINED_DATE_TIME = -30610224561000\n\nfunction isDefinedDate(date: any): date is Date {\n    if (date instanceof Date) {\n        return date.getTime() > UNDEFINED_DATE_TIME\n    }\n    return false\n}\n\n\nfunction createUndefinedDate(): Date {\n    return new Date(UNDEFINED_DATE_TIME)\n}\n\n\nfunction seconds2date(seconds: number): Date {\n    return new Date(seconds * 1000)\n}\n\n\nfunction date2seconds(date: Date): number {\n    const CONVERSION = 0.001\n    return Math.floor(date.getTime() * CONVERSION)\n}\n\nconst dateFormatter = new Intl.DateTimeFormat([\"fr-CM\"], {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\"\n})\n\nfunction formatDate(date: Date): string {\n    return dateFormatter.format(date)\n}\n","import { createStore } from 'redux'\nimport DateUtil from '../date-util'\n\nimport {\n    IAppState, IPatientSummary, IStructure\n} from '../types'\n\nconst INITIAL_STATE: IAppState = {\n    consultationId: \"\",\n    page: \"patients\",\n    patient: {\n        id: \"\",\n        lastname: \"\",\n        firstname: \"\",\n        secondname: \"\",\n        gender: \"X\",\n        size: 0,\n        country: \"\",\n        birth: DateUtil.createUndefinedDate()\n    },\n    patients: []\n}\n\ntype IAction = IActionSetPage | IActionSetPatients | IActionSetPatient | IActionSetConsultationId\n\ninterface IActionSetPage {\n    type: \"set-page\",\n    page: string\n}\n\ninterface IActionSetPatients {\n    type: \"set-patients\",\n    patients: IPatientSummary[]\n}\n\ninterface IActionSetPatient {\n    type: \"set-patient\",\n    patient: IPatientSummary\n}\n\ninterface IActionSetConsultationId {\n    type: \"set-consultation-id\",\n    consultationId: string\n}\n\nconst store = createStore<IAppState, IAction, unknown, unknown>(reducer)\n\nfunction reducer(\n    state: IAppState | undefined = INITIAL_STATE,\n    action: IAction\n): IAppState {\n    switch (action.type) {\n        case 'set-consultation-id':\n            return { ...state, consultationId: action.consultationId }\n        case 'set-page':\n            return { ...state, page: action.page }\n        case 'set-patient':\n            return { ...state, patient: action.patient }\n        case 'set-patients':\n            return { ...state, patients: action.patients }\n        default:\n            return state\n    }\n}\n\nexport default {\n    store,\n    clearPatient() {\n        const patient: IPatientSummary = {\n            id: \"\", firstname: \"\", secondname: \"\", lastname: \"\",\n            birth: new Date(),\n            country: \"\", gender: \"\", size: 0\n        }\n        dispatch({ type: \"set-patient\", patient })\n    },\n    setConsultationId(uuid: string) {\n        dispatch({ type: \"set-consultation-id\", consultationId: uuid })\n    },\n    setPage(page: string) {\n        dispatch({ type: \"set-page\", page })\n    },\n    setPatient(patient: IPatientSummary) {\n        dispatch({ type: \"set-patient\", patient })\n    },\n    setPatients(patients: IPatientSummary[]) {\n        dispatch({ type: \"set-patients\", patients })\n    }\n}\n\nfunction dispatch(param: IAction) {\n    console.trace(\"DISPATCH\", param)\n    store.dispatch(param)\n}\n","import \"./splash.css\"\n\nexport default {\n    hide() {\n        const splash = document.getElementById(\"splash-screen\")\n        if (!splash) return\n        splash.classList.add(\"vanish\")\n        const VANISHING_DELAY = 1000\n        window.setTimeout(\n            () => document.body.removeChild(splash),\n            VANISHING_DELAY\n        )\n    }\n}\n","import Tfw from 'tfw'\n\nconst _ = Tfw.Intl.make(require(\"./translate.json\"))\n\nexport default {\n    get back() { return _('back') },\n    get birthday() { return _('birthday') },\n    get cancel() { return _('cancel') },\n    get close() { return _('close') },\n    get code() { return _('code') },\n    get consultationDate() { return _('consultation-date') },\n    get consultations() { return _('consultations') },\n    get consultationsCount() { return _('consultations-count') },\n    get country() { return _('country') },\n    get dateMin() { return _('date-min') },\n    get dateMax() { return _('date-max') },\n    get editPatient() { return _('edit-patient') },\n    get executeQuery() { return _('execute-query') },\n    get extractions() { return _('extractions') },\n    get filter() { return _('filter') },\n    get firstName() { return _('firstname') },\n    get gender() { return _('gender') },\n    genderValue(type: string) {\n        switch (type.trim().toUpperCase()) {\n            case 'M': return _('gender-male')\n            case 'F': return _('gender-female')\n            default: return _('gender-undefined')\n        }\n    },\n    get identifier() { return _('identifier') },\n    get importPatients() { return _('import-patients') },\n    get lastName() { return _('lastname') },\n    get loading() { return _('loading') },\n    get logout() { return _('logout') },\n    get newConsultation() { return _('new-consultation') },\n    get ok() { return _('ok') },\n    get patients() { return _('patients') },\n    get patientsCount() { return _('patients-count') },\n    get secondName() { return _('secondname') },\n    get size() { return _('size') },\n    get struct() { return _('struct') },\n    get vaccinDate() { return _('vaccin-date') },\n    get vaccinLot() { return _('vaccin-lot') },\n    get vaccins() { return _('vaccins') }\n}\n","const path = require('path')\nconst fs = require('fs')\nconst _0777 = parseInt('0777', 8)\n\nexport default function mkdirP(p: string, opts: any, f?: any, made?: any) {\n    if (typeof opts === 'function') {\n        f = opts;\n        opts = {};\n    }\n    else if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n\n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n\n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    var cb = f || function() { };\n    p = path.resolve(p);\n\n    xfs.mkdir(p, mode, function(er: any) {\n        if (!er) {\n            made = made || p;\n            return cb(null, made);\n        }\n        switch (er.code) {\n            case 'ENOENT':\n                mkdirP(path.dirname(p), opts, function(er: any, made: any) {\n                    if (er) cb(er, made);\n                    else mkdirP(p, opts, cb, made);\n                });\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                xfs.stat(p, function(er2: any, stat: any) {\n                    // if the stat fails, then that's super weird.\n                    // let the original error be the failure reason.\n                    if (er2 || !stat.isDirectory()) cb(er, made)\n                    else cb(null, made);\n                });\n                break;\n        }\n    });\n}\n\nmkdirP.sync = function sync(p: any, opts: any, made: any) {\n    if (!opts || typeof opts !== 'object') {\n        opts = { mode: opts };\n    }\n\n    var mode = opts.mode;\n    var xfs = opts.fs || fs;\n\n    if (mode === undefined) {\n        mode = _0777 & (~process.umask());\n    }\n    if (!made) made = null;\n\n    p = path.resolve(p);\n\n    try {\n        xfs.mkdirSync(p, mode);\n        made = made || p;\n    }\n    catch (err0) {\n        switch (err0.code) {\n            case 'ENOENT':\n                made = sync(path.dirname(p), opts, made);\n                sync(p, opts, made);\n                break;\n\n            // In the case of any other error, just see if there's a dir\n            // there already.  If so, then hooray!  If not, then something\n            // is borked.\n            default:\n                var stat;\n                try {\n                    stat = xfs.statSync(p);\n                }\n                catch (err1) {\n                    throw err0;\n                }\n                if (!stat.isDirectory()) throw err0;\n                break;\n        }\n    }\n\n    return made;\n};\n","import mkdirp from './mkdirp'\n\nconst FS = window.require('fs')\nconst Path = window.require('path')\n\nexport default { exists, readText, writeText }\n\nconst ROOT = Path.resolve(process.cwd(), \"data\")\n\n\nfunction exists(filename: string): boolean {\n    const fullPath = Path.resolve(ROOT, filename)\n    return FS.existsSync(fullPath)\n}\n\n/**\n * Read text file in \"data/\" folder.\n */\nfunction readText(filename: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const fullPath = Path.resolve(ROOT, filename)\n        FS.readFile(fullPath, 'utf-8', (err: any, data: any) => {\n            if (err) {\n                reject(err)\n            } else {\n                resolve(data)\n            }\n        })\n    })\n}\n\n\n/**\n * Write text file in \"data/\" folder.\n */\nfunction writeText(filename: string, content: string): Promise<string> {\n    return new Promise((resolve, reject) => {\n        const fullPath = Path.resolve(ROOT, filename)\n        const dirname = Path.dirname(fullPath)\n        mkdirp(dirname, (err: any) => {\n            if (err) reject(err)\n            else FS.writeFile(fullPath, content, 'utf-8', (err: any, data: any) => {\n                if (err) reject(err)\n                else resolve(data)\n            })\n        })\n    })\n}\n","import Tfw from 'tfw'\nimport FileSystem from '../service/file-system'\nimport { IStructure } from '../types'\n\nconst SAVE_DEBOUNCING_DELAY = 300\n\ninterface ISettings {\n    remoteServer: string\n    secretCode: string\n    organizationId: number\n    structureId: number\n    structure?: IStructure\n}\n\nconst DATA: ISettings = {\n    remoteServer: \"https://web-soins.com\",\n    secretCode: \"kAcGObgfMr\",\n    organizationId: 1,\n    structureId: 1\n}\n\nclass Settings {\n    private readonly data: ISettings\n    constructor() {\n        this.data = DATA\n    }\n\n    async initialize(): Promise<boolean> {\n        try {\n            const content = await FileSystem.readText(\"settings.json\")\n            const data = JSON.parse(content)\n\n            if (typeof data.remoteServer !== 'string')\n                throw Error(\"Attribute remoteServer must be a string!\")\n            if (typeof data.secretCode !== 'string')\n                throw Error(\"Attribute secretCode must be a string!\")\n            if (typeof data.organizationId !== 'number')\n                throw Error(\"Attribute organizationId must be a number!\")\n            if (typeof data.structureId !== 'number')\n                throw Error(\"Attribute structureId must be a number!\")\n\n            DATA.remoteServer = data.remoteServer\n            DATA.secretCode = data.secretCode\n            DATA.organizationId = data.organizationId\n            DATA.structureId = data.structureId\n            DATA.structure = data.structure\n\n            return true\n        } catch (ex) {\n            console.error(\"Unable to load settings.json!\")\n            console.error(ex)\n            return false\n        }\n    }\n\n    get remoteServer(): string {\n        return process.env.REACT_APP_WEBSOINS === 'DEV'\n            ? \"http://localhost:7474/web-soins/\"\n            : this.data.remoteServer\n    }\n    set remoteServer(v: string) {\n        this.data.remoteServer = v\n        this.save()\n    }\n    get secretCode(): string { return this.data.secretCode }\n    set secretCode(v: string) {\n        this.data.secretCode = v\n        this.save()\n    }\n    get organizationId(): number { return this.data.organizationId }\n    set organizationId(v: number) {\n        this.data.organizationId = v\n        this.save()\n    }\n    get structureId(): number { return this.data.structureId }\n    set structureId(v: number) {\n        this.data.structureId = v\n        this.save()\n    }\n    get structure(): IStructure | undefined { return this.data.structure }\n    set structure(v: IStructure | undefined) {\n        this.data.structure = v\n        this.save()\n    }\n\n    save = Tfw.Async.Debouncer(() => {\n        FileSystem.writeText(\"settings.json\", JSON.stringify(this.data))\n    }, SAVE_DEBOUNCING_DELAY)\n}\n\nexport default new Settings()\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport Settings from '../../settings'\nimport DateUtil from '../../date-util'\nimport { IPatientSummary } from \"../../types\"\n\n\nimport \"./patient-short-desc.css\"\n\ninterface IPatientShortDescProps {\n    className?: string | string[]\n    patient?: IPatientSummary\n}\ninterface IPatientShortDescState { }\n\nexport default class PatientShortDesc extends React.Component<IPatientShortDescProps, IPatientShortDescState> {\n    state = {}\n\n    render() {\n        const classes = [\n            'view-PatientShortDesc',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const { patient } = this.props\n        if (!patient) return null\n        const structure = Settings.structure\n        if (!structure) return null\n        const today = new Date()\n        const age = 1 + today.getFullYear() - patient.birth.getFullYear()\n\n        return (\n            <div\n                className={classes.join(' ')}\n                title={patient.id}\n            >\n                <span className=\"lastname\">{patient.lastname.toUpperCase()}</span>\n                <span className=\"firstname\">{patient.firstname}</span>\n                <span className=\"secondname\">{patient.secondname}</span>\n                {\n                    DateUtil.isDefinedDate(patient.birth) &&\n                    <span className=\"age\">{age} <em>ans</em></span>\n                }\n                {\n                    patient.size > 0 &&\n                    <span className=\"size\">{patient.size} <em>cm</em></span>\n                }\n            </div>\n        )\n    }\n}\n","import { v4 as UuidV4 } from \"uuid\"\n\nexport default {\n    create() {\n        return UuidV4()\n    }\n}\n","import Tfw from 'tfw'\nimport Guid from '../guid'\nimport DateUtil from '../date-util'\nimport { IPatient, IPatientSummary, IConsultation, IRecord } from '../types'\n\nexport default {\n    createPatientFromSummary,\n    getAllConsultationsBefore,\n    getConsultationFromUuid,\n    getSummary,\n    getSummaryFromRecord,\n    removeConsultation,\n    updateConsultation\n}\n\nfunction getConsultationFromUuid(patient: IPatient, consultationId: string): IConsultation | null {\n    for (const admission of patient.admissions) {\n        for (const consultation of admission.visits) {\n            if (consultation.uuid === consultationId) {\n                return consultation\n            }\n        }\n    }\n    console.warn(`No consultation found for Patient ${patient.id} with Id ${consultationId}!`)\n    return null\n}\n\n\nfunction getSummary(patient: IPatient): IPatientSummary {\n    patient.data.id = patient.id\n    return getSummaryFromRecord(patient.data)\n}\n\nfunction getSummaryFromRecord(record: IRecord): IPatientSummary {\n    const summary: IPatientSummary = {\n        id: record.id,\n        birth: DateUtil.seconds2date(\n            Tfw.Converter.Integer(\n                record[\"#PATIENT-BIRTH\"]\n            )\n        ),\n        country: `${record[\"#PATIENT-COUNTRY\"]}`,\n        firstname: Tfw.Util.normalizeFirstname(\n            `${record[\"#PATIENT-FIRSTNAME\"]}`\n        ),\n        gender: Tfw.Converter.Enum<string>(\n            record[\"#PATIENT-GENDER\"],\n            [\"#F\", \"#M\", \"#X\"],\n            \"#X\"\n        ),\n        lastname: Tfw.Util.normalizeLastname(\n            `${record[\"#PATIENT-LASTNAME\"]}`\n        ),\n        secondname: Tfw.Util.normalizeFirstname(\n            `${record[\"#PATIENT-SECONDNAME\"]}`\n        ),\n        size: Tfw.Converter.Integer(\n            record[\"#PATIENT-SIZE\"]\n        )\n    }\n    return summary\n}\n\nfunction createPatientFromSummary(summary: IPatientSummary): IPatient {\n    const id = Guid.create()\n    const now = DateUtil.date2seconds(new Date())\n    return {\n        id,\n        admissions: [],\n        created: now,\n        attachments: [],\n        data: {\n            id,\n            \"#PATIENT-LASTNAME\": summary.lastname,\n            \"#PATIENT-FIRSTNAME\": summary.firstname,\n            \"#PATIENT-SECONDNAME\": summary.secondname,\n            \"#PATIENT-BIRTH\": DateUtil.date2seconds(summary.birth),\n            \"#PATIENT-GENDER\": summary.gender,\n            \"#PATIENT-COUNTRY\": summary.country,\n            \"#PATIENT-SIZE\": summary.size,\n        },\n        edited: now,\n        exams: [],\n        picture: null,\n        vaccins: {}\n    }\n}\n\nfunction updateConsultation(patient: IPatient, newConsultation: IConsultation): IPatient {\n    for (const admission of patient.admissions) {\n        for (const consultation of admission.visits) {\n            if (consultation.uuid !== newConsultation.uuid) continue\n            consultation.version = 1 + Math.max(\n                consultation.version, newConsultation.version)\n            consultation.enter = newConsultation.enter\n            consultation.data = { ...newConsultation.data }\n            return patient\n        }\n    }\n\n    return patient\n}\n\nfunction removeConsultation(patient: IPatient, consultationId: string): IPatient {\n    for (const admission of patient.admissions) {\n        admission.visits = admission.visits.filter(\n            consultation => consultation.uuid !== consultationId\n        )\n    }\n    return patient\n}\n\nfunction getAllConsultationsBefore(patient: IPatient, timeInSeconds: number): IConsultation[] {\n    const consultations: IConsultation[] = []\n    for (const admission of patient.admissions) {\n        for (const consultation of admission.visits) {\n            if (consultation.enter < timeInSeconds) {\n                consultations.push(consultation)\n            }\n        }\n    }\n\n    // Sort then with the more recent first.\n    consultations.sort(\n        (c1: IConsultation, c2: IConsultation) => c2.enter - c1.enter\n    )\n\n    return consultations\n}\n","/**\n * Patients files are stored locally in the \"data/\" directory.\n * This folder contains an index file named \"patients.json\"\n * which type is IPatientsFile.\n *\n * Every patient has a unique id which is used as folder's name\n * to store the file \"patient.json\" of type IPatient.\n */\n\n\nimport { IPatient, IPatientSummary, IRecord, IConsultation } from '../types'\nimport FileSystem from \"./file-system\"\nimport PatientManager from '../manager/patient'\nimport Guid from '../guid'\n\nexport default { getAllPatients, getPatient, getSummary, exists, setPatient }\n\ninterface IPatientsFile {\n    count: number,\n    records: { [key: string]: IRecord }\n}\n\nconst ROOT_DIRECTORY = '.'\nconst PATIENTS_FILENAME = `${ROOT_DIRECTORY}/patients.json`\n\nconst PATIENTS = new Map<string, IPatient>()\n\n/**\n * @return A list of all the patients summaries.\n */\nasync function getAllPatients(): Promise<IPatientSummary[]> {\n    try {\n        const patientsFile = await loadPatientsFile()\n        const listToSort: Array<[string, string, IRecord]> =\n            Object.keys(patientsFile.records)\n                .map(key => patientsFile.records[key])\n                .map((record: IRecord) => {\n                    const { id } = record\n                    const label = `${\n                        record[\"#PATIENT-LASTNAME\"]\n                        }\\t${\n                        record[\"#PATIENT-FIRSTNAME\"]\n                        }\\t${\n                        record[\"#PATIENT-SECONDNAME\"]\n                        }`\n                    return [id, label, record]\n                })\n        const sortedList = listToSort.sort((a: any[], b: any[]) => {\n            const [A] = a\n            const [B] = b\n            if (A < B) return -1\n            if (A > B) return +1\n            return 0\n        })\n        return sortedList\n            .map(item => item[2])\n            .map(PatientManager.getSummaryFromRecord)\n    }\n    catch (ex) {\n        console.error(`Unable to load \"${PATIENTS_FILENAME}\"!`, ex)\n        return []\n    }\n}\n\n\nfunction exists(id: string): boolean {\n    const patientFilename = `${ROOT_DIRECTORY}/${id}/patient.json`\n    return FileSystem.exists(patientFilename)\n}\n\nasync function getPatient(id: string, path = \".\"): Promise<IPatient> {\n    try {\n        console.info(\"getPatient() id=\", id)\n        if (PATIENTS.has(id)) {\n            const cachedPatient = PATIENTS.get(id) as IPatient\n            console.log(`Found Patient #${id} in cache!`, cachedPatient)\n            return cachedPatient\n        }\n        const patientContent = await FileSystem.readText(\n            `${path}/${id}/patient.json`)\n        const patient = JSON.parse(patientContent) as IPatient\n        sanitizePatient(patient)\n        PATIENTS.set(id, patient)\n        console.log(\"Loaded patient: \", patient)\n        return patient\n    }\n    catch (ex) {\n        console.error(`Unable to load patient #${id}!`, ex)\n        throw ex\n    }\n}\n\n\n/**\n * Store the patient to disk.\n * If such a patient already exist, it will be overwritten.\n */\nasync function setPatient(patient: IPatient): Promise<IPatient> {\n    try {\n        const patientContent = JSON.stringify(sanitizePatient(patient))\n        addUniqueIdIfMissing(patient)\n        await FileSystem.writeText(`./${patient.id}/patient.json`, patientContent)\n        const patientsFile = await loadPatientsFile()\n        addPatientToPatientsFile(patient, patientsFile)\n        await savePatientsFile(patientsFile)\n\n        const id = patient.id\n        if (PATIENTS.has(id)) {\n            PATIENTS.delete(id)\n        }\n        PATIENTS.set(id, patient)\n\n        return patient\n    }\n    catch (ex) {\n        console.error(`Unable to save patient #${patient.id}!`, ex)\n        throw ex\n    }\n}\n\n\nfunction getSummary(patient: IPatient): IPatientSummary {\n    return PatientManager.getSummary(patient)\n}\n\n\n/**\n * If \".id\" is missing, create a new unique one.\n */\nfunction addUniqueIdIfMissing(patient: IPatient) {\n    if (typeof patient.id === 'string' && patient.id.length > 0) return\n    patient.id = Guid.create()\n}\n\n\nasync function loadPatientsFile(): Promise<IPatientsFile> {\n    try {\n        const patientsFileContent = await FileSystem.readText(PATIENTS_FILENAME)\n        return JSON.parse(patientsFileContent) as IPatientsFile\n    } catch (ex) {\n        const file: IPatientsFile = {\n            count: 0,\n            records: {}\n        }\n        return file\n    }\n}\n\n\nasync function savePatientsFile(patientsFile: IPatientsFile) {\n    await FileSystem.writeText(PATIENTS_FILENAME, JSON.stringify(patientsFile))\n}\n\n\nfunction addPatientToPatientsFile(patient: IPatient, patientsFile: IPatientsFile) {\n    patientsFile.records[patient.id] = {\n        ...patient.data,\n        id: patient.id\n    }\n}\n\n\nfunction sanitizePatient(patient: IPatient): IPatient {\n    for (const admission of patient.admissions) {\n        for (const consultation of admission.visits) {\n            if (\n                typeof consultation.uuid !== 'string'\n                || consultation.uuid.length === 0\n            ) {\n                consultation.uuid = Guid.create()\n            }\n            if (typeof consultation.version !== 'number') {\n                consultation.version = 1\n            }\n        }\n    }\n    return patient\n}\n","import Tfw from 'tfw'\r\nimport Settings from '../../settings'\r\nimport { IStructure, IPatientField } from \"../../types\"\r\n\r\nconst Intl = Tfw.Intl\r\n\r\nexport default {\r\n    createPatientsFieldsFromStructure,\r\n    createPatientsFieldsCaptionsFromStructure,\r\n    getCurrentStructure,\r\n    getFieldCaption,\r\n    getValueCaption\r\n}\r\n\r\nfunction getCurrentStructure(): IStructure {\r\n    const structure = Settings.structure\r\n    if (!structure) throw Error(\"Structure has not been initialized yet!\")\r\n    return structure\r\n}\r\n\r\nfunction createPatientsFieldsFromStructure(): { [key: string]: boolean } {\r\n    const structure = getCurrentStructure()\r\n    const patientsFields: { [key: string]: boolean } = {};\r\n    structure.patientFields.forEach((patientField: IPatientField) => {\r\n        patientsFields[patientField.id] = true;\r\n    });\r\n    return patientsFields;\r\n}\r\n\r\nfunction createPatientsFieldsCaptionsFromStructure(): { [key: string]: string } {\r\n    const structure = getCurrentStructure()\r\n    const patientsFieldsCaptions: { [key: string]: string } = {};\r\n    structure.patientFields.forEach((patientField: IPatientField) => {\r\n        patientsFieldsCaptions[patientField.id] = Intl.toText(patientField.caption);\r\n    });\r\n    return patientsFieldsCaptions;\r\n}\r\n\r\n/**\r\n * Return the caption of a field, given its key or caption.\r\n */\r\nfunction getFieldCaption(fieldKey: string): string {\r\n    const structure = getCurrentStructure()\r\n    if (fieldKey.charAt(0) !== '#') return fieldKey;\r\n    const item: { caption: string, type: string } | undefined =\r\n        structure.formFields[fieldKey];\r\n    if (!item) return fieldKey;\r\n    return Intl.toText(item.caption);\r\n}\r\n\r\nfunction getValueCaption(typeKey: string | undefined, valueKey: string): string {\r\n    if (!typeKey) {\r\n        // If no type, return the value as is.\r\n        return valueKey\r\n    }\r\n    const structure = getCurrentStructure()\r\n    const types = structure.types\r\n    const type = types[typeKey]\r\n    if (!type) return valueKey\r\n\r\n    for (const subType of Object.values(type.children)) {\r\n        const caption = subType.caption\r\n        if (!caption) continue\r\n        if (subType.id === valueKey) {\r\n            return subType.caption || valueKey\r\n        }\r\n    }\r\n    return valueKey\r\n}\r\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport StructureManager from '../../../manager/structure'\nimport Settings from '../../../settings'\nimport { IStructure } from \"../../../types\"\n\n\nimport \"./text.css\"\n\nconst Input = Tfw.View.Input\n\ninterface ITextProps {\n    className?: string | string[]\n    label?: string\n    wide?: boolean\n    type: string\n    width?: string\n    value: string\n    onChange(value: string): void\n}\ninterface ITextState { }\n\nexport default class Text extends React.Component<ITextProps, ITextState> {\n    state = {}\n\n    private handleChange = (value: string) => {\n        const structure = Settings.structure\n        if (!structure) return null\n        this.props.onChange(getTypeKey(structure, this.props.type, value))\n    }\n\n    render() {\n        const classes = [\n            'view-field-Text',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const structure = Settings.structure\n        if (!structure) return null\n\n        const type = this.props.type\n        const value = this.props.value\n        const suggestions = getSuggestionsForType(structure, type)\n\n        return <Input\n            className={classes}\n            label={this.props.label}\n            wide={this.props.wide}\n            width={this.props.width}\n            value={StructureManager.getValueCaption(type ,value)}\n            suggestions={suggestions}\n            onChange={this.handleChange}\n        />\n    }\n}\n\n\nfunction getSuggestionsForType(structure: IStructure, typeName: string): string[] {\n    const types = structure.types\n    const type = types[typeName]\n    if (!type) return []\n    const subTypes = Object.values(type.children)\n    return subTypes\n        .map(t => t.caption)\n        .filter(t => typeof t === \"string\") as string[]\n}\n\n\nfunction getTypeKey(\n    structure: IStructure,\n    typeName: string,\n    value: string\n): string {\n    const types = structure.types\n    const type = types[typeName]\n    if (!type) return value\n    const normalizedValue = value.trim().toLowerCase()\n    for (const subType of Object.values(type.children)) {\n        const caption = subType.caption\n        if (!caption) continue\n        if (caption.toLowerCase() === normalizedValue) {\n            return subType.id\n        }\n    }\n    return value\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport DateUtil from '../../date-util'\nimport Settings from '../../settings'\nimport TextField from '../field/text'\nimport PatientManager from '../../manager/patient'\nimport StructureManager from '../../manager/structure'\nimport { IPatient, IFormField, IFormFields, IConsultation } from \"../../types\"\n\n\nimport \"./consultation-form.css\"\n\nconst Expand = Tfw.View.Expand\nconst Checkbox = Tfw.View.Checkbox\n\ninterface IConsultationFormProps {\n    className?: string | string[]\n    patient: IPatient\n    // This object is mutable and will be modified by this component.\n    // It must be a copy of the original consultation because\n    // the editing can be cancelled.\n    consultation: IConsultation\n}\ninterface IConsultationFormState { }\n\nexport default class ConsultationForm extends React.Component<IConsultationFormProps, IConsultationFormState> {\n    state = {}\n\n    private getFieldValue(field: IFormField, overrideConsultation: IConsultation | null = null): string {\n        const consultation = overrideConsultation || this.props.consultation\n        if (!consultation) return \"\"\n        const { data } = consultation\n        if (!data) return \"\"\n        if (!data[field.id]) return \"\"\n        return StructureManager.getValueCaption(field.type, data[field.id])\n    }\n\n    private getFieldValueAsBoolean(field: IFormField): boolean {\n        const value = this.getFieldValue(field)\n        return Tfw.Converter.Enum<string>(\n            value,\n            [\"#YES\", \"#TRUE\"],\n            \"#FALSE\"\n        ) !== \"#FALSE\"\n    }\n\n    private renderFields(fields: IFormFields) {\n        return Object.keys(fields).map(\n            name => {\n                const field = fields[name]\n                if (!field) return null\n                return this.renderField(field)\n            }\n        )\n    }\n\n    private renderField(field: IFormField) {\n        if (hasChildren(field)) {\n            return <Expand\n                key={field.id}\n                label={field.caption}\n                value={false}\n                className=\"thm-ele-button field\"\n            >\n                {this.renderFields(field.children)}\n            </Expand>\n        }\n\n        const { consultation } = this.props\n        if (isBool(field)) {\n            return <Checkbox\n                key={field.id}\n                wide={true}\n                label={field.caption}\n                value={this.getFieldValueAsBoolean(field)}\n                onChange={(value: boolean) => this.updateBooleanField(field, value)}\n            />\n        }\n\n        const prevConsultations = PatientManager.getAllConsultationsBefore(\n            this.props.patient,\n            consultation.enter\n        )\n        if (field.id === '#REFERENCE') {\n            console.info(\"prevConsultations=\", prevConsultations)\n            console.info(\"consultation=\", consultation)\n        }\n        return <div className=\"field\">\n            <TextField\n                key={field.id}\n                label={field.caption}\n                value={this.getFieldValue(field)}\n                type={field.type || \"\"}\n                width=\"15rem\"\n                wide={false}\n                onChange={(value: string) => this.updateField(field, value)}\n            />\n            { prevConsultations.map(this.renderPrevConsultation.bind(this, field)) }\n        </div>\n    }\n\n    /**\n     * We want to show the values of previous consultations as well.\n     */\n    private renderPrevConsultation = (field: IFormField, consultation: IConsultation) => {\n        if (typeof consultation.data[field.id] === 'undefined') {\n            // This field does not exist.\n            return null\n        }\n        const value = this.getFieldValue(field, consultation)\n        return <div className=\"prev-field\" key={`pc-${consultation.enter}`}>\n            <div className=\"date\">{\n                DateUtil.formatDate(\n                    DateUtil.seconds2date(consultation.enter)\n                )\n            }</div>\n            <div className=\"value\">{ value }</div>\n        </div>\n    }\n\n    private updateField = (field: IFormField, value: string) => {\n        const sanitizedValue = (value || \"\").trim()\n        const { consultation } = this.props\n        delete consultation.data[field.id]\n        if (sanitizedValue.length > 0) {\n            consultation.data[field.id] = sanitizedValue\n            console.info(\"consultation=\", consultation)\n        }\n    }\n\n    private updateBooleanField = (field: IFormField, value: boolean) => {\n        const { consultation } = this.props\n        delete consultation.data[field.id]\n        if (value) {\n            consultation.data[field.id] = \"#YES\"\n        }\n\n    }\n\n    render() {\n        const classes = [\n            'view-ConsultationForm',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const structure = Settings.structure\n        if (!structure) return null\n        const form = structure.forms\n\n        return (<div className={classes.join(' ')}>\n            {this.renderFields(form)}\n        </div>)\n    }\n}\n\n\n/**\n * If a field has children, it will be represented by an expander.\n */\nfunction hasChildren(field: IFormField): boolean {\n    if (!field.children) return false\n    const names = Object.keys(field.children)\n    return names.length > 0\n}\n\n\nfunction isBool(field: IFormField): boolean {\n    const { tags } = field\n    if (!Array.isArray(tags)) return false\n    for (const tag of tags) {\n        if (tag.trim().toUpperCase() === \"BOOL\") return true\n    }\n    return false\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport DateUtil from '../../../date-util'\nimport State from '../../../state'\nimport Translate from '../../../translate'\nimport PatientShortDesc from '../../patient-short-desc'\nimport PatientManager from '../../../manager/patient'\nimport PatientService from '../../../service/patient'\nimport ConsultationForm from '../../consultation-form'\nimport { IPatient, IPatientSummary, IConsultation } from \"../../../types\"\n\n\nimport \"./consultation.css\"\n\nconst Button = Tfw.View.Button\nconst InputDate = Tfw.View.InputDate\n\ninterface IConsultationsProps {\n    className?: string | string[]\n    patientSummary: IPatientSummary\n    consultationId: string\n    // If null consultation is given, that is a cancel opération.\n    onBack(consultation: IConsultation | null, patient?: IPatient): void\n}\ninterface IConsultationsState {\n    patient?: IPatient\n    consultation: IConsultation | null\n}\n\nexport default class Consultations extends React.Component<IConsultationsProps, IConsultationsState> {\n    private oldPatientSummary?: IPatientSummary\n    private oldConsultationId?: string\n    state: IConsultationsState = {\n        patient: undefined,\n        consultation: null\n    }\n\n    private refresh = async () => {\n        const { patientSummary } = this.props\n        if (patientSummary !== this.oldPatientSummary) {\n            this.oldPatientSummary = patientSummary\n            const patient = await PatientService.getPatient(patientSummary.id)\n            this.setState({ patient })\n        }\n        const { consultationId } = this.props\n        const { patient } = this.state\n        if (patient && consultationId !== this.oldConsultationId) {\n            this.oldConsultationId = consultationId\n            const consultation: IConsultation | null = copy(\n                PatientManager.getConsultationFromUuid(\n                    patient,\n                    consultationId\n                )\n            )\n            this.setState({ consultation })\n        }\n    }\n\n    componentDidMount = this.refresh\n    componentDidUpdate = this.refresh\n\n    private handleOK = () => {\n        this.props.onBack(this.state.consultation, this.state.patient)\n    }\n\n    private handleCancel = () => {\n        this.props.onBack(null)\n    }\n\n    private handleDataChange = (time: number) => {\n        const { consultation } = this.state\n        if (consultation ) {\n            consultation.enter = Math.floor(time / 1000)\n        }\n    }\n\n    render() {\n        const classes = [\n            'view-page-Consultation',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const { patient, consultation } = this.state\n        if (!patient) return null\n        if (!consultation) return null\n        const patientSummary = PatientManager.getSummary(patient)\n        const consultationDate = DateUtil.seconds2date(\n            consultation.enter\n        )\n\n        return (<div className={classes.join(' ')}>\n            <header className=\"thm-bgPD thm-ele-nav\">\n                <div>\n                    <Button\n                        label={Translate.ok}\n                        icon=\"ok\"\n                        small={true}\n                        warning={true}\n                        onClick={this.handleOK}\n                    />\n                    <Button\n                        label={Translate.cancel}\n                        icon=\"cancel\"\n                        small={true}\n                        flat={true}\n                        onClick={this.handleCancel}\n                    />\n                </div>\n                <div className=\"date\">{\n                    DateUtil.formatDate(consultationDate)\n                }</div>\n                <PatientShortDesc patient={patientSummary} />\n            </header>\n            <section>\n                <InputDate\n                    label={Translate.consultationDate}\n                    value={consultation.enter * 1000}\n                    onChange={this.handleDataChange}\n                />\n                <hr />\n                <ConsultationForm\n                    patient={patient}\n                    consultation={consultation}\n                />\n            </section>\n        </div>)\n    }\n}\n\n\nfunction copy(obj: IConsultation | null) {\n    if (!obj) return obj\n    return JSON.parse(JSON.stringify(obj))\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport Translate from '../../../../../translate'\nimport DateUtil from '../../../../../date-util'\nimport { IPatient, IAdmission, IConsultation } from \"../../../../../types\"\n\nimport \"./consultations.css\"\n\nconst Button = Tfw.View.Button\n\ninterface IConsultationsProps {\n    className?: string | string[]\n    patient?: IPatient\n    onConsultationClick(consultationId: string): void\n    onNewConsultationClick(): void\n}\n\nexport default class Consultations extends React.Component<IConsultationsProps, {}> {\n    private renderAdmission = (admission: IAdmission) => {\n        return <div className=\"admission\" key={admission.enter}>\n            {admission.visits.map(this.renderConsultation)}\n        </div>\n    }\n\n    private renderConsultation = (consultation: IConsultation) => {\n        const dat = DateUtil.seconds2date(consultation.enter)\n        return <Button\n            label={DateUtil.formatDate(dat)}\n            icon=\"edit\" small={true} dark={true}\n            className=\"consultation\"\n            key={consultation.enter}\n            onClick={() => this.props.onConsultationClick(consultation.uuid)}\n        />\n    }\n\n    render() {\n        const { patient } = this.props\n        if (!patient) return null\n\n        const classes = [\n            'view-page-patient-section-Consultations',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <Button\n                icon=\"add\"\n                label={Translate.newConsultation}\n                onClick={() => this.props.onNewConsultationClick()}\n            />\n            <hr/>\n            {\n                patient.admissions.length === 0 &&\n                <p>Ce-tte patient-e n'a pas encore consulté ici.</p>\n            }\n            {\n                patient.admissions.map(this.renderAdmission)\n            }\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\n\nimport DateUtil from \"../../../../../../date-util\"\nimport Translate from \"../../../../../../translate\"\n\n\nimport \"./vaccin-form.css\"\n\nconst Input = Tfw.View.Input\nconst InputDate = Tfw.View.InputDate\n\ninterface IVaccinFormProps {\n    className?: string\n    // Seconds since EPOC.\n    date: number\n    lot: string\n    onChange(date: number, lot: string): void\n}\n\nexport default class VaccinForm extends React.Component<IVaccinFormProps, {}> {\n    private handleLotChange = (lot: string) => {\n        this.props.onChange(\n            this.props.date,\n            lot\n        )\n    }\n\n    private handleDateChange = (date: number) => {\n        this.props.onChange(\n            DateUtil.date2seconds(new Date(date)),\n            this.props.lot\n        )\n    }\n\n    render() {\n        const classes = [\n            'view-page-patient-section-vaccins-VaccinForm',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <InputDate\n                label={Translate.vaccinDate}\n                value={DateUtil.seconds2date(this.props.date).getTime()}\n                onChange={this.handleDateChange}\n            />\n            <Input\n                wide={true}\n                label={Translate.vaccinLot}\n                value={this.props.lot}\n                onChange={this.handleLotChange}\n            />\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport DateUtil from '../../../../../date-util'\nimport Settings from '../../../../../settings'\nimport Translate from '../../../../../translate'\nimport VaccinForm from './vaccin-form'\nimport { IPatient, IVaccins, IVaccin } from \"../../../../../types\"\n\nimport \"./vaccins.css\"\n\nconst Touchable = Tfw.View.Touchable\n\ninterface IVaccinsProps {\n    className?: string\n    patient?: IPatient\n    onUpdateVaccin(id: string, vaccin: IVaccin): void\n}\ninterface IVaccinsState { }\n\nexport default class Vaccins extends React.Component<IVaccinsProps, IVaccinsState> {\n    state = {}\n\n    private renderVaccin = (id: string) => {\n        const { patient } = this.props\n        if (!patient) return null\n        const vaccins: IVaccins = Settings.structure ?.vaccins || {}\n        const vaccin: IVaccin = vaccins[id] || { caption: \"???\" }\n        const currentVaccin = patient.vaccins[id]\n        const classes = [\"thm-ele-button\", \"vaccin\"]\n        const date = currentVaccin ? DateUtil.seconds2date(currentVaccin.date || 0) : null\n        if (date) {\n            const today = new Date()\n            const yy = today.getFullYear()\n            const mm = today.getMonth()\n            const dd = today.getDate()\n            // Attention, vaccin de plus de 5 ans.\n            const warning = DateUtil.date2seconds(\n                new Date(yy - 5, mm, dd)\n            )\n            // Dangeureux après 10 ans.\n            const bad = DateUtil.date2seconds(\n                new Date(yy - 10, mm, dd)\n            )\n            const seconds = currentVaccin.date || 0\n            if (seconds < bad) {\n                classes.push(\"bad\")\n            }\n            else if (seconds < warning) {\n                classes.push(\"warning\")\n            }\n            else {\n                classes.push(\"good\")\n            }\n        }\n        return <Touchable\n            key={id}\n            onClick={() => this.handleVaccinClick(id)}\n        >\n            <div className={classes.join(\" \")}>\n                <div>{vaccin.caption}</div>\n                {\n                    date &&\n                    <div className=\"date\">{\n                        DateUtil.formatDate(date)\n                    }</div>\n                }\n            </div>\n        </Touchable>\n    }\n\n    private getVaccinCaption(id: string) {\n        const vaccins: IVaccins = Settings.structure ?.vaccins || {}\n        const vaccin: IVaccin = vaccins[id] || { caption: \"???\" }\n        return vaccin.caption\n    }\n\n    private async handleVaccinClick(id: string) {\n        const { patient } = this.props\n        if (!patient) return null\n        const vaccin: IVaccin = patient.vaccins[id] || {\n            caption: this.getVaccinCaption(id),\n            date: DateUtil.date2seconds(new Date()),\n            lot: \"\"\n        }\n        if (!vaccin) return\n\n        const currentVaccin: IVaccin = {\n            ...vaccin\n        }\n        const confirmed = await Tfw.Factory.Dialog.confirm(\n            currentVaccin.caption,\n            <VaccinForm\n                date={currentVaccin.date || DateUtil.date2seconds(DateUtil.createUndefinedDate())}\n                lot={currentVaccin.lot || \"\"}\n                onChange={(date: number, lot: string) => {\n                    currentVaccin.date = date\n                    currentVaccin.lot = lot\n                }}\n            />\n        )\n        if (!confirmed) return\n        this.props.onUpdateVaccin(id, currentVaccin)\n    }\n\n    render() {\n        const { patient } = this.props\n        if (!patient) return null\n\n        const classes = [\n            'view-page-patient-section-Vaccins',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const vaccinIds = Object.keys(Settings.structure ?.vaccins || {})\n\n        return (<div className={classes.join(' ')}>\n            <div\n                className=\"vaccins\"\n                style={{\n                    gridTemplate: `repeat(${\n                        Math.ceil(vaccinIds.length / 3)\n                        }, 1fr) / repeat(3, 1fr)`\n                }}\n            >{vaccinIds.map(this.renderVaccin)}</div>\n            <p>Cliquez sur un vaccin pour changer sa date.</p>\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport State from '../../../state'\nimport Translate from '../../../translate'\nimport PatientShortDesc from '../../patient-short-desc'\nimport PatientService from '../../../service/patient'\nimport Consultations from './section/consultations'\nimport Vaccins from './section/vaccins'\nimport Guid from '../../../guid'\nimport DateUtil from '../../../date-util'\nimport {\n    IPatientSummary, IPatient, IConsultation, IAdmission, IVaccin\n} from \"../../../types\"\n\n\nimport \"./patient.css\"\n\nconst Button = Tfw.View.Button\nconst TabStrip = Tfw.Layout.TabStrip\n\ninterface IPatientProps {\n    className?: string | string[]\n    patientSummary: IPatientSummary\n}\ninterface IPatientState {\n    patient?: IPatient\n}\n\nexport default class Patient extends React.Component<IPatientProps, IPatientState> {\n    private oldPatientId = \"\"\n    state: IPatientState = {}\n\n    private refresh = async () => {\n        const { patientSummary } = this.props\n        if (this.oldPatientId === patientSummary.id) return\n        this.oldPatientId = patientSummary.id\n        const patient = await PatientService.getPatient(patientSummary.id)\n        console.info(\"patient=\", patient)\n        this.setState({ patient })\n    }\n\n    componentDidMount = this.refresh\n    componentDidUpdate = this.refresh\n\n    private handleConsultationClick = (consultationId: string) => {\n        console.info(\"consultationId=\", consultationId)\n        State.setConsultationId(consultationId)\n        State.setPage(\"consultation\")\n    }\n\n    private handleNewConsultationClick = async () => {\n        const { patient } = this.state\n        if (!patient) return\n        const consultation: IConsultation = {\n            enter: DateUtil.date2seconds(new Date()),\n            uuid: Guid.create(),\n            version: 0,\n            data: {}\n        }\n        if (patient.admissions.length === 0) {\n            // No admission yet. Let's create one.\n            patient.admissions.push({\n                enter: consultation.enter,\n                visits: []\n            })\n        }\n        const lastAdmission: IAdmission = patient.admissions[patient.admissions.length - 1]\n        lastAdmission.visits.push(consultation)\n        await PatientService.setPatient(patient)\n        this.setState({\n            patient: { ...patient }\n        }, () => this.handleConsultationClick(consultation.uuid))\n    }\n\n    private handleUpdateVaccin = async (id: string, vaccin: IVaccin) => {\n        console.info(\"handleUpdateVaccin()  \", id, vaccin)\n        const { patient } = this.state\n        if (!patient) return\n        patient.vaccins[id] = vaccin\n        console.info(\"patient=\", patient)\n        await PatientService.setPatient(patient)\n        this.setState({ patient: { ...patient } })\n    }\n\n    private handleBack = () => {\n        State.setPage(\"patients\")\n        State.clearPatient()\n    }\n\n    render() {\n        const classes = [\n            'view-page-Patient',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <header className=\"thm-bgPD thm-ele-nav\">\n                <Button\n                    label={Translate.back}\n                    icon=\"back\"\n                    small={true}\n                    warning={true}\n                    onClick={this.handleBack}\n                />\n                <PatientShortDesc patient={this.props.patientSummary} />\n                <Button\n                    label={Translate.editPatient}\n                    icon=\"user\"\n                    small={true}\n                    warning={false}\n                    onClick={this.handleBack}\n                />\n            </header>\n            <section>\n                <TabStrip\n                    headers={[Translate.consultations, Translate.vaccins]}\n                >\n                    <Consultations\n                        patient={this.state.patient}\n                        onConsultationClick={this.handleConsultationClick}\n                        onNewConsultationClick={this.handleNewConsultationClick}\n                    />\n                    <Vaccins\n                        patient={this.state.patient}\n                        onUpdateVaccin={this.handleUpdateVaccin}\n                    />\n                </TabStrip>\n            </section>\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport Translate from '../../translate'\nimport DateUtil from '../../date-util'\nimport TextField from '../field/text'\nimport { IPatientSummary } from \"../../types\"\n\nimport \"./patient-form.css\"\n\nconst Input = Tfw.View.Input\nconst InputDate = Tfw.View.InputDate\nconst InputInteger = Tfw.View.InputInteger\n\ninterface IPatientFormProps {\n    className?: string | string[]\n    patient: IPatientSummary\n    onChange(patient: IPatientSummary): void\n\n}\ninterface IPatientFormState extends IPatientSummary { }\n\nexport default class PatientForm extends React.Component<IPatientFormProps, IPatientFormState> {\n    private oldPatient?: IPatientSummary\n\n    state = {\n        id: \"\",\n        lastname: \"\",\n        firstname: \"\",\n        secondname: \"\",\n        gender: \"\",\n        size: 0,\n        country: \"\",\n        birth: DateUtil.createUndefinedDate()\n    }\n\n    private refresh = () => {\n        const { patient } = this.props\n        if (patient === this.oldPatient) return\n        this.oldPatient = patient\n        this.setState({ ...patient })\n    }\n\n    componentDidMount = this.refresh\n\n    componentDidUpdate = this.refresh\n\n    private fireChange = () => {\n        const { state } = this\n        this.props.onChange({ ...state })\n    }\n\n    private handleLastnameChange = (lastname: string) => {\n        this.setState({ lastname }, this.fireChange)\n    }\n\n    private handleFirstnameChange = (firstname: string) => {\n        this.setState({ firstname }, this.fireChange)\n    }\n\n    private handleSecondnameChange = (secondname: string) => {\n        this.setState({ secondname }, this.fireChange)\n    }\n\n    private handleCountryChange = (country: string) => {\n        this.setState({ country }, this.fireChange)\n    }\n\n    private handleGenderChange = (gender: string) => {\n        this.setState({ gender }, this.fireChange)\n    }\n\n    private handleSizeChange = (size: number) => {\n        this.setState({ size }, this.fireChange)\n    }\n\n    private handleBirthChange = (birthTime: number) => {\n        // \"birth\" is the number of ms since Epoc.\n        this.setState({ birth: new Date(birthTime) }, this.fireChange)\n    }\n\n    render() {\n        const classes = [\n            'view-PatientForm',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const {\n            lastname, firstname, secondname,\n            gender, birth, size\n        } = this.state\n\n        return (<div className={classes.join(' ')}>\n            <Input\n                label={Translate.lastName}\n                transform={Tfw.Util.normalizeLastname}\n                wide={true}\n                focus={true}\n                value={lastname}\n                onChange={this.handleLastnameChange}\n            />\n            <Input\n                label={Translate.firstName}\n                transform={Tfw.Util.normalizeFirstname}\n                wide={true}\n                value={firstname}\n                onChange={this.handleFirstnameChange}\n            />\n            <Input\n                label={Translate.secondName}\n                transform={Tfw.Util.normalizeFirstname}\n                wide={true}\n                value={secondname}\n                onChange={this.handleSecondnameChange}\n            />\n            <TextField\n                label={Translate.gender}\n                wide={true}\n                type=\"#GENDER\"\n                value={gender}\n                onChange={this.handleGenderChange}\n            />\n            <InputDate\n                label={Translate.birthday}\n                value={birth.getTime()}\n                onChange={this.handleBirthChange}\n            />\n            <TextField\n                label={Translate.country}\n                wide={true}\n                type=\"#COUNTRY\"\n                value={\"\"}\n                onChange={this.handleCountryChange}\n            />\n            <InputInteger\n                label={Translate.size}\n                value={size}\n                onChange={this.handleSizeChange}\n            />\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport PatientShortDesc from '../patient-short-desc'\nimport { IPatientSummary } from \"../../types\"\n\nimport \"./patient-summary-button.css\"\n\nconst Touchable = Tfw.View.Touchable\n\ninterface IPatientSummaryButtonProps {\n    className?: string | string[]\n    patientSummary: IPatientSummary\n    onClick(patientSummary: IPatientSummary): void\n}\n\nexport default class PatientSummaryButton extends React.Component<IPatientSummaryButtonProps, {}> {\n    private handleClick = () => {\n        this.props.onClick({ ...this.props.patientSummary })\n    }\n\n    render() {\n        const classes = [\n            'view-PatientSummaryButton',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <Touchable\n                className=\"thm-bg1 item\"\n                onClick={this.handleClick}\n            >\n                <PatientShortDesc patient={this.props.patientSummary} />\n            </Touchable>\n        </div>)\n    }\n}\n","import { IPatientSummary } from \"../../../types\"\n\nexport default class PatientsExport {\n    private _filteredList: IPatientSummary[]\n    // patientSummaries and footPrints must keep the same order!\n    private patientSummaries: IPatientSummary[]\n    private readonly footPrints: IPatientFootPrint[]\n\n    constructor(patientSummaries: IPatientSummary[]) {\n        this.patientSummaries = patientSummaries\n        this._filteredList = patientSummaries.slice()\n        this.footPrints = patientSummaries.map(p => ({\n            id: p.id,\n            firstName: simplifyName(p.firstname),\n            lastName: simplifyName(p.lastname)\n        }))\n    }\n\n    filter(lastName: string, firstName: string) {\n        const simpleLastName = simplifyName(lastName)\n        const simpleFirstName = simplifyName(firstName)\n\n        this._filteredList = this.patientSummaries.filter(\n            (patientSummary: IPatientSummary, idx: number) => {\n                const item = this.footPrints[idx]\n                return match(item.lastName, simpleLastName)\n                    && match(item.firstName, simpleFirstName)\n            }\n        )\n    }\n\n    get filteredList() { return this._filteredList.slice() }\n}\n\ninterface IPatientFootPrint {\n    id: string\n    firstName: string\n    lastName: string\n}\n\n\nconst NOT_FOUND = -1\n\n\nfunction match(value: string, test: string): boolean {\n    if (test.length === 0) return true\n    return value.indexOf(test) !== NOT_FOUND\n}\n\n\nconst LETTERS_TO_KEEP = \"abcdefghijklmnopqrstuvwxyz\"\nconst LETTERS_TO_CHANGE = [\n    [\"àáäâã\", \"a\"],\n    [\"èéëêẽ\", \"e\"],\n    [\"ìíïîĩ\", \"i\"],\n    [\"òóöôõ\", \"o\"],\n    [\"ùúüûũ\", \"u\"],\n    [\"ç\", \"c\"],\n    [\"€\", \"e\"],\n    [\"ñ\", \"n\"]\n]\n\nfunction simplifyName(name: string): string {\n    let out = \"\"\n    for (const letter of name.toLowerCase()) {\n        const replacement = findReplacement(letter)\n        if (replacement) {\n            out += replacement\n        }\n        else if (LETTERS_TO_KEEP.indexOf(letter) !== -1) {\n            out += letter\n        }\n    }\n    return out\n}\n\n\n/**\n * Look if the letter can be changed by another one.\n * This is used to get rid of accents and other cedillas.\n * @param letter - Must be in lower case.\n * @return `null` if no replacement has been found.\n */\nfunction findReplacement(letter: string): string | null {\n    for (const map of LETTERS_TO_CHANGE) {\n        const [candidates, replacement] = map\n        if (candidates.indexOf(letter) !== NOT_FOUND) {\n            return replacement\n        }\n    }\n    return null\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport PatientForm from '../../patient-form'\nimport State from '../../../state'\nimport Translate from '../../../translate'\nimport { IPatientSummary } from \"../../../types\"\nimport PatientSummaryButton from '../../patient-summary-button'\nimport PatientsFilter from './patients-filter'\nimport PatientManager from '../../../manager/patient'\nimport PatientService from '../../../service/patient'\nimport Package from '../../../../package.json'\nimport DateUtil from '../../../date-util'\nimport Settings from '../../../settings'\n\nimport \"./patients.css\"\n\nconst Button = Tfw.View.Button\nconst List = Tfw.View.List\n\nconst FILTER_DEBOUNCING = 350\n\ninterface IPatientsProps {\n    className?: string[]\n    patient: IPatientSummary\n    patients: IPatientSummary[]\n    onPatientChange(patient: IPatientSummary): void\n    onPatientClick(patient: IPatientSummary): void\n}\ninterface IPatientsState {\n    filteredPatients: IPatientSummary[]\n}\n\nexport default class Patients extends React.Component<IPatientsProps, IPatientsState> {\n    private oldPatients?: IPatientSummary[]\n    private patientsFilter?: PatientsFilter\n\n    state = {\n        filteredPatients: this.props.patients\n    }\n\n    componentDidMount() {\n        this.refreshPatientsFilter()\n    }\n\n    componentDidUpdate() {\n        this.refreshPatientsFilter()\n    }\n\n    private refreshPatientsFilter() {\n        const { patients } = this.props\n        if (patients !== this.oldPatients) {\n            this.oldPatients = patients\n            this.patientsFilter = new PatientsFilter(patients)\n        }\n        this.filter()\n    }\n\n    private filter = Tfw.Async.Debouncer(() => {\n        const { patientsFilter } = this\n        if (patientsFilter) {\n            const { patient } = this.props\n            patientsFilter.filter(patient.lastname, patient.firstname)\n            this.setState({\n                filteredPatients: patientsFilter.filteredList\n            })\n        }\n    }, FILTER_DEBOUNCING)\n\n    private handlePatientChange = (patientSummary: IPatientSummary) => {\n        this.props.onPatientChange(patientSummary)\n    }\n\n    private renderPatientSummaryButton = (patientSummary: IPatientSummary) => {\n        return <PatientSummaryButton\n            patientSummary={patientSummary}\n            onClick={this.handlePatientSummaryClick}\n        />\n    }\n\n    private handlePatientSummaryClick = (patientSummary: IPatientSummary) => {\n        console.info(\"patientSummary=\", patientSummary)\n        this.props.onPatientChange(patientSummary)\n        this.props.onPatientClick(patientSummary)\n    }\n\n    private handleAddNewPatient = async () => {\n        const patient = PatientManager.createPatientFromSummary(\n            this.props.patient\n        )\n        await PatientService.setPatient(patient)\n        this.props.onPatientClick(this.props.patient)\n    }\n\n    render() {\n        const { patientsFilter } = this\n        if (!patientsFilter) return null\n\n        const classes = [\n            'view-page-Patients',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const { patient } = this.props\n        const { filteredPatients } = this.state\n\n        return (<div className={classes.join(' ')}>\n            <header className=\"thm-bgPD thm-ele-nav\">\n                <Button\n                    icon=\"close\"\n                    small={true}\n                    warning={true}\n                    label=\"Quitter\"\n                    onClick={() => process.exit(0)}\n                />\n                <div>WebSoins Consultations v{Package.version}</div>\n                <Button\n                    label={Translate.importPatients}\n                    small={true}\n                    icon=\"import\"\n                    onClick={() => State.setPage(\"import-patients\")}\n                />\n            </header>\n            <section>\n                <div>\n                    <div className=\"patients-form thm-bg2 thm-ele-button\">\n                        <h1>Données démographiques du patient</h1>\n                        <PatientForm\n                            patient={patient}\n                            onChange={this.handlePatientChange}\n                        />\n                        <p className={filteredPatients.length === 0 ? 'hide' : ''}>\n                            Si le <b>patient existe déjà</b> dans la colonne de droite,\n                            <b>cliquez dessus</b> pour voir ses anciennes consultations\n                            et éventuellement en ajouter une nouvelle.\n                        </p>\n                        <Button\n                            icon=\"add\"\n                            wide={true}\n                            label=\"Ajouter un nouveau patient\"\n                            enabled={canAddNewPatient(patient)}\n                            warning={true}\n                            onClick={this.handleAddNewPatient}\n                        />\n                    </div>\n                    <div className=\"remote-server\">{\n                        Settings.remoteServer\n                    }</div>\n                </div>\n                <div className=\"patients-list\">\n                    <h1>Patients correspondant au filtre: &nbsp;\n                        <big>{filteredPatients.length}</big>\n                        <small> / {this.props.patients.length}</small></h1>\n                    <List\n                        className=\"list\"\n                        itemHeight={32}\n                        items={this.state.filteredPatients}\n                        mapper={this.renderPatientSummaryButton}\n                    />\n                </div>\n            </section>\n        </div>)\n    }\n}\n\nfunction canAddNewPatient(patient: IPatientSummary): boolean {\n    if (patient.lastname.trim().length === 0) return false\n    if (patient.firstname.trim().length === 0) return false\n    if (patient.country.trim().length === 0) return false\n    // We cannot add the patient if he/she is born in 1000 or before.\n    if (!DateUtil.isDefinedDate(patient.birth)) return false\n\n    return true\n}\n","import FileSystem from './file-system'\nimport PatientService from './patient'\nimport PatientManager from '../manager/patient'\nimport { IPatient, IPatientSummary, IRecord } from '../types'\n\nexport default class PatientImport {\n    static async create(patientsFilePath: string): Promise<PatientImport> {\n        const content = await FileSystem.readText(patientsFilePath)\n        const path = patientsFilePath.substr(\n            0, patientsFilePath.length - \"patients.json\".length)\n        return new PatientImport(content, path)\n    }\n\n    private readonly _patientsCount: number\n    private readonly _records: { [key: string]: IRecord }\n\n    private constructor(content: string, private path: string) {\n        try {\n            const patients = JSON.parse(content)\n            if (typeof patients.count !== 'number') {\n                throw Error('Wrong file format: missing \"count\" attribute!')\n            }\n            this._patientsCount = patients.count\n            if (typeof patients.records !== 'object') {\n                throw Error('Wrong file format: missing \"records\" attribute!')\n            }\n            if (Array.isArray(patients.records)) {\n                throw Error('Wrong file format: \"records\" must not be an array!')\n            }\n            this._records = patients.records\n            console.info(\"patients=\", patients)\n        } catch (ex) {\n            console.log(ex)\n            throw Error('Unable to parse \"patients.json\" content!')\n        }\n    }\n\n    get patientsCount() { return this._patientsCount }\n\n    getPatientBio(index: number): IPatientSummary {\n        const records: { [key: string]: IRecord } = this._records\n        const keys = Object.keys(records)\n        const key = keys[index]\n        if (!key) throw Error(`Invalid patient index #${index}!`)\n        return PatientManager.getSummaryFromRecord(records[key])\n    }\n\n    async getPatient(key: string): Promise<IPatient> {\n        const patient = await PatientService.getPatient(key, this.path)\n        return patient\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\nimport State from '../../../state'\nimport PatientShortDesc from '../../patient-short-desc'\nimport PatientService from '../../../service/patient'\nimport PatientImportService from '../../../service/patient-import'\nimport { IPatientSummary } from \"../../../types\"\n\n\nimport \"./import-patient.css\"\n\nconst Button = Tfw.View.Button\nconst InputFile = Tfw.View.InputFile\nconst Progress = Tfw.View.Progress\nconst Flex = Tfw.Layout.Flex\nconst Dialog = Tfw.Factory.Dialog\n\ninterface IImportPatientProps {\n    className?: string | string[]\n}\ninterface IImportPatientState {\n    progress: number\n    count: number\n    patient?: IPatientSummary\n    addedPatientsCount: number\n    rejectedPatientsCount: number\n}\n\nexport default class ImportPatient extends React.Component<IImportPatientProps, IImportPatientState> {\n    state = {\n        progress: 0,\n        count: 0,\n        patient: undefined,\n        addedPatientsCount: 0,\n        rejectedPatientsCount: 0\n    }\n\n    private handleFilesClick = async (files: FileList) => {\n        if (files.length !== 1) {\n            await Dialog.error(\"Veuillez sélectionner un et un seul fichier.\")\n            return\n        }\n\n        // We untype this because we have the `path` attribute\n        // thanks to NodeWebkit.\n        const file = (files.item(0) as unknown) as any\n        if (!file) return\n        console.info(\"file=\", file)\n        if (file.name !== 'patients.json') {\n            await Dialog.error('Vous devez sélectionner un fichier nommé \"patients.json\".')\n            return\n        }\n\n        this.setState(\n            { progress: 0.000001 },\n            () => this.importPatients(file.path)\n        )\n    }\n\n    private async importPatients(path: string) {\n        const importer = await PatientImportService.create(path)\n        let addedPatientsCount = 0\n        let rejectedPatientsCount = 0\n        this.setState({\n            count: importer.patientsCount,\n            addedPatientsCount,\n            rejectedPatientsCount\n        })\n\n        for (let patientIndex = 0; patientIndex < importer.patientsCount; patientIndex++) {\n            this.setState({\n                progress: patientIndex / importer.patientsCount\n            })\n            try {\n                const patientBio = importer.getPatientBio(patientIndex)\n                this.setState({ patient: patientBio })\n                console.info(\"patientBio=\", patientBio)\n                const key = patientBio.id\n                const patient = await importer.getPatient(key)\n                console.info(\"patient=\", patient)\n                if (PatientService.exists(patient.id)) {\n                    rejectedPatientsCount++\n                    this.setState({ rejectedPatientsCount })\n                } else {\n                    addedPatientsCount++\n                    this.setState({ addedPatientsCount })\n                    await PatientService.setPatient(patient)\n                }\n            } catch (ex) {\n                console.error(ex)\n            }\n        }\n        this.setState({ progress: 1 })\n    }\n\n    private handleBack = async () => {\n        State.setPage(\"patients\")\n        const patients = await PatientService.getAllPatients()\n        console.info(\"patients=\", patients)\n        State.setPatients(patients)\n    }\n\n    render() {\n        const classes = [\n            'view-page-ImportPatient', 'thm-bg1',\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n        const { progress, count, patient } = this.state\n        const isWorking = progress > 0 && progress < 1\n\n        return (<div className={classes.join(' ')}>\n            <Flex>\n                <Button\n                    className=\"back-button\"\n                    icon=\"left\"\n                    label=\"Retour\"\n                    enabled={!isWorking}\n                    warning={true}\n                    onClick={this.handleBack}\n                />\n                <p>\n                    Utilisez cet outil pour récupérer des patients depuis une autre\n                    base de donnée.<br />\n                    Seuls les patients que vous n'avez pas déjà dans votre base\n                    seront importés.\n                </p>\n                <InputFile\n                    accept=\".json\"\n                    icon=\"user\"\n                    label='Importer le fichier \"patients.json\"'\n                    wide={true}\n                    enabled={!isWorking && count === 0}\n                    onClick={this.handleFilesClick}\n                />\n            </Flex>\n            <div className={`progress ${count > 0 ? \"show\" : \"hide\"}`}>\n                <Progress\n                    label={`Importation de ${count} patient${count > 1 ? \"s\" : \"\"} (${Math.floor(0.5 + 100 * progress)}%)`}\n                    value={progress}\n                    wide={true}\n                    height=\"2rem\"\n                />\n                {\n                    patient &&\n                    <div className=\"patient-desc\">\n                        <PatientShortDesc patient={patient} />\n                    </div>\n                }\n            </div>\n            <Flex>\n                <div>\n                    <p>Patients importés :</p>\n                    <big>{this.state.addedPatientsCount}</big>\n                </div>\n                <div>\n                    <p>Patients déjà existants :</p>\n                    <big>{this.state.rejectedPatientsCount}</big>\n                </div>\n            </Flex>\n        </div>)\n    }\n}\n","import React from \"react\"\nimport Tfw from 'tfw'\n\nimport Splash from './splash'\nimport PageConsultation from '../view/page/consultation'\nimport PagePatient from '../view/page/patient'\nimport PagePatients from '../view/page/patients'\nimport PageImportPatients from '../view/page/import-patient'\nimport { IPatientSummary, IPatient, IConsultation } from '../types'\n\nimport \"./app.css\"\n\nconst Stack = Tfw.Layout.Stack\n\ninterface IAppProps {\n    className?: string[]\n    page: string\n    consultationId: string\n    patient: IPatientSummary\n    patients: IPatientSummary[]\n    onPatientChange(patientSummary: IPatientSummary): void\n    onPatientClick(patientSummary: IPatientSummary): void\n    onEndOfConsultationEdition(consultation: IConsultation | null, patient?: IPatient): void\n}\ninterface IAppState { }\n\nexport default class App extends React.Component<IAppProps, IAppState> {\n    state = {}\n\n    componentDidMount() {\n        Splash.hide()\n    }\n\n    handlePatientChange = (patientSummary: IPatientSummary) => {\n        this.props.onPatientChange(patientSummary)\n    }\n\n    handlePatientClick = (patientSummary: IPatientSummary) => {\n        this.props.onPatientClick(patientSummary)\n    }\n\n    handleEndOfConsultationEdition = (consultation: IConsultation | null, patient?: IPatient) => {\n        this.props.onEndOfConsultationEdition(consultation, patient)\n    }\n\n    render() {\n        console.log(\"APP\")\n        const classes = [\n            'App', \"thm-bg0\",\n            ...Tfw.Converter.StringArray(this.props.className, [])\n        ]\n\n        return (<div className={classes.join(' ')}>\n            <Stack\n                fullscreen={true}\n                scrollable={true}\n                value={this.props.page}\n            >\n                <PageConsultation\n                    key=\"consultation\"\n                    consultationId={this.props.consultationId}\n                    patientSummary={this.props.patient}\n                    onBack={this.handleEndOfConsultationEdition}\n                />\n                <PagePatient\n                    key=\"patient\"\n                    patientSummary={this.props.patient}\n                />\n                <PagePatients\n                    key=\"patients\"\n                    patient={this.props.patient}\n                    patients={this.props.patients}\n                    onPatientChange={this.handlePatientChange}\n                    onPatientClick={this.handlePatientClick}\n                />\n                <PageImportPatients\n                    key=\"import-patients\"\n                />\n            </Stack>\n        </div>)\n    }\n}\n","import { connect } from 'react-redux'\nimport State from '../state'\nimport { IAppState, IPatientSummary, IPatient, IConsultation } from \"../types\"\nimport AppView from \"./app\"\nimport PatientManager from '../manager/patient'\nimport PatientService from '../service/patient'\n\nfunction mapStateToProps(state: IAppState) {\n    return {\n        consultationId: state.consultationId,\n        page: state.page,\n        patient: state.patient,\n        patients: state.patients\n    }\n}\n\nfunction mapDispatchToProps(dispatch: any) {\n    return {\n        onPatientChange(patientSummary: IPatientSummary) {\n            State.setPatient(patientSummary)\n        },\n        onPatientClick(patientSummary: IPatientSummary) {\n            State.setPatient(patientSummary)\n            State.setPage(\"patient\")\n        },\n        async onEndOfConsultationEdition(consultation: IConsultation | null, patient?: IPatient) {\n            if (consultation && patient) {\n                // Save the consultation.\n                PatientManager.updateConsultation(patient, consultation)\n                await PatientService.setPatient(patient)\n            }\n            State.setPage(\"patient\")\n        }\n    };\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppView);\n","import Tfw from 'tfw'\r\nimport { IFormField } from '../../types'\r\n\r\nconst _ = Tfw.Intl.make(require(\"./parser.json\"));\r\n\r\ninterface IFormFieldWithPath extends IFormField {\r\n    path: string[]\r\n}\r\n\r\n/**\r\n * Le fichier `types.org` définit tous  les types de données complexe.\r\n * Il  n'y a  pas  de type  très contraignant,  tous  les textes  sont\r\n * libres, mais on propose des listes pour faciliter la saisie. Chaque\r\n * élément  de cette  liste est  muni d'un  identifiant (précédé  d'un\r\n * dièse `#`).\r\n * Un type peut être hiérarchique. Par exemple, une adresse propose un\r\n * pays, une région,  un district, ... Les  propositions dépendent des\r\n * choix  précédents. Ainsi,  la liste  des propositions  de districts\r\n * dépend de la région sélectionnée.\r\n *\r\n * Le  parsing du  fichier `types.org`  se  fait ligne  par ligne.  On\r\n * ignore tous  les espaces/tabulations en  début de ligne.  Le nombre\r\n * d'astérisques  `*`  qui  commencent  une ligne  indique  le  niveau\r\n * hiérarchique.\r\n * Au  niveau 1,  on trouve  l'identifiant du  type qui  doit toujours\r\n * commencer par un dièse `#`.\r\n *\r\n * Voici un  exemple de  fichier en  entrée et de  comment on  doit le\r\n * traduire.\r\n * ```\r\n * #GENDER\r\n * * #H Homme\r\n * * #F Femme\r\n *\r\n * #LOCALIZATION\r\n * * Cameroun\r\n * ** Littoral\r\n * *** District 9\r\n * **** Village 1\r\n * **** Village 2\r\n * **** Village 3\r\n * *** Un peu plus loin\r\n * **** Village A\r\n * **** Village B\r\n * ** Centre\r\n * *** Pas tout près\r\n * **** Village Toto\r\n * *** Au fin fond du...\r\n * **** Village Alpha\r\n * **** Village Beta\r\n * **** Village Gama\r\n * ```\r\n *\r\n * ```\r\n * {\r\n *   \"#GENDER\": {\r\n *     \"#H\": { \"caption\": \"Homme\" },\r\n *     \"#F\": { \"caption\": \"Femme\" }\r\n *   },\r\n *   \"#LOCALIZATION\": {\r\n *     \"Cameroun\": { \"caption\": \"Cameroun\", \"children\": {\r\n *       \"Littoral\": { \"caption\": \"Littoral\", \"children\": {\r\n *         ...\r\n *       }},\r\n *       \"Centre\": { \"caption\": \"Centre\", \"children\": {\r\n *         ...\r\n *       }},\r\n *       ...\r\n *     }}\r\n *   }\r\n * }\r\n * ```\r\n */\r\n\r\n\r\nconst RX_LINE = /^(#[A-Z0-9-]+)?([^\\(@]*)(\\([^\\)]*\\)\\+?)?(@[A-Z0-9,-]+)?/;\r\n\r\nfunction parse(code: string): { [key: string]: IFormField } {\r\n    const types: { [key: string]: IFormField } = {};\r\n    const levels = [types];\r\n    if (typeof code !== 'string') code = `${code}`;\r\n    code.split('\\n').forEach(function(line, lineNumber) {\r\n        try {\r\n            line = line.trim();\r\n            // Ignorer les lignes vides.\r\n            if (line.length === 0) return;\r\n            // Ignorer les commentaires.\r\n            if (line.substr(0, 2) === '//') return;\r\n            if (line.charAt(0) !== '*') throw _('err-1');\r\n\r\n            // Calculer le niveau hiérarchique `level`.\r\n            const level = computeLevel(line);\r\n            line = line.substr(level).trim();\r\n\r\n            if (level > levels.length) {\r\n                throw _('err-2', line, levels.length - 1, level);\r\n            }\r\n            while (levels.length > level) {\r\n                levels.pop();\r\n            }\r\n            const item: IFormField = parseLine(line);\r\n            if (typeof levels[levels.length - 1][item.id] !== 'undefined') {\r\n                throw _('err-3', item.id);\r\n            }\r\n            levels[levels.length - 1][item.id] = item;\r\n            levels.push(item.children || {});\r\n        }\r\n        catch (ex) {\r\n            throw { lineNumber: lineNumber + 1, message: ex };\r\n        }\r\n    });\r\n    return types;\r\n};\r\n\r\n\r\n/**\r\n * @param   {string} line - Line to parse.\r\n * @returns {number} Number of leading '*' in the line.\r\n */\r\nfunction computeLevel(line: string): number {\r\n    let level = 0;\r\n    while (line.charAt(0) == '*') {\r\n        line = line.substr(1);\r\n        level++;\r\n    }\r\n    return level;\r\n}\r\n\r\n\r\nfunction parseLine(line: string): IFormField {\r\n    const item: IFormField = {\r\n        id: \"\",\r\n        caption: \"\",\r\n        children: {},\r\n        tags: []\r\n    }\r\n    const m = RX_LINE.exec(line.trim())\r\n    if (!m) return item\r\n\r\n    if (m[2]) {\r\n        item.caption = m[2].trim()\r\n    }\r\n    if (m[1]) {\r\n        item.id = m[1].trim()\r\n    } else {\r\n        if (!item.caption) {\r\n            console.error(\"line:\", line)\r\n            console.error(\"item:\", item)\r\n            throw Error(\"Missing id and caption!\")\r\n        }\r\n        item.id = item.caption.toUpperCase()\r\n    }\r\n    if (m[3]) {\r\n        item.type = m[3].substr(1, m[3].length - 2).trim()\r\n    }\r\n    if (m[4]) {\r\n        item.tags = m[4].trim()\r\n            .substr(1)\r\n            .split(',')\r\n            .map(v => v.trim())\r\n    }\r\n    return item\r\n}\r\n\r\n\r\n/**\r\n * @param {object} forms\r\n * {\r\n *   CONCLUSION: {\r\n *     caption: \"Conclusion\",\r\n *     children: {\r\n *       \"#SURGERY-GYN\": {\r\n *         caption: \"Chirurgie\",\r\n *         id: \"#SURGERY-GYN\",\r\n *         type: \"#SURGERY-GYN\"\r\n *       }\r\n *     }\r\n *   },\r\n *   ...\r\n * }\r\n * @return `[{ id:\"#SURGERY-GYN\", caption:\"Chirurgie\", path:[\"Conclusion\", \"Chirurgie\"] }, ...]`\r\n */\r\nfunction flattenFormsFields(\r\n    forms: { [key: string]: IFormField }\r\n): IFormField[] {\r\n    var list: IFormFieldWithPath[] = [];\r\n    recursiveFlattenFormsFields(forms, list, []);\r\n    list.sort(function(a, b) {\r\n        var captionA = a.caption;\r\n        var captionB = b.caption;\r\n        if (captionA < captionB) return -1;\r\n        if (captionA > captionB) return +1;\r\n        return 0;\r\n    });\r\n    return list;\r\n}\r\n\r\n\r\nfunction recursiveFlattenFormsFields(\r\n    children: { [key: string]: IFormField },\r\n    list: IFormFieldWithPath[],\r\n    path: string[]\r\n) {\r\n    Object.keys(children).forEach(function(key) {\r\n        var child = children[key];\r\n        if (typeof child.id === 'string' && child.id.charAt(0) === '#') {\r\n            // Leave.\r\n            list.push({\r\n                id: child.id,\r\n                caption: child.caption,\r\n                children: {},\r\n                tags: [],\r\n                path: path.slice()\r\n            });\r\n        }\r\n        else if (child.children) {\r\n            // Node.\r\n            path.push(child.caption);\r\n            recursiveFlattenFormsFields(child.children, list, path);\r\n            path.pop();\r\n        }\r\n    });\r\n}\r\n\r\n\r\nexport default { parse, flattenFormsFields }\r\n","import Tfw from 'tfw'\nimport Parser from \"../manager/structure/parser\"\nimport Settings from '../settings'\n\nimport {\n    IStructure, IPatientField, IFormField, ITypes, IVaccins\n} from \"../types\"\n\nconst Intl = Tfw.Intl\n\nexport interface IStructureService {\n    id: number;\n    name: string;\n    exams: string;\n    vaccins: string;\n    patient: string;\n    forms: string;\n    types: string;\n}\n\n\nexport default {\n    async getFromRemote(): Promise<IStructure | null> {\n        const organizationId: number = Settings.organizationId\n        const structureId: number = Settings.structureId\n        const WebService = Tfw.WebService.create(\n            Settings.remoteServer\n        )\n        try {\n            const structures: IStructureService[] =\n                await WebService.exec(\"structure.list\", organizationId);\n            const structure = structures.find(\r\n                (structure: IStructureService) => structure.id === structureId\r\n            )\r\n            if (!structure) return null\r\n            console.info(\"structure=\", structure)\r\n            const parsedStructure: IStructure = {\n                id: structure.id,\n                organizationId,\n                name: structure.name,\n                patientFields: parsePatient(structure.patient),\n                formFields: parseFormFields(structure),\n                //exams: parse(structure.exams),\n                //vaccins: parse(structure.vaccins),\n                forms: parse(structure.forms),\n                types: parse(structure.types) as ITypes,\n                vaccins: parseVaccins(structure.vaccins),\n                sources: {\n                    exams: structure.exams,\n                    vaccins: structure.vaccins,\n                    patient: structure.patient,\n                    forms: structure.forms,\n                    types: structure.types\n                }\n            }\r\n            console.info(\"parsedStructure=\", parsedStructure)\r\n            return parsedStructure\r\n        } catch (ex) {\r\n            console.error(ex)\r\n            return null\r\n        }\r\n    }\n}\n\n\nfunction parse(def: string): { [key: string]: IFormField } {\n    try {\n        return Parser.parse(def)\n    }\n    catch (ex) {\n        console.error(\"[service/structure/parse] \", ex)\n        console.log(def)\n        throw Error(ex)\n    }\n}\n\nfunction parseVaccins(stringifiedVaccins: string): IVaccins {\n    const vaccins: IVaccins = {}\n    try {\n        const raw: { [key: string]: IFormField } =\n            Parser.parse(stringifiedVaccins)\n        for (const id of Object.keys(raw)) {\n            vaccins[id] = { caption: raw[id].caption }\n        }\n    }\n    catch (ex) {\n        console.error(\"[parsePatient] \", ex);\n    }\n    return vaccins\n}\n\nfunction parsePatient(stringifiedPatientDef: string): IPatientField[] {\n    try {\n        const raw: { [key: string]: IFormField } =\n            Parser.parse(stringifiedPatientDef)\n        const patients: IPatientField[] = Object.keys(raw)\n            .map((id: string) => {\n                const patient = raw[id];\n                return {\n                    id,\n                    type: patient.type || \"\",\n                    caption: Intl.toIntl(patient.caption) || \"\"\n                }\n            });\n        return patients;\n    }\n    catch (ex) {\n        console.error(\"[parsePatient] \", ex);\n    }\n    return [];\n}\n\ninterface IFlatField {\n    type: string\n    caption: string\n}\n\nfunction parseFormFields(\n    structure: IStructureService\n): { [key: string]: IFlatField } {\n    const result: { [key: string]: IFlatField } = {}\n    const fringe: Array<{ [key: string]: IFormField }> =\n        [parse(structure.forms)]\n\n    while (fringe.length > 0) {\n        const item = fringe.shift()\n        if (!item) continue\n        for (const name of Object.keys(item)) {\n            const value = item[name]\n            result[name] = {\n                type: \"\",\n                caption: Intl.toText(Intl.toIntl(value.caption))\n            }\n            if (value.type) result[name].type = value.type\n            if (value.children) {\n                fringe.push(value.children)\n            }\n        }\n    }\n    return result\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import Tfw from 'tfw'\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport './index.css'\nimport App from './app'\nimport State from './state'\nimport Settings from './settings'\nimport PatientService from './service/patient'\nimport StructureService from './service/structure'\nimport * as serviceWorker from './serviceWorker'\n\nTfw.Theme.register(\"soin\", {\n    white: \"#fda\", black: \"#420\",\n    bg0: \"#ffcb97\", bg1: \"#ffdab3\", bg2: \"#ffe6cc\", bg3: \"#fff3e6\",\n    bgP: \"#804924\", bgPL: \"#b36633\", bgPD: \"#4d2c16\",\n    bgS: \"#ff9f30\", bgSD: \"#ff7f00\", bgSL: \"#ffbf60\"\n})\nTfw.Theme.apply(\"soin\")\nTfw.Font.loadJosefin()\n\nasync function start() {\n    window.addEventListener(\"keyup\", (evt) => {\n        if (evt.key === \"F11\") {\n            evt.preventDefault()\n            //const nw = window['nw'] as any\n            const win = nw.Window.get()\n            win.toggleFullscreen()\n        }\n    }, true)\n    console.info(\"process.env=\", process.env)\n    await Settings.initialize()\n    const patients = await PatientService.getAllPatients()\n    console.info(\"patients=\", patients)\n    State.setPatients(patients)\n    const structure = await StructureService.getFromRemote()\n    if (structure) {\n        // Update structure from network.\n        Settings.structure = structure\n    }\n\n    ReactDOM.render(\n        <Provider store={State.store}>\n            <React.StrictMode>\n                <App />\n            </React.StrictMode>\n        </Provider>,\n        document.getElementById('root')\n    )\n}\n\nstart()\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}